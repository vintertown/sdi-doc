{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome visitor! This is the documentation of the SDI lecture by Florian Winkler (fw061) and Niklas Vinterstad (nv023). We used Prof. Dr. Goik's lecture notes as our main source and oriented ourselves on the information presented. All other sources are referenced at the end of each section. You can find a list of the acronyms used in the last chapter. For the documentation we used MkDocs, which is based on Markdown. Feel free to give it a try here . Happy reading! :)","title":"Home"},{"location":"#welcome-visitor","text":"This is the documentation of the SDI lecture by Florian Winkler (fw061) and Niklas Vinterstad (nv023). We used Prof. Dr. Goik's lecture notes as our main source and oriented ourselves on the information presented. All other sources are referenced at the end of each section. You can find a list of the acronyms used in the last chapter. For the documentation we used MkDocs, which is based on Markdown. Feel free to give it a try here . Happy reading! :)","title":"Welcome visitor!"},{"location":"acronyms/","text":"Acronyms DNS = Domain Name Server IP = Internet Protocol URL = Uniform Resource Locator dig = Domain information grouper CNAME = Canonical name A = Address AAAA = IPv6 Address MX = Mail Exchange NS = Name Server PTR = Pointer SOA = Start of Authority BIND = Berkeley Internet Name Domain arpa = address and routing parameters DNSSEC = Domain Name System Security Extensions ISP = Internet Service Provider SMTP = Simple Mail Transfer Protocol LDAP = Lightweight Directory Access Protocol slapd = Stand-alone LDAP Daemon DIT = Directory Information Tree HMAC = Hash Message Authentication Code TTL = Time To Live LDIF = LDAP Data Interchange Format PAM = Pluggable Authentication Modules Icinga = Monitoring System CPU = Central Processing Unit TLS = Transport Layer Security VPN = Virtual Private Network","title":"Acronyms"},{"location":"acronyms/#acronyms","text":"DNS = Domain Name Server IP = Internet Protocol URL = Uniform Resource Locator dig = Domain information grouper CNAME = Canonical name A = Address AAAA = IPv6 Address MX = Mail Exchange NS = Name Server PTR = Pointer SOA = Start of Authority BIND = Berkeley Internet Name Domain arpa = address and routing parameters DNSSEC = Domain Name System Security Extensions ISP = Internet Service Provider SMTP = Simple Mail Transfer Protocol LDAP = Lightweight Directory Access Protocol slapd = Stand-alone LDAP Daemon DIT = Directory Information Tree HMAC = Hash Message Authentication Code TTL = Time To Live LDIF = LDAP Data Interchange Format PAM = Pluggable Authentication Modules Icinga = Monitoring System CPU = Central Processing Unit TLS = Transport Layer Security VPN = Virtual Private Network","title":"Acronyms"},{"location":"apache/first-steps/","text":"First Steps Installing Apache To install our server we need the latest version of Apache. We can install the version with the following command: aptitude install apache2 Apache will automatically show a default page if the package has been installed correctly. Since we have already entered our virtual machine in the previous DNS task , we can call it globally and see the default page. Using the default Apache frontend We have moved the index.html file which was located in the path /var/www/html to the root folder . When reloading the web page again, a new default page appears. It shows the Apache and Linux version. Hosting own content We can now host our own index.html page with the following content: <!DOCTYPE html> <html> <head> <title>Hello World.</title> </head> <body> <p>Hello World.</p> </body> </html> When moving it to the folder /var/www/html and reloading the browser, we can finally see our own website. Installing the Apache2 documentation First we install the apache2 documentation with the following command apt install apache2-doc After installation, you might wonder how to access this documentation via your website. To locate the documentation files, you can use the dpkg command for package management. By using the -L flag, you can list all the files contained within the package. This will help us identify the path to access the documentation. To examine the output that you get with the dpkg command we can use the following: dpkg -L apache2-doc > files.txt This will save the output to a files.txt -file. This way we can examine the whole output. We get the following output: /. /etc /etc/apache2 /etc/apache2/conf-available /etc/apache2/conf-available/apache2-doc.conf /usr /usr/share /usr/share/doc /usr/share/doc/apache2 /usr/share/doc/apache2/examples ... When taking a close look on the output you can find a conf-available file. Within this file you will find an Alias that looks like this: Alias /manual /usr/share/doc/apache2-doc/manual This directive tells Apache where to serve the documentation files from in the URL path. If the configuration is not already enabled, use the a2enconf command to enable it, and then restart Apache: a2enconf apache2-doc systemctl restart apache2 Now you should be able to access the manual on vm1.g8.mi.hdm-stuttgart.de/manual Uploading our own documentation In order to upload and access our sdi-docs with a browser client, we can use scp with the following command scp -r site/ root@sdi08a.mi.hdm-stuttgart.de:/home/Sdidoc . This uploads the docs to our machine. Now we can adjust the apache configuration file 000-default.conf ( /etc/apache2/sites-available/ ) with: Add the following lines to set permissions for apache to enter /home/... : <Directory /home/Sdidoc/site> Options Indexes FollowSymLinks AllowOverride None Require all granted </Directory> Furthermore we have to set the permissions on our server with the following commands: chown -R www-data:www-data /home/Sdidoc/site chmod -R 755 /home/Sdidoc/site Restart the apache server with: systemctl restart apache2 Configure an Alias to be able to access the docs via .../xy001 . In our case we added this line: Alias /fw061 /home/Sdidoc/site Our apache config file looks like this in the end: <VirtualHost *:80> # The ServerName directive sets the request scheme, hostname and port that # the server uses to identify itself. This is used when creating # redirection URLs. In the context of virtual hosts, the ServerName # specifies what hostname must appear in the request's Host: header to # match this virtual host. For the default virtual host (this file) this # value is not decisive as it is used as a last resort host regardless. # However, you must set it for any further virtual host explicitly. #ServerName www.example.com ServerAdmin webmaster@localhost DocumentRoot /var/www/html Alias /fw061 /home/Sdidoc/site <Directory /home/Sdidoc/site> Options Indexes FollowSymLinks AllowOverride None Require all granted </Directory> # Available loglevels: trace8, ..., trace1, debug, info, notice, warn, # error, crit, alert, emerg. # It is also possible to configure the loglevel for particular # modules, e.g. #LogLevel info ssl:warn ErrorLog ${APACHE_LOG_DIR}/error.log CustomLog ${APACHE_LOG_DIR}/access.log combined # For most configuration files from conf-available/, which are # enabled or disabled at a global level, it is possible to # include a line for only one particular virtual host. For example the # following line enables the CGI configuration for this host only # after it has been globally disabled with \"a2disconf\". #Include conf-available/serve-cgi-bin.conf </VirtualHost>","title":"First Steps"},{"location":"apache/first-steps/#first-steps","text":"","title":"First Steps"},{"location":"apache/first-steps/#installing-apache","text":"To install our server we need the latest version of Apache. We can install the version with the following command: aptitude install apache2 Apache will automatically show a default page if the package has been installed correctly. Since we have already entered our virtual machine in the previous DNS task , we can call it globally and see the default page.","title":"Installing Apache"},{"location":"apache/first-steps/#using-the-default-apache-frontend","text":"We have moved the index.html file which was located in the path /var/www/html to the root folder . When reloading the web page again, a new default page appears. It shows the Apache and Linux version.","title":"Using the default Apache frontend"},{"location":"apache/first-steps/#hosting-own-content","text":"We can now host our own index.html page with the following content: <!DOCTYPE html> <html> <head> <title>Hello World.</title> </head> <body> <p>Hello World.</p> </body> </html> When moving it to the folder /var/www/html and reloading the browser, we can finally see our own website.","title":"Hosting own content"},{"location":"apache/first-steps/#installing-the-apache2-documentation","text":"First we install the apache2 documentation with the following command apt install apache2-doc After installation, you might wonder how to access this documentation via your website. To locate the documentation files, you can use the dpkg command for package management. By using the -L flag, you can list all the files contained within the package. This will help us identify the path to access the documentation. To examine the output that you get with the dpkg command we can use the following: dpkg -L apache2-doc > files.txt This will save the output to a files.txt -file. This way we can examine the whole output. We get the following output: /. /etc /etc/apache2 /etc/apache2/conf-available /etc/apache2/conf-available/apache2-doc.conf /usr /usr/share /usr/share/doc /usr/share/doc/apache2 /usr/share/doc/apache2/examples ... When taking a close look on the output you can find a conf-available file. Within this file you will find an Alias that looks like this: Alias /manual /usr/share/doc/apache2-doc/manual This directive tells Apache where to serve the documentation files from in the URL path. If the configuration is not already enabled, use the a2enconf command to enable it, and then restart Apache: a2enconf apache2-doc systemctl restart apache2 Now you should be able to access the manual on vm1.g8.mi.hdm-stuttgart.de/manual","title":"Installing the Apache2 documentation"},{"location":"apache/first-steps/#uploading-our-own-documentation","text":"In order to upload and access our sdi-docs with a browser client, we can use scp with the following command scp -r site/ root@sdi08a.mi.hdm-stuttgart.de:/home/Sdidoc . This uploads the docs to our machine. Now we can adjust the apache configuration file 000-default.conf ( /etc/apache2/sites-available/ ) with: Add the following lines to set permissions for apache to enter /home/... : <Directory /home/Sdidoc/site> Options Indexes FollowSymLinks AllowOverride None Require all granted </Directory> Furthermore we have to set the permissions on our server with the following commands: chown -R www-data:www-data /home/Sdidoc/site chmod -R 755 /home/Sdidoc/site Restart the apache server with: systemctl restart apache2 Configure an Alias to be able to access the docs via .../xy001 . In our case we added this line: Alias /fw061 /home/Sdidoc/site Our apache config file looks like this in the end: <VirtualHost *:80> # The ServerName directive sets the request scheme, hostname and port that # the server uses to identify itself. This is used when creating # redirection URLs. In the context of virtual hosts, the ServerName # specifies what hostname must appear in the request's Host: header to # match this virtual host. For the default virtual host (this file) this # value is not decisive as it is used as a last resort host regardless. # However, you must set it for any further virtual host explicitly. #ServerName www.example.com ServerAdmin webmaster@localhost DocumentRoot /var/www/html Alias /fw061 /home/Sdidoc/site <Directory /home/Sdidoc/site> Options Indexes FollowSymLinks AllowOverride None Require all granted </Directory> # Available loglevels: trace8, ..., trace1, debug, info, notice, warn, # error, crit, alert, emerg. # It is also possible to configure the loglevel for particular # modules, e.g. #LogLevel info ssl:warn ErrorLog ${APACHE_LOG_DIR}/error.log CustomLog ${APACHE_LOG_DIR}/access.log combined # For most configuration files from conf-available/, which are # enabled or disabled at a global level, it is possible to # include a line for only one particular virtual host. For example the # following line enables the CGI configuration for this host only # after it has been globally disabled with \"a2disconf\". #Include conf-available/serve-cgi-bin.conf </VirtualHost>","title":"Uploading our own documentation"},{"location":"apache/general/","text":"Apache Web Server What is an Apache Web Server? Apache is an open-source web server. It is actively maintained by the Apache Software Foundation. Although the functioning of a web server is complex, the basic task of all web servers is to accept requests from clients (e.g. a visitor's web browser) and then send the response to that request (e.g. the website the visitor wants to see). Apache is cross-platform, which means it can run on various operating systems including Linux, Unix, Windows, and macOS. It supports multiple programming languages such as PHP, Python and Ruby, making it versatile for hosting dynamic websites and web applications. We us Apache for our Linux based Web Server. References en.wikipedia.org/wiki/Apache_HTTP_Server","title":"General"},{"location":"apache/general/#apache-web-server","text":"","title":"Apache Web Server"},{"location":"apache/general/#what-is-an-apache-web-server","text":"Apache is an open-source web server. It is actively maintained by the Apache Software Foundation. Although the functioning of a web server is complex, the basic task of all web servers is to accept requests from clients (e.g. a visitor's web browser) and then send the response to that request (e.g. the website the visitor wants to see). Apache is cross-platform, which means it can run on various operating systems including Linux, Unix, Windows, and macOS. It supports multiple programming languages such as PHP, Python and Ruby, making it versatile for hosting dynamic websites and web applications. We us Apache for our Linux based Web Server.","title":"What is an Apache Web Server?"},{"location":"apache/general/#references","text":"en.wikipedia.org/wiki/Apache_HTTP_Server","title":"References"},{"location":"apache/ldap-authentication/","text":"LDAP authentication Motivation We want to limit the manual directory by providing a LDAP based authentication. Create a test user We create a test user tuser with Apache Directory Studio. For security set a SMD5 hashed password. We can now check the bind configuration In the /etc/apache2/sites-available/manual.conf we can add the LDAP Directory Tree for authentication with the tuser credentials. <VirtualHost *:80> ServerAdmin fw061@hdm-stuttgart.de DocumentRoot /usr/share/doc/apache2-doc/manual ServerName g8.sdi.mi.hdm-stuttgart.de ServerAlias manual.g8.sdi.mi.hdm-stuttgart.de ErrorLog ${APACHE_LOG_DIR}/error.log CustomLog ${APACHE_LOG_DIR}/access.log combined <Directory \"/usr/share/doc/apache2-doc/manual\"> Options Indexes FollowSymlinks AuthType Basic AuthName \"LDAP Authentication\" AuthBasicAuthoritative Off AuthBasicProvider ldap AuthLDAPURL \"ldap://vm1.g8.sdi.mi.hdm-stuttgart.de/uid=tuser,ou=devel,ou=software,ou=departments,dc=bet> AuthLDAPBindDN \"uid=tuser,ou=devel,ou=software,ou=departments,dc=betrayer,dc=com\" AuthLDAPBindPassword sdi Require valid-user </Directory> </VirtualHost> We should restart the apache server again: systemctl restart apache2 Now you should see this login screen, when visiting the manual site of our virtual machine.","title":"LDAP authentication"},{"location":"apache/ldap-authentication/#ldap-authentication","text":"","title":"LDAP authentication"},{"location":"apache/ldap-authentication/#motivation","text":"We want to limit the manual directory by providing a LDAP based authentication.","title":"Motivation"},{"location":"apache/ldap-authentication/#create-a-test-user","text":"We create a test user tuser with Apache Directory Studio. For security set a SMD5 hashed password. We can now check the bind configuration In the /etc/apache2/sites-available/manual.conf we can add the LDAP Directory Tree for authentication with the tuser credentials. <VirtualHost *:80> ServerAdmin fw061@hdm-stuttgart.de DocumentRoot /usr/share/doc/apache2-doc/manual ServerName g8.sdi.mi.hdm-stuttgart.de ServerAlias manual.g8.sdi.mi.hdm-stuttgart.de ErrorLog ${APACHE_LOG_DIR}/error.log CustomLog ${APACHE_LOG_DIR}/access.log combined <Directory \"/usr/share/doc/apache2-doc/manual\"> Options Indexes FollowSymlinks AuthType Basic AuthName \"LDAP Authentication\" AuthBasicAuthoritative Off AuthBasicProvider ldap AuthLDAPURL \"ldap://vm1.g8.sdi.mi.hdm-stuttgart.de/uid=tuser,ou=devel,ou=software,ou=departments,dc=bet> AuthLDAPBindDN \"uid=tuser,ou=devel,ou=software,ou=departments,dc=betrayer,dc=com\" AuthLDAPBindPassword sdi Require valid-user </Directory> </VirtualHost> We should restart the apache server again: systemctl restart apache2 Now you should see this login screen, when visiting the manual site of our virtual machine.","title":"Create a test user"},{"location":"apache/mysql-database/","text":"MySQL\u2122 database administration Motivation We want to install a MySQL Server on our Apache Webserver and access it with PhpMyAdmin. Install MySQL First we can install the default-mysql-server. apt install mysql-server and start the server systemctl start mysql To see whether everything works correctly we can use. systemctl status mysql It provides us the following feedback. \u25cf mariadb.service - MariaDB 10.11.6 database server Loaded: loaded (/lib/systemd/system/mariadb.service; enabled; preset: enabled) Active: active (running) since Mon 2024-02-19 21:07:45 CET; 1min 9s ago Docs: man:mariadbd(8) https://mariadb.com/kb/en/library/systemd/ Main PID: 52008 (mariadbd) Status: \"Taking your SQL requests now...\" Tasks: 9 (limit: 618984) Memory: 81.1M CPU: 826ms CGroup: /system.slice/mariadb.service \u2514\u250052008 /usr/sbin/mariadbd When the installation successfully finishes it provides the following output: NOTE: RUNNING ALL PARTS OF THIS SCRIPT IS RECOMMENDED FOR ALL MariaDB SERVERS IN PRODUCTION USE! PLEASE READ EACH STEP CAREFULLY! In order to log into MariaDB to secure it, we'll need the current password for the root user. If you've just installed MariaDB, and haven't set the root password yet, you should just press enter here. Enter current password for root (enter for none): OK, successfully used password, moving on... Setting the root password or using the unix_socket ensures that nobody can log into the MariaDB root user without the proper authorisation. You already have your root account protected, so you can safely answer 'n'. Switch to unix_socket authentication [Y/n] n ... skipping. You already have your root account protected, so you can safely answer 'n'. Change the root password? [Y/n] n ... skipping. By default, a MariaDB installation has an anonymous user, allowing anyone to log into MariaDB without having to have a user account created for them. This is intended only for testing, and to make the installation go a bit smoother. You should remove them before moving into a production environment. Remove anonymous users? [Y/n] Y ... Success! Normally, root should only be allowed to connect from 'localhost'. This ensures that someone cannot guess at the root password from the network. Disallow root login remotely? [Y/n] n ... skipping. By default, MariaDB comes with a database named 'test' that anyone can access. This is also intended only for testing, and should be removed before moving into a production environment. Remove test database and access to it? [Y/n] n ... skipping. Reloading the privilege tables will ensure that all changes made so far will take effect immediately. Reload privilege tables now? [Y/n] Y ... Success! Cleaning up... All done! If you've completed all of the above steps, your MariaDB installation should now be secure. Thanks for using MariaDB! Install phpmyadmin Install phpmyadmin with the following command: apt install phpmyadmin Furthermore we have to use the following package in order to install php. We need php for phpmyadmin. apt install libapache2-mod-php We encountered the issue that no config files were created under /etc/apache2/conf-enabled. We fixed the problem with manually creating the config files in /etc/apache2/conf-enabled/phpmyadmin.conf and /etc/apache2/conf-available/phpmyadmin.conf. Write the following code into your config files. Alias /phpmyadmin /usr/share/phpmyadmin <Directory /usr/share/phpmyadmin> Options FollowSymLinks DirectoryIndex index.php Require all granted </directory> We also use a link to the /etc/apache2/conf-available with ln -s /etc/apache2/conf-available/phpmyadmin.conf /etc/apache2/conf-enabled/phpmyadmin.conf . Using the dpkg-reconfigure phpmyadmin command, we can select the web server we are using (such as Apache) and enter the MySQL credentials that were specified earlier. This step configures phpMyAdmin to connect to the MySQL server. After completing this configuration, phpMyAdmin will be able to successfully establish a connection to the MySQL server, allowing for database management through its web interface. Important: Restart apache before trying to reach your server in the browser. systemctl restart apache2 When everything is correctly set up you can go to the phpmyadmin website and log in with your credentials. When successfully logged in you get to this screen.","title":"MySQL Database"},{"location":"apache/mysql-database/#mysqltm-database-administration","text":"","title":"MySQL\u2122 database administration"},{"location":"apache/mysql-database/#motivation","text":"We want to install a MySQL Server on our Apache Webserver and access it with PhpMyAdmin.","title":"Motivation"},{"location":"apache/mysql-database/#install-mysql","text":"First we can install the default-mysql-server. apt install mysql-server and start the server systemctl start mysql To see whether everything works correctly we can use. systemctl status mysql It provides us the following feedback. \u25cf mariadb.service - MariaDB 10.11.6 database server Loaded: loaded (/lib/systemd/system/mariadb.service; enabled; preset: enabled) Active: active (running) since Mon 2024-02-19 21:07:45 CET; 1min 9s ago Docs: man:mariadbd(8) https://mariadb.com/kb/en/library/systemd/ Main PID: 52008 (mariadbd) Status: \"Taking your SQL requests now...\" Tasks: 9 (limit: 618984) Memory: 81.1M CPU: 826ms CGroup: /system.slice/mariadb.service \u2514\u250052008 /usr/sbin/mariadbd When the installation successfully finishes it provides the following output: NOTE: RUNNING ALL PARTS OF THIS SCRIPT IS RECOMMENDED FOR ALL MariaDB SERVERS IN PRODUCTION USE! PLEASE READ EACH STEP CAREFULLY! In order to log into MariaDB to secure it, we'll need the current password for the root user. If you've just installed MariaDB, and haven't set the root password yet, you should just press enter here. Enter current password for root (enter for none): OK, successfully used password, moving on... Setting the root password or using the unix_socket ensures that nobody can log into the MariaDB root user without the proper authorisation. You already have your root account protected, so you can safely answer 'n'. Switch to unix_socket authentication [Y/n] n ... skipping. You already have your root account protected, so you can safely answer 'n'. Change the root password? [Y/n] n ... skipping. By default, a MariaDB installation has an anonymous user, allowing anyone to log into MariaDB without having to have a user account created for them. This is intended only for testing, and to make the installation go a bit smoother. You should remove them before moving into a production environment. Remove anonymous users? [Y/n] Y ... Success! Normally, root should only be allowed to connect from 'localhost'. This ensures that someone cannot guess at the root password from the network. Disallow root login remotely? [Y/n] n ... skipping. By default, MariaDB comes with a database named 'test' that anyone can access. This is also intended only for testing, and should be removed before moving into a production environment. Remove test database and access to it? [Y/n] n ... skipping. Reloading the privilege tables will ensure that all changes made so far will take effect immediately. Reload privilege tables now? [Y/n] Y ... Success! Cleaning up... All done! If you've completed all of the above steps, your MariaDB installation should now be secure. Thanks for using MariaDB!","title":"Install MySQL"},{"location":"apache/mysql-database/#install-phpmyadmin","text":"Install phpmyadmin with the following command: apt install phpmyadmin Furthermore we have to use the following package in order to install php. We need php for phpmyadmin. apt install libapache2-mod-php We encountered the issue that no config files were created under /etc/apache2/conf-enabled. We fixed the problem with manually creating the config files in /etc/apache2/conf-enabled/phpmyadmin.conf and /etc/apache2/conf-available/phpmyadmin.conf. Write the following code into your config files. Alias /phpmyadmin /usr/share/phpmyadmin <Directory /usr/share/phpmyadmin> Options FollowSymLinks DirectoryIndex index.php Require all granted </directory> We also use a link to the /etc/apache2/conf-available with ln -s /etc/apache2/conf-available/phpmyadmin.conf /etc/apache2/conf-enabled/phpmyadmin.conf . Using the dpkg-reconfigure phpmyadmin command, we can select the web server we are using (such as Apache) and enter the MySQL credentials that were specified earlier. This step configures phpMyAdmin to connect to the MySQL server. After completing this configuration, phpMyAdmin will be able to successfully establish a connection to the MySQL server, allowing for database management through its web interface. Important: Restart apache before trying to reach your server in the browser. systemctl restart apache2 When everything is correctly set up you can go to the phpmyadmin website and log in with your credentials. When successfully logged in you get to this screen.","title":"Install phpmyadmin"},{"location":"apache/publish-documentation/","text":"Publish your documentation As there are more chapters to follow, this step is carried out last. However, the instructions for this via scp have already been discussed in this chapter .","title":"Publish Documentation"},{"location":"apache/publish-documentation/#publish-your-documentation","text":"As there are more chapters to follow, this step is carried out last. However, the instructions for this via scp have already been discussed in this chapter .","title":"Publish your documentation"},{"location":"apache/ssl-tsl-support/","text":"SSL/TSL Support We use the link manual as a base layer for this exercise: https://dgu2000.medium.com/working-with-self-signed-certificates-in-chrome-walkthrough-edition-a238486e6858 Motivation Our goal with this task is to create our own CA and store a certificate file in our browser so that we are able to authenticate via SSL and use a save connection with https . To achieve this we also need a certificate file, which is signed via the CA and store it on the remote server. Prerequisites We have created a /cert folder under the /home directory to create all our data. Becoming your own CA First we want to become our own CA (Certificate Authority). For that we first have to generate a key and secondly create a certificate .pem -file Generate a key with: openssl genrsa -des3 -out rootCA.key 2048 Generate a root certificate file that is valid for two years with: openssl req -x509 -new -nodes -key rootCA.key -sha256 -days 730 -out rootCA.pem You are about to be asked to enter information that will be incorporated into your certificate request. What you are about to enter is what is called a Distinguished Name or a DN. There are quite a few fields but you can leave some blank For some fields there will be a default value, If you enter '.', the field will be left blank. ----- Country Name (2 letter code) [AU]:DE State or Province Name (full name) [Some-State]:Baden-Wuerttemberg Locality Name (eg, city) []:Stuttgart Organization Name (eg, company) [Internet Widgits Pty Ltd]:Hochschule der Medien Organizational Unit Name (eg, section) []:Medieninformatik Common Name (e.g. server FQDN or YOUR name) []:g8.sdi.mi.hdm-stuttgart.de Email Address []:nv023@hdm-stuttgart.de Please enter the following 'extra' attributes to be sent with your certificate request A challenge password []: An optional company name []: To check the just created root certificate: openssl x509 -in rootCA.pem -text -noout Creating a certificate request We use the openssl -command-line tool to generate a private key. openssl genrsa -out tls.key 2048 Then the certificate signing request is created openssl req -new -key tls.key -out tls.csr We can create a openssl.cnf -file with our domain name that is associated with the certificate. # GNU nano 7.2 openssl.cnf # Extensions to add to a certificate request basicConstraints = CA:FALSE authorityKeyIdentifier = keyid:always, issuer:always keyUsage = nonRepudiation, digitalSignature, keyEncipherment, dataEncipherment subjectAltName = @alt_names [ alt_names ] DNS.1 = *.g8.sdi.mi.hdm-stuttgart.de Signing the certificate request to generate the certificate openssl x509 -req \\ -in tls.csr \\ -CA rootCA.pem \\ -CAkey rootCA.key \\ -CAcreateserial \\ -out tls.crt \\ -days 730 \\ -sha256 \\ -extfile openssl.cnf To verify if the config works properly: openssl verify -CAfile rootCA.pem -verify_hostname .g8.sdi.mi.hdm-stuttgart.de tls.crt We get the following output when testing the file: tls.crt:OK Adding CA as trusted to your Browser On our local machine: sudo scp -i ~/.ssh/sdi_nv023 root@sdi08a.mi.hdm-stuttgart.de:/home/cert/rootCA.pem /home Important: Use sudo for executing this command, otherwise you do not have the permission to copy the file to your machine. We can import the CA in Google Chrome with the following steps: Settings Privacy & Security Security Manage Certificates Authorities Import When visiting the website now we can see that the certificate is valid and https works. The following image is shown, when clicking on the certificate: References www.dgu2000.medium.com/working-with-self-signed-certificates-in-chrome-walkthrough-edition-a238486e6858","title":"SSL/TSL Support"},{"location":"apache/ssl-tsl-support/#ssltsl-support","text":"We use the link manual as a base layer for this exercise: https://dgu2000.medium.com/working-with-self-signed-certificates-in-chrome-walkthrough-edition-a238486e6858","title":"SSL/TSL Support"},{"location":"apache/ssl-tsl-support/#motivation","text":"Our goal with this task is to create our own CA and store a certificate file in our browser so that we are able to authenticate via SSL and use a save connection with https . To achieve this we also need a certificate file, which is signed via the CA and store it on the remote server.","title":"Motivation"},{"location":"apache/ssl-tsl-support/#prerequisites","text":"We have created a /cert folder under the /home directory to create all our data.","title":"Prerequisites"},{"location":"apache/ssl-tsl-support/#becoming-your-own-ca","text":"First we want to become our own CA (Certificate Authority). For that we first have to generate a key and secondly create a certificate .pem -file Generate a key with: openssl genrsa -des3 -out rootCA.key 2048 Generate a root certificate file that is valid for two years with: openssl req -x509 -new -nodes -key rootCA.key -sha256 -days 730 -out rootCA.pem You are about to be asked to enter information that will be incorporated into your certificate request. What you are about to enter is what is called a Distinguished Name or a DN. There are quite a few fields but you can leave some blank For some fields there will be a default value, If you enter '.', the field will be left blank. ----- Country Name (2 letter code) [AU]:DE State or Province Name (full name) [Some-State]:Baden-Wuerttemberg Locality Name (eg, city) []:Stuttgart Organization Name (eg, company) [Internet Widgits Pty Ltd]:Hochschule der Medien Organizational Unit Name (eg, section) []:Medieninformatik Common Name (e.g. server FQDN or YOUR name) []:g8.sdi.mi.hdm-stuttgart.de Email Address []:nv023@hdm-stuttgart.de Please enter the following 'extra' attributes to be sent with your certificate request A challenge password []: An optional company name []: To check the just created root certificate: openssl x509 -in rootCA.pem -text -noout","title":"Becoming your own CA"},{"location":"apache/ssl-tsl-support/#creating-a-certificate-request","text":"We use the openssl -command-line tool to generate a private key. openssl genrsa -out tls.key 2048 Then the certificate signing request is created openssl req -new -key tls.key -out tls.csr We can create a openssl.cnf -file with our domain name that is associated with the certificate. # GNU nano 7.2 openssl.cnf # Extensions to add to a certificate request basicConstraints = CA:FALSE authorityKeyIdentifier = keyid:always, issuer:always keyUsage = nonRepudiation, digitalSignature, keyEncipherment, dataEncipherment subjectAltName = @alt_names [ alt_names ] DNS.1 = *.g8.sdi.mi.hdm-stuttgart.de","title":"Creating a certificate request"},{"location":"apache/ssl-tsl-support/#signing-the-certificate-request-to-generate-the-certificate","text":"openssl x509 -req \\ -in tls.csr \\ -CA rootCA.pem \\ -CAkey rootCA.key \\ -CAcreateserial \\ -out tls.crt \\ -days 730 \\ -sha256 \\ -extfile openssl.cnf To verify if the config works properly: openssl verify -CAfile rootCA.pem -verify_hostname .g8.sdi.mi.hdm-stuttgart.de tls.crt We get the following output when testing the file: tls.crt:OK","title":"Signing the certificate request to generate the certificate"},{"location":"apache/ssl-tsl-support/#adding-ca-as-trusted-to-your-browser","text":"On our local machine: sudo scp -i ~/.ssh/sdi_nv023 root@sdi08a.mi.hdm-stuttgart.de:/home/cert/rootCA.pem /home Important: Use sudo for executing this command, otherwise you do not have the permission to copy the file to your machine. We can import the CA in Google Chrome with the following steps: Settings Privacy & Security Security Manage Certificates Authorities Import When visiting the website now we can see that the certificate is valid and https works. The following image is shown, when clicking on the certificate:","title":"Adding CA as trusted to your Browser"},{"location":"apache/ssl-tsl-support/#references","text":"www.dgu2000.medium.com/working-with-self-signed-certificates-in-chrome-walkthrough-edition-a238486e6858","title":"References"},{"location":"apache/virtual-hosts/","text":"Virtual Hosts Define DNS aliases For the sake of simplicity, we have created 2 A records on the nssdi.mi.hdm-stuttgart.de server. One for fw061 and one for manual which both point to our server. Now we can access the server publicly via fw061.g8.sdi.mi.hdm-stuttgart.de and manual.g8.sdi.mi.hdm-stuttgart.de. You can find access to the process in our previous chapter here . Creating config files for new subdomains In the main config file etc/apache2/apache2.conf , we are adding the follwing instructions: <Directory /home/Sdidoc/site> AllowOverride None Require all granted Options Indexes FollowSymLinks </Directory> Now we have to create 2 separate virtual hosts for the two subdomains. We create 2 new .conf files under the path /etc/apache2/sites-available . One file fw061.conf and one manual.conf . Within the fw061.conf we define: <VirtualHost *:80> ServerAdmin fw061@hdm-stuttgart.de DocumentRoot /home/Sdidoc/site ServerName g8.sdi.mi.hdm-stuttgart.de ServerAlias fw061.g8.sdi.mi.hdm-stuttgart.de ErrorLog ${APACHE_LOG_DIR}/error.log CustomLog ${APACHE_LOG_DIR}/access.log combined </VirtualHost> Within the manual.conf file we define: <VirtualHost *:80> ServerAdmin fw061@hdm-stuttgart.de DocumentRoot /usr/share/doc/apache2-doc/manual ServerName g8.sdi.mi.hdm-stuttgart.de ServerAlias manual.g8.sdi.mi.hdm-stuttgart.de ErrorLog ${APACHE_LOG_DIR}/error.log CustomLog ${APACHE_LOG_DIR}/access.log combined </VirtualHost> The config files must be activated with this command: a2ensite /etc/apache2/sites-available/fw061.conf a2ensite/etc/apache2/sites-available/manual.conf and reload the Server with systemctl reload apache2 . Checking the domains To check whether the server configurations are working properly you can check the specified domains in your web browser. In our case they should point to the documentation and the manual. fw061.g8.sdi.mi.hdm-stuttgart.de manual.g8.sdi.mi.hdm-stuttgart.de","title":"Virtual Hosts"},{"location":"apache/virtual-hosts/#virtual-hosts","text":"","title":"Virtual Hosts"},{"location":"apache/virtual-hosts/#define-dns-aliases","text":"For the sake of simplicity, we have created 2 A records on the nssdi.mi.hdm-stuttgart.de server. One for fw061 and one for manual which both point to our server. Now we can access the server publicly via fw061.g8.sdi.mi.hdm-stuttgart.de and manual.g8.sdi.mi.hdm-stuttgart.de. You can find access to the process in our previous chapter here .","title":"Define DNS aliases"},{"location":"apache/virtual-hosts/#creating-config-files-for-new-subdomains","text":"In the main config file etc/apache2/apache2.conf , we are adding the follwing instructions: <Directory /home/Sdidoc/site> AllowOverride None Require all granted Options Indexes FollowSymLinks </Directory> Now we have to create 2 separate virtual hosts for the two subdomains. We create 2 new .conf files under the path /etc/apache2/sites-available . One file fw061.conf and one manual.conf . Within the fw061.conf we define: <VirtualHost *:80> ServerAdmin fw061@hdm-stuttgart.de DocumentRoot /home/Sdidoc/site ServerName g8.sdi.mi.hdm-stuttgart.de ServerAlias fw061.g8.sdi.mi.hdm-stuttgart.de ErrorLog ${APACHE_LOG_DIR}/error.log CustomLog ${APACHE_LOG_DIR}/access.log combined </VirtualHost> Within the manual.conf file we define: <VirtualHost *:80> ServerAdmin fw061@hdm-stuttgart.de DocumentRoot /usr/share/doc/apache2-doc/manual ServerName g8.sdi.mi.hdm-stuttgart.de ServerAlias manual.g8.sdi.mi.hdm-stuttgart.de ErrorLog ${APACHE_LOG_DIR}/error.log CustomLog ${APACHE_LOG_DIR}/access.log combined </VirtualHost> The config files must be activated with this command: a2ensite /etc/apache2/sites-available/fw061.conf a2ensite/etc/apache2/sites-available/manual.conf and reload the Server with systemctl reload apache2 .","title":"Creating config files for new subdomains"},{"location":"apache/virtual-hosts/#checking-the-domains","text":"To check whether the server configurations are working properly you can check the specified domains in your web browser. In our case they should point to the documentation and the manual. fw061.g8.sdi.mi.hdm-stuttgart.de manual.g8.sdi.mi.hdm-stuttgart.de","title":"Checking the domains"},{"location":"apache/web-based-user-management/","text":"Providing WEB based user management to your LDAP Server Motivation We want to be able to control LDAP via our web browser and use the LDAP Account Manager for this purpose. Installing LDAP Account Manager: First we install the ldap-account-manager with the following command: apt install ldap-account-manager When the installation was successful we can enter the web platform via this url: http://g8.sdi.mi.hdm-stuttgart.de/lam Configure LDAP Account Manager: First we need to access the lam-configurations and edit the server profiles . The standard password is set to lam . We update the server settings and the security settings within the general settings with our ldap configuration. We set the right organizational under account types to access the user. Now we can log in with the ldap admin credentials and get a list of all users in the organizational unit.","title":"Web Based User Management"},{"location":"apache/web-based-user-management/#providing-web-based-user-management-to-your-ldap-server","text":"","title":"Providing WEB based user management to your LDAP Server"},{"location":"apache/web-based-user-management/#motivation","text":"We want to be able to control LDAP via our web browser and use the LDAP Account Manager for this purpose.","title":"Motivation"},{"location":"apache/web-based-user-management/#installing-ldap-account-manager","text":"First we install the ldap-account-manager with the following command: apt install ldap-account-manager When the installation was successful we can enter the web platform via this url: http://g8.sdi.mi.hdm-stuttgart.de/lam","title":"Installing LDAP Account Manager:"},{"location":"apache/web-based-user-management/#configure-ldap-account-manager","text":"First we need to access the lam-configurations and edit the server profiles . The standard password is set to lam . We update the server settings and the security settings within the general settings with our ldap configuration. We set the right organizational under account types to access the user. Now we can log in with the ldap admin credentials and get a list of all users in the organizational unit.","title":"Configure LDAP Account Manager:"},{"location":"dns/bind/","text":"Installing and configuring Bind What is bind? BIND can function as both an authoritative DNS server for a zone and a DNS resolver simultaneously. It is open source and commonly used for hosting authoritative DNS servers. Setup Update apt and install the bind service: apt update apt install bind9 bind9utils bind9-doc To check whether the installation was successful run the following command: named -v Check whether the system is active and running: systemctl status bind9 Adjust the bind configurations Edit the file to disable recursion. nano /etc/bind/named.conf.options Add the following lines to the named.conf.options file: // hide version number from clients for security reasons. version \"not currently available\"; // disable recursion on authoritative DNS server. recursion no; // enable the query log querylog yes; // disallow zone transfer allow-transfer { none; }; Restart BIND to confirm the set options: systemctl restart bind9 To configure zones edit the following file: nano /etc/bind/named.conf.local Add the following parameters: zone \"g8.sdia.sdi.mi.hdm-stuttgart.de\" { type master; file \"/etc/bind/Zones/db.g8.sdia.sdi.mi.hdm-stuttgart.de\"; allow-query { any; }; }; Edit the following Zone file which is located in the created Zones folder $TTL 86400 ; Time-to-live for the zone (1 day) $ORIGIN g8.sdi.mi.hdm-stuttgart.de. @ IN SOA vm1.g8.sdi.mi.hdm-stuttgart.de. admin.g8.sdi.mi.hdm-stuttgart.de. ( 2023110701 ; Serial number (YYYYMMDD##) 86400 ; Refresh (1 day) 7200 ; Retry (2 hours) 604800 ; Expire (1 week) 86400 ) ; Minimum TTL (1 day) ; Name Servers IN NS vm1 ; Hosts vm1 IN A 141.62.75.108 vm2 IN A 141.62.75.122 www IN CNAME vm1 cloud IN CNAME vm2 To test the configuration, we can dig one of the local machines with the ip of the nameserver. dig @141.62.75.108 vm2.g8.sdi.mi.hdm-stuttgart.de A +short The following output is showing: 141.62.75.122 This is the IP address of our second virtual machine. This displays the record is working. References isc.org/bind/ linuxbabe.com/debian/authoritative-dns-server-debian-10-buster-bind9","title":"Installing and configuring Bind"},{"location":"dns/bind/#installing-and-configuring-bind","text":"","title":"Installing and configuring Bind"},{"location":"dns/bind/#what-is-bind","text":"BIND can function as both an authoritative DNS server for a zone and a DNS resolver simultaneously. It is open source and commonly used for hosting authoritative DNS servers.","title":"What is bind?"},{"location":"dns/bind/#setup","text":"Update apt and install the bind service: apt update apt install bind9 bind9utils bind9-doc To check whether the installation was successful run the following command: named -v Check whether the system is active and running: systemctl status bind9","title":"Setup"},{"location":"dns/bind/#adjust-the-bind-configurations","text":"Edit the file to disable recursion. nano /etc/bind/named.conf.options Add the following lines to the named.conf.options file: // hide version number from clients for security reasons. version \"not currently available\"; // disable recursion on authoritative DNS server. recursion no; // enable the query log querylog yes; // disallow zone transfer allow-transfer { none; }; Restart BIND to confirm the set options: systemctl restart bind9 To configure zones edit the following file: nano /etc/bind/named.conf.local Add the following parameters: zone \"g8.sdia.sdi.mi.hdm-stuttgart.de\" { type master; file \"/etc/bind/Zones/db.g8.sdia.sdi.mi.hdm-stuttgart.de\"; allow-query { any; }; }; Edit the following Zone file which is located in the created Zones folder $TTL 86400 ; Time-to-live for the zone (1 day) $ORIGIN g8.sdi.mi.hdm-stuttgart.de. @ IN SOA vm1.g8.sdi.mi.hdm-stuttgart.de. admin.g8.sdi.mi.hdm-stuttgart.de. ( 2023110701 ; Serial number (YYYYMMDD##) 86400 ; Refresh (1 day) 7200 ; Retry (2 hours) 604800 ; Expire (1 week) 86400 ) ; Minimum TTL (1 day) ; Name Servers IN NS vm1 ; Hosts vm1 IN A 141.62.75.108 vm2 IN A 141.62.75.122 www IN CNAME vm1 cloud IN CNAME vm2 To test the configuration, we can dig one of the local machines with the ip of the nameserver. dig @141.62.75.108 vm2.g8.sdi.mi.hdm-stuttgart.de A +short The following output is showing: 141.62.75.122 This is the IP address of our second virtual machine. This displays the record is working.","title":"Adjust the bind configurations"},{"location":"dns/bind/#references","text":"isc.org/bind/ linuxbabe.com/debian/authoritative-dns-server-debian-10-buster-bind9","title":"References"},{"location":"dns/dig/","text":"Querying DNS data What is dig? dig is a program/command that is mainly used to analyse and check DNS servers and query information from it. It has the following syntax: dig [@Server] [Domain] [Type] [-x IP-Address] The server is not necessary when you only want general DNS information for an address (see examples above). Example CNAME Record root@sdi08b:~# dig www.natan-cafeandbar.com CNAME +short natan-cafeandbar.com. A Record root@sdi08b:~# dig www.natan-cafeandbar.com A +short natan-cafeandbar.com. 81.169.145.70 MX Record root@sdi08b:~# dig www.natan-cafeandbar.com MX +short natan-cafeandbar.com. 100 alt3.aspmx.l.google.com. 200 alt2.aspmx.l.google.com. 20 alt1.aspmx.l.google.com. 10 aspmx.l.google.com. NS Record root@sdi08b:~# dig www.natan-cafeandbar.com NS +short natan-cafeandbar.com. shades20.rzone.de. docks02.rzone.de. Reverse Lookup ( PTR ) root@sdi08b:~# dig -x 81.169.145.70 +short w06.rzone.de. References wiki.ubuntuusers.de/dig/","title":"Querying DNS data"},{"location":"dns/dig/#querying-dns-data","text":"","title":"Querying DNS data"},{"location":"dns/dig/#what-is-dig","text":"dig is a program/command that is mainly used to analyse and check DNS servers and query information from it. It has the following syntax: dig [@Server] [Domain] [Type] [-x IP-Address] The server is not necessary when you only want general DNS information for an address (see examples above).","title":"What is dig?"},{"location":"dns/dig/#example","text":"CNAME Record root@sdi08b:~# dig www.natan-cafeandbar.com CNAME +short natan-cafeandbar.com. A Record root@sdi08b:~# dig www.natan-cafeandbar.com A +short natan-cafeandbar.com. 81.169.145.70 MX Record root@sdi08b:~# dig www.natan-cafeandbar.com MX +short natan-cafeandbar.com. 100 alt3.aspmx.l.google.com. 200 alt2.aspmx.l.google.com. 20 alt1.aspmx.l.google.com. 10 aspmx.l.google.com. NS Record root@sdi08b:~# dig www.natan-cafeandbar.com NS +short natan-cafeandbar.com. shades20.rzone.de. docks02.rzone.de. Reverse Lookup ( PTR ) root@sdi08b:~# dig -x 81.169.145.70 +short w06.rzone.de.","title":"Example"},{"location":"dns/dig/#references","text":"wiki.ubuntuusers.de/dig/","title":"References"},{"location":"dns/forwarders/","text":"Forwarders What are DNS forwarders? If you do not want to send DNS queries to the root server, you can configure Bind in forwarding mode. It then forwards queries to other DNS servers (e.g. from the ISP ). A new forwarders block is created in the options block for this purpose. For Example If we want to dig a DNS query from outside of our server the following error message is shown: dig @141.62.75.108 w3.org A +short ;; communications error to 141.62.75.108#53: timed out When the DNS server is not configured with a forwarder, it might be trying to perform a recursive query itself, which can lead to timeouts if it's unable to resolve the query within a reasonable time frame. This is why we need to configure a forwarder. How to configure a forwarder? In order to configure our DNS forwarder we can add to the following parameters to the named.conf.options (/etc/bind/named.conf.options) file. options { ... forwarders { 8.8.8.8; }; forward only; ... }; ... forwarders { 8.8.8.8; }; ... A list of IP addresses that the system is forwarding to. 8.8.8.8 is the Google server. ... forwarders { 8.8.8.8; }; ... Forward only means that all external queries by default are forwarded. service bind9 restart; Make sure to restart or reload your DNS server after making changes to the configuration to apply the new settings. dig @141.62.75.108 w3.org A +short 104.18.23.19 When digging the same configuration again we can see the forwarded resolution: References digitalocean.com/community/tutorials/how-to-configure-bind-as-a-caching-or-forwarding-dns-server-on-ubuntu-14-04#configure-as-a-forwarding-dns-server powerdmarc.com/what-is-dns-forwarding/ wiki.ubuntuusers.de/DNS-Server_Bind/","title":"Forwarders"},{"location":"dns/forwarders/#forwarders","text":"","title":"Forwarders"},{"location":"dns/forwarders/#what-are-dns-forwarders","text":"If you do not want to send DNS queries to the root server, you can configure Bind in forwarding mode. It then forwards queries to other DNS servers (e.g. from the ISP ). A new forwarders block is created in the options block for this purpose.","title":"What are DNS forwarders?"},{"location":"dns/forwarders/#for-example","text":"If we want to dig a DNS query from outside of our server the following error message is shown: dig @141.62.75.108 w3.org A +short ;; communications error to 141.62.75.108#53: timed out When the DNS server is not configured with a forwarder, it might be trying to perform a recursive query itself, which can lead to timeouts if it's unable to resolve the query within a reasonable time frame. This is why we need to configure a forwarder.","title":"For Example"},{"location":"dns/forwarders/#how-to-configure-a-forwarder","text":"In order to configure our DNS forwarder we can add to the following parameters to the named.conf.options (/etc/bind/named.conf.options) file. options { ... forwarders { 8.8.8.8; }; forward only; ... }; ... forwarders { 8.8.8.8; }; ... A list of IP addresses that the system is forwarding to. 8.8.8.8 is the Google server. ... forwarders { 8.8.8.8; }; ... Forward only means that all external queries by default are forwarded. service bind9 restart; Make sure to restart or reload your DNS server after making changes to the configuration to apply the new settings. dig @141.62.75.108 w3.org A +short 104.18.23.19 When digging the same configuration again we can see the forwarded resolution:","title":"How to configure a forwarder?"},{"location":"dns/forwarders/#references","text":"digitalocean.com/community/tutorials/how-to-configure-bind-as-a-caching-or-forwarding-dns-server-on-ubuntu-14-04#configure-as-a-forwarding-dns-server powerdmarc.com/what-is-dns-forwarding/ wiki.ubuntuusers.de/DNS-Server_Bind/","title":"References"},{"location":"dns/general/","text":"DNS What is DNS? DNS , or the Domain Name System, is a hierarchical and distributed naming system that is fundamental to the functioning of the Internet. It serves as a translator between human-readable domain names and numerical IP addresses. It is indispensable for accessing services on the internet. Only with the DNS can an internet user access a website by entering a URL or send an email with a domain ending (e.g. @hdm-stuttgart.de). How does DNS work? DNS works through a hierarchical, distributed order. A user enters an URL (e.g., www.beispieldomain.de) into a web browser. (When cache is not empty) The user's device checks its local DNS resolver (typically provided by the Internet Service Provider or configured manually). This resolver may have a cache of recently resolved domain names. When there is no cache available the root server is the first step in translating the given host names into IP addresses. It will point to the top-level domain of the given domain name. Top-level domain server (like denic) is responsible for translating the domain which the user bought (e.g. beispieldomain.de) to the given IP address. The top-level domain server provides information about the authoritative DNS server. The authoritative DNS server for the second-level domain (e.g., \"beispieldomain.de\") holds information about the requested host name (e.g., \"www\"). It is this server that can provide the IP address associated with the specific host name. Source denic.de Difference between DNS server and DNS resolver A DNS resolver is a service that provides an IP address for a domain name on request. It is the counterpart to NS , which contain the actual DNS information. Good to know DENIC operates a worldwide network of name servers to provide the name service for the German top-level domain .de and the German ENUM domain .9.4.e164.arpa. This currently comprises 19 locations in 17 cities on five continents. Types of DNS A Record: Maps a domain to an IPv4 address. AAAA Record: Maps a domain to an IPv6 address. CNAME Record: Alias of one domain to another. MX Record: Specifies mail servers responsible for receiving emails for the domain. NS Record: Indicates authoritative DNS servers for the domain. PTR Record: Used for reverse DNS lookups. SOA Record: Contains information about the domain and the zone. References www.denic.de/wissen/domain-name-system-dns www.cloudflare.com/en-gb/learning/dns/what-is-dns/","title":"General"},{"location":"dns/general/#dns","text":"","title":"DNS"},{"location":"dns/general/#what-is-dns","text":"DNS , or the Domain Name System, is a hierarchical and distributed naming system that is fundamental to the functioning of the Internet. It serves as a translator between human-readable domain names and numerical IP addresses. It is indispensable for accessing services on the internet. Only with the DNS can an internet user access a website by entering a URL or send an email with a domain ending (e.g. @hdm-stuttgart.de).","title":"What is DNS?"},{"location":"dns/general/#how-does-dns-work","text":"DNS works through a hierarchical, distributed order. A user enters an URL (e.g., www.beispieldomain.de) into a web browser. (When cache is not empty) The user's device checks its local DNS resolver (typically provided by the Internet Service Provider or configured manually). This resolver may have a cache of recently resolved domain names. When there is no cache available the root server is the first step in translating the given host names into IP addresses. It will point to the top-level domain of the given domain name. Top-level domain server (like denic) is responsible for translating the domain which the user bought (e.g. beispieldomain.de) to the given IP address. The top-level domain server provides information about the authoritative DNS server. The authoritative DNS server for the second-level domain (e.g., \"beispieldomain.de\") holds information about the requested host name (e.g., \"www\"). It is this server that can provide the IP address associated with the specific host name. Source denic.de Difference between DNS server and DNS resolver A DNS resolver is a service that provides an IP address for a domain name on request. It is the counterpart to NS , which contain the actual DNS information. Good to know DENIC operates a worldwide network of name servers to provide the name service for the German top-level domain .de and the German ENUM domain .9.4.e164.arpa. This currently comprises 19 locations in 17 cities on five continents.","title":"How does DNS work?"},{"location":"dns/general/#types-of-dns","text":"A Record: Maps a domain to an IPv4 address. AAAA Record: Maps a domain to an IPv6 address. CNAME Record: Alias of one domain to another. MX Record: Specifies mail servers responsible for receiving emails for the domain. NS Record: Indicates authoritative DNS servers for the domain. PTR Record: Used for reverse DNS lookups. SOA Record: Contains information about the domain and the zone.","title":"Types of DNS"},{"location":"dns/general/#references","text":"www.denic.de/wissen/domain-name-system-dns www.cloudflare.com/en-gb/learning/dns/what-is-dns/","title":"References"},{"location":"dns/mail-exchange/","text":"Mail Exchange What is Mail Exchange (MX Record)? A Mail Exchange ( MX ) record is a type of DNS record that specifies the mail servers responsible for receiving email on behalf of a domain. The MX record specifies how email messages should be forwarded in accordance with the Simple Mail Transfer Protocol ( SMTP , the standard protocol for all email). Like CNAME records, an MX record must always point to another domain. How to setup a MX Record In order to configure our MX record that it points towards mx1.hdm-stuttgart.de, we can add the following parameters to the db.g8.sdi.mi.hdm-stuttgart.de (/etc/bind/Zones/db.g8.sdi.mi.hdm-stuttgart.de) file. nano /etc/bind/Zones/db.g8.sdi.mi.hdm-stuttgart.de and add the following parameters: ... ; MX Record g8.sdi.mi.hdm-stuttgart.de. IN MX 10 mx1.hdm-stuttgart.de. The \"priority\" numbers in front of the domains for these MX records indicates the preference,with the lower \"priority\" value being preferred. The server always tries mailhost1 first, as 10 is lower than 20. If sending a message fails, the server chooses mailhost2 by default. Test whether the set record points towards the mx1.hdm-stuttgart.de mail server with: dig @141.62.75.108 g8.sdi.mi.hdm-stuttgart.de MX +short Answer 10 mx1.hdm-stuttgart.de. References www.cloudflare.com/de-de/learning/dns/dns-records/dns-mx-record/","title":"Mail Exchange"},{"location":"dns/mail-exchange/#mail-exchange","text":"","title":"Mail Exchange"},{"location":"dns/mail-exchange/#what-is-mail-exchange-mx-record","text":"A Mail Exchange ( MX ) record is a type of DNS record that specifies the mail servers responsible for receiving email on behalf of a domain. The MX record specifies how email messages should be forwarded in accordance with the Simple Mail Transfer Protocol ( SMTP , the standard protocol for all email). Like CNAME records, an MX record must always point to another domain.","title":"What is Mail Exchange (MX Record)?"},{"location":"dns/mail-exchange/#how-to-setup-a-mx-record","text":"In order to configure our MX record that it points towards mx1.hdm-stuttgart.de, we can add the following parameters to the db.g8.sdi.mi.hdm-stuttgart.de (/etc/bind/Zones/db.g8.sdi.mi.hdm-stuttgart.de) file. nano /etc/bind/Zones/db.g8.sdi.mi.hdm-stuttgart.de and add the following parameters: ... ; MX Record g8.sdi.mi.hdm-stuttgart.de. IN MX 10 mx1.hdm-stuttgart.de. The \"priority\" numbers in front of the domains for these MX records indicates the preference,with the lower \"priority\" value being preferred. The server always tries mailhost1 first, as 10 is lower than 20. If sending a message fails, the server chooses mailhost2 by default. Test whether the set record points towards the mx1.hdm-stuttgart.de mail server with: dig @141.62.75.108 g8.sdi.mi.hdm-stuttgart.de MX +short Answer 10 mx1.hdm-stuttgart.de.","title":"How to setup a MX Record"},{"location":"dns/mail-exchange/#references","text":"www.cloudflare.com/de-de/learning/dns/dns-records/dns-mx-record/","title":"References"},{"location":"dns/reverse/","text":"Reverse lookups What is a reverse lookup? A reverse DNS lookup is a DNS query for the domain name that is assigned to a specific IP address. This is the opposite of the more commonly used forward DNS lookup, where an IP address is queried by the DNS system. How to perform a reverse lookup? In order to perform a reverse lookup we have to configure the named.conf.local (/etc/bind/named.conf.local) file and add another zone to it with the following parameters: zone \"75.62.141.in-addr.arpa\" { type master; file \"/etc/bind/Zones/rl.g8.sdi.mi.hdm-stuttgart.de\"; allow-query { any; }; }; zone \"75.62.141.in-addr.arpa\" { ... The zone specified here is \"75.62.141.in-addr. arpa \". IP addresses with inverted segments and the suffix \".in-addr. arpa \" are stored in PTR records. It indicates that this reverse lookup zone is responsible for translating IP addresses in the range 141.62.75.x. ... type master; ... The master option tells the server that it is the server responsible for the domain, i.e. the primary server, and the file only refers to the zone files. ... file \"/etc/bind/Zones/rl.g8.sdi.mi.hdm-stuttgart.de\"; ... This line indicates the path to the file where the zone data for \"75.62.141.in-addr. arpa \" is stored. ... allow-query { any; }; }; This line specifies who is allowed to query the DNS server for information in this zone. In this case, \"any\" means that any client is allowed to query this DNS server for information in the specified reverse lookup zone. References www.cloudflare.com/de-de/learning/dns/glossary/reverse-dns/ developer.mozilla.org/en-US/docs/Glossary/ARPA?retiredLocale=de wiki.ubuntuusers.de/DNS-Server_Bind/","title":"Reverse lookup"},{"location":"dns/reverse/#reverse-lookups","text":"","title":"Reverse lookups"},{"location":"dns/reverse/#what-is-a-reverse-lookup","text":"A reverse DNS lookup is a DNS query for the domain name that is assigned to a specific IP address. This is the opposite of the more commonly used forward DNS lookup, where an IP address is queried by the DNS system.","title":"What is a reverse lookup?"},{"location":"dns/reverse/#how-to-perform-a-reverse-lookup","text":"In order to perform a reverse lookup we have to configure the named.conf.local (/etc/bind/named.conf.local) file and add another zone to it with the following parameters: zone \"75.62.141.in-addr.arpa\" { type master; file \"/etc/bind/Zones/rl.g8.sdi.mi.hdm-stuttgart.de\"; allow-query { any; }; }; zone \"75.62.141.in-addr.arpa\" { ... The zone specified here is \"75.62.141.in-addr. arpa \". IP addresses with inverted segments and the suffix \".in-addr. arpa \" are stored in PTR records. It indicates that this reverse lookup zone is responsible for translating IP addresses in the range 141.62.75.x. ... type master; ... The master option tells the server that it is the server responsible for the domain, i.e. the primary server, and the file only refers to the zone files. ... file \"/etc/bind/Zones/rl.g8.sdi.mi.hdm-stuttgart.de\"; ... This line indicates the path to the file where the zone data for \"75.62.141.in-addr. arpa \" is stored. ... allow-query { any; }; }; This line specifies who is allowed to query the DNS server for information in this zone. In this case, \"any\" means that any client is allowed to query this DNS server for information in the specified reverse lookup zone.","title":"How to perform a reverse lookup?"},{"location":"dns/reverse/#references","text":"www.cloudflare.com/de-de/learning/dns/glossary/reverse-dns/ developer.mozilla.org/en-US/docs/Glossary/ARPA?retiredLocale=de wiki.ubuntuusers.de/DNS-Server_Bind/","title":"References"},{"location":"dns/transfer-dns-configurations/","text":"Transfer DNS configurations Querying DNS zone In order to transfer our current DNS configuration to the MI nameserver of the HdM nssdi.mi.hdm-stuttgart.de, we have to export the HMAC secret key corresponding to our subdomain. export HMAC=hmac-sha256:mykey.g8:\"your-key\" dig @nssdi.mi.hdm-stuttgart.de -y $HMAC -t AXFR g8.sdi.mi.hdm-stuttgart.de ... Your answer should look something like: ; <<>> DiG 9.18.19-1~deb12u1-Debian <<>> @nssdi.mi.hdm-stuttgart.de -y hmac-sha256 -t AXFR g8.sdi.mi.hdm-stuttgart.de ; (1 server found) ;; global options: +cmd g8.sdi.mi.hdm-stuttgart.de. 86400 IN SOA nssdi.mi.hdm-stuttgart.de. goik.hdm-stuttgart.de. 2022110842 14400 7200 1209600 43200 g8.sdi.mi.hdm-stuttgart.de. 86400 IN NS nssdi.mi.hdm-stuttgart.de. g8.sdi.mi.hdm-stuttgart.de. 86400 IN A 141.62.75.229 g8.sdi.mi.hdm-stuttgart.de. 900 IN TXT \"Hi nerds, how are you going? :-)\" goik45678.g8.sdi.mi.hdm-stuttgart.de. 86400 IN A 141.62.75.108 lg088.g8.sdi.mi.hdm-stuttgart.de. 86400 IN CNAME sdi1.g8.sdi.mi.hdm-stuttgart.de. manual.g8.sdi.mi.hdm-stuttgart.de. 86400 IN CNAME sdi1.g8.sdi.mi.hdm-stuttgart.de. sdi1.g8.sdi.mi.hdm-stuttgart.de. 86400 IN A 141.62.75.108 sdi2.g8.sdi.mi.hdm-stuttgart.de. 86400 IN A 141.62.75.122 www.g8.sdi.mi.hdm-stuttgart.de. 86400 IN A 141.62.75.108 g8.sdi.mi.hdm-stuttgart.de. 86400 IN SOA nssdi.mi.hdm-stuttgart.de. goik.hdm-stuttgart.de. 2022110842 14400 7200 1209600 43200 mykey.g8. 0 ANY TSIG hmac-sha256. 1702656342 300 32 1Tcfu3PiJPScTyaGQ1QMf6xnWCTnaP6fHp+kvDdywEI= 43084 NOERROR 0 ;; Query time: 0 msec ;; SERVER: 141.62.75.229#53(nssdi.mi.hdm-stuttgart.de) (TCP) ;; WHEN: Fri Dec 15 17:05:42 CET 2023 ;; XFR size: 11 records (messages 1, bytes 486) Creating an A record To associate the domain name vm1.g8.sdi.mi.hdm-stuttgart.de with our server's IP address, we need to set an A record on the dedicated name server. For example, the A record might look like this: export HMAC=hmac-sha256:mykey.g8:Kk7bhUqdJNARTr4xpeNVxETuFcxRXKF7vqpZQ8yIE8k= nsupdate -y $HMAC \u2060server nssdi.mi.hdm-stuttgart.de \u2060update add vm1.g8.sdi.mi.hdm-stuttgart.de 3600 A 141.62.75.108 \u2060send \u2060quit To test whether it worked you can use the following command: dig +noall +answer @nssdi.mi.hdm-stuttgart.de vm1.g8.sdi.mi.hdm-stuttgart.de The result should look something like: vm1.g8.sdi.mi.hdm-stuttgart.de. 3600 IN A 141.62.75.108 now we can dig our name server globally if the TTL is set correctly dig vm1.g8.sdi.mi.hdm-stuttgart.de","title":"Transfer DNS configurations"},{"location":"dns/transfer-dns-configurations/#transfer-dns-configurations","text":"","title":"Transfer DNS configurations"},{"location":"dns/transfer-dns-configurations/#querying-dns-zone","text":"In order to transfer our current DNS configuration to the MI nameserver of the HdM nssdi.mi.hdm-stuttgart.de, we have to export the HMAC secret key corresponding to our subdomain. export HMAC=hmac-sha256:mykey.g8:\"your-key\" dig @nssdi.mi.hdm-stuttgart.de -y $HMAC -t AXFR g8.sdi.mi.hdm-stuttgart.de ... Your answer should look something like: ; <<>> DiG 9.18.19-1~deb12u1-Debian <<>> @nssdi.mi.hdm-stuttgart.de -y hmac-sha256 -t AXFR g8.sdi.mi.hdm-stuttgart.de ; (1 server found) ;; global options: +cmd g8.sdi.mi.hdm-stuttgart.de. 86400 IN SOA nssdi.mi.hdm-stuttgart.de. goik.hdm-stuttgart.de. 2022110842 14400 7200 1209600 43200 g8.sdi.mi.hdm-stuttgart.de. 86400 IN NS nssdi.mi.hdm-stuttgart.de. g8.sdi.mi.hdm-stuttgart.de. 86400 IN A 141.62.75.229 g8.sdi.mi.hdm-stuttgart.de. 900 IN TXT \"Hi nerds, how are you going? :-)\" goik45678.g8.sdi.mi.hdm-stuttgart.de. 86400 IN A 141.62.75.108 lg088.g8.sdi.mi.hdm-stuttgart.de. 86400 IN CNAME sdi1.g8.sdi.mi.hdm-stuttgart.de. manual.g8.sdi.mi.hdm-stuttgart.de. 86400 IN CNAME sdi1.g8.sdi.mi.hdm-stuttgart.de. sdi1.g8.sdi.mi.hdm-stuttgart.de. 86400 IN A 141.62.75.108 sdi2.g8.sdi.mi.hdm-stuttgart.de. 86400 IN A 141.62.75.122 www.g8.sdi.mi.hdm-stuttgart.de. 86400 IN A 141.62.75.108 g8.sdi.mi.hdm-stuttgart.de. 86400 IN SOA nssdi.mi.hdm-stuttgart.de. goik.hdm-stuttgart.de. 2022110842 14400 7200 1209600 43200 mykey.g8. 0 ANY TSIG hmac-sha256. 1702656342 300 32 1Tcfu3PiJPScTyaGQ1QMf6xnWCTnaP6fHp+kvDdywEI= 43084 NOERROR 0 ;; Query time: 0 msec ;; SERVER: 141.62.75.229#53(nssdi.mi.hdm-stuttgart.de) (TCP) ;; WHEN: Fri Dec 15 17:05:42 CET 2023 ;; XFR size: 11 records (messages 1, bytes 486)","title":"Querying DNS zone"},{"location":"dns/transfer-dns-configurations/#creating-an-a-record","text":"To associate the domain name vm1.g8.sdi.mi.hdm-stuttgart.de with our server's IP address, we need to set an A record on the dedicated name server. For example, the A record might look like this: export HMAC=hmac-sha256:mykey.g8:Kk7bhUqdJNARTr4xpeNVxETuFcxRXKF7vqpZQ8yIE8k= nsupdate -y $HMAC \u2060server nssdi.mi.hdm-stuttgart.de \u2060update add vm1.g8.sdi.mi.hdm-stuttgart.de 3600 A 141.62.75.108 \u2060send \u2060quit To test whether it worked you can use the following command: dig +noall +answer @nssdi.mi.hdm-stuttgart.de vm1.g8.sdi.mi.hdm-stuttgart.de The result should look something like: vm1.g8.sdi.mi.hdm-stuttgart.de. 3600 IN A 141.62.75.108 now we can dig our name server globally if the TTL is set correctly dig vm1.g8.sdi.mi.hdm-stuttgart.de","title":"Creating an A record"},{"location":"file-cloud/general/","text":"General What is Nextcloud? Nextcloud is a software designed for utilizing file hosting services. It stands as a self-hosted, open-source solution tailored for file sharing and collaborative endeavors, empowering users to securely store, retrieve, and distribute their data from any location or device. Other features are Collaboration, Integration with with third party tools and Mobility. References www.en.wikipedia.org/wiki/Nextcloud www.sectorlink.com/article/what-is-nextcloud","title":"General"},{"location":"file-cloud/general/#general","text":"","title":"General"},{"location":"file-cloud/general/#what-is-nextcloud","text":"Nextcloud is a software designed for utilizing file hosting services. It stands as a self-hosted, open-source solution tailored for file sharing and collaborative endeavors, empowering users to securely store, retrieve, and distribute their data from any location or device. Other features are Collaboration, Integration with with third party tools and Mobility.","title":"What is Nextcloud?"},{"location":"file-cloud/general/#references","text":"www.en.wikipedia.org/wiki/Nextcloud www.sectorlink.com/article/what-is-nextcloud","title":"References"},{"location":"file-cloud/set-up/","text":"Set Up Installing Nextcloud on Apache We use this guide as a reference to carry out all the necessary installations and preparations. https://help.nextcloud.com/t/complete-nc-installation-on-debian-9-stretch-and-manual-update/21881 First we need to install all the packages for apache and php. We exclucde the MariaDB package, because we are already using MySQL from this chapter . apt install php-gd php-json php-mysql php-curl apt install php-intl php-mcrypt php-imagick apt install php-zip php-xmlwriter php-xmlreader php-xml php-mbstring php-simplexml Now we need to download the latest nextcloud version. wget https://download.nextcloud.com/server/releases/latest.zip unzip latest.zip mv nextcloud/ /var/www To check if the installation was succesful, we can go to the nexcloud folder. We are getting this output. root@sdi08a:~# cd /var/www/nextcloud/ root@sdi08a:/var/www/nextcloud# ls 3rdparty composer.lock core index.php ocs-provider remote.php themes apps config cron.php lib package.json resources updater AUTHORS console.php dist occ package-lock.json robots.txt version.php composer.json COPYING index.html ocs public.php status.php In the next step, we create an apache configuration file for nextcloud. We can update the existing fw061.conf file (which we specified here ) and create a new alias for the path /nextcloud, so that Nextcloud can be reached via http://fw061.g8.sdi.mi.hdm-stuttgart.de/nextcloud . We add this to the fw061.conf file. Alias /nextcloud /var/www/nextcloud <Directory /var/www/nextcloud> Options Indexes FollowSymLinks AllowOverride None Require all granted </Directory> Then enable the following apache2 modules, setup folder permissions and restart apache2 and mysql . a2enmod rewrite a2enmod headers a2enmod env a2enmod dir a2enmod mime chown -R www-data /var/www/nextcloud/ systemctl restart apache2 systemctl restart mysql Next we create an empty database for nextcloud and communicate with the MariaDB monitor. This is the output we get. root@sdi08a:~# mysql -u root -p Enter password: Welcome to the MariaDB monitor. Commands end with ; or \\g. Your MariaDB connection id is 33 Server version: 10.11.6-MariaDB-0+deb12u1 Debian 12 Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others. Type 'help;' or '\\h' for help. Type '\\c' to clear the current input statement. MariaDB [(none)]> CREATE DATABASE nextcloud; Query OK, 1 row affected (0,001 sec) MariaDB [(none)]> GRANT ALL ON nextcloud.* to 'nextcloud'@'localhost' IDENTIFIED BY 'sdi'; Query OK, 0 rows affected (0,002 sec) MariaDB [(none)]> FLUSH PRIVILEGES; Query OK, 0 rows affected (0,001 sec) MariaDB [(none)]> exit Bye And then install nextcloud and connect it to the database. Ensure that you are in the correct folder. ( /var/www/nextcloud ) sudo -u www-data php occ maintenance:install --database \"mysql\" --database-name \"nextcloud\" --database-user \"nextcloud\" --database-pass \"sdi\" --admin-user \"ncadmin\" --admin-pass \"sdi\" This should come as an output when it is installed correctly. Nextcloud was successfully installed The last step is to add the fw061.g8.sdi.mi.hdm-stuttgart.de to the trusted domain section. We do this by updating the /var/www/nextcloud/config/config.php file with our domain. The first section should now loo like this. array ( 0 => 'localhost', 1 => 'fw061.g8.sdi.mi.hdm-stuttgart.de', ), We restart Apache one more time with systemctl restart apache2 and are now able to reach the Log-In Screen. We log in with the admin credentials and can now see the Nextcloud Hub. And the Nexcloud Dashboard. Access with LDAP HdM credentials We use this guide https://docs.nextcloud.com/server/13/admin_manual/configuration_user/user_auth_ldap.html to configure LDAP access. First we need to login as admin again. Then we need to enable the LDAP user and group backend on the Nextcloud app page. For this, click on the Icon on the right top corner and navigate to Apps. Now search for LDAP and you see the field LDAP user and group backend . Activate it. Now click on Personal Settings and navigate to Administration\\LDAP/AD integration . Add the following parameters for the HdM integration on the first screen. The port and the base DN are automatically detected. You should see the green light with the Configuration OK at the bottom. The paramters for the next screen should also be automatically detected. You can verify the settings and count the users on the bottom. When you log in with the LDAP credentials it should work over the LDAP\\AD username. We test this with the HdM username at the bottom. Now the Setup is complete and you can login over http://fw061.g8.sdi.mi.hdm-stuttgart.de/nextcloud with the HdM credentials.","title":"Set Up"},{"location":"file-cloud/set-up/#set-up","text":"","title":"Set Up"},{"location":"file-cloud/set-up/#installing-nextcloud-on-apache","text":"We use this guide as a reference to carry out all the necessary installations and preparations. https://help.nextcloud.com/t/complete-nc-installation-on-debian-9-stretch-and-manual-update/21881 First we need to install all the packages for apache and php. We exclucde the MariaDB package, because we are already using MySQL from this chapter . apt install php-gd php-json php-mysql php-curl apt install php-intl php-mcrypt php-imagick apt install php-zip php-xmlwriter php-xmlreader php-xml php-mbstring php-simplexml Now we need to download the latest nextcloud version. wget https://download.nextcloud.com/server/releases/latest.zip unzip latest.zip mv nextcloud/ /var/www To check if the installation was succesful, we can go to the nexcloud folder. We are getting this output. root@sdi08a:~# cd /var/www/nextcloud/ root@sdi08a:/var/www/nextcloud# ls 3rdparty composer.lock core index.php ocs-provider remote.php themes apps config cron.php lib package.json resources updater AUTHORS console.php dist occ package-lock.json robots.txt version.php composer.json COPYING index.html ocs public.php status.php In the next step, we create an apache configuration file for nextcloud. We can update the existing fw061.conf file (which we specified here ) and create a new alias for the path /nextcloud, so that Nextcloud can be reached via http://fw061.g8.sdi.mi.hdm-stuttgart.de/nextcloud . We add this to the fw061.conf file. Alias /nextcloud /var/www/nextcloud <Directory /var/www/nextcloud> Options Indexes FollowSymLinks AllowOverride None Require all granted </Directory> Then enable the following apache2 modules, setup folder permissions and restart apache2 and mysql . a2enmod rewrite a2enmod headers a2enmod env a2enmod dir a2enmod mime chown -R www-data /var/www/nextcloud/ systemctl restart apache2 systemctl restart mysql Next we create an empty database for nextcloud and communicate with the MariaDB monitor. This is the output we get. root@sdi08a:~# mysql -u root -p Enter password: Welcome to the MariaDB monitor. Commands end with ; or \\g. Your MariaDB connection id is 33 Server version: 10.11.6-MariaDB-0+deb12u1 Debian 12 Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others. Type 'help;' or '\\h' for help. Type '\\c' to clear the current input statement. MariaDB [(none)]> CREATE DATABASE nextcloud; Query OK, 1 row affected (0,001 sec) MariaDB [(none)]> GRANT ALL ON nextcloud.* to 'nextcloud'@'localhost' IDENTIFIED BY 'sdi'; Query OK, 0 rows affected (0,002 sec) MariaDB [(none)]> FLUSH PRIVILEGES; Query OK, 0 rows affected (0,001 sec) MariaDB [(none)]> exit Bye And then install nextcloud and connect it to the database. Ensure that you are in the correct folder. ( /var/www/nextcloud ) sudo -u www-data php occ maintenance:install --database \"mysql\" --database-name \"nextcloud\" --database-user \"nextcloud\" --database-pass \"sdi\" --admin-user \"ncadmin\" --admin-pass \"sdi\" This should come as an output when it is installed correctly. Nextcloud was successfully installed The last step is to add the fw061.g8.sdi.mi.hdm-stuttgart.de to the trusted domain section. We do this by updating the /var/www/nextcloud/config/config.php file with our domain. The first section should now loo like this. array ( 0 => 'localhost', 1 => 'fw061.g8.sdi.mi.hdm-stuttgart.de', ), We restart Apache one more time with systemctl restart apache2 and are now able to reach the Log-In Screen. We log in with the admin credentials and can now see the Nextcloud Hub. And the Nexcloud Dashboard.","title":"Installing Nextcloud on Apache"},{"location":"file-cloud/set-up/#access-with-ldap-hdm-credentials","text":"We use this guide https://docs.nextcloud.com/server/13/admin_manual/configuration_user/user_auth_ldap.html to configure LDAP access. First we need to login as admin again. Then we need to enable the LDAP user and group backend on the Nextcloud app page. For this, click on the Icon on the right top corner and navigate to Apps. Now search for LDAP and you see the field LDAP user and group backend . Activate it. Now click on Personal Settings and navigate to Administration\\LDAP/AD integration . Add the following parameters for the HdM integration on the first screen. The port and the base DN are automatically detected. You should see the green light with the Configuration OK at the bottom. The paramters for the next screen should also be automatically detected. You can verify the settings and count the users on the bottom. When you log in with the LDAP credentials it should work over the LDAP\\AD username. We test this with the HdM username at the bottom. Now the Setup is complete and you can login over http://fw061.g8.sdi.mi.hdm-stuttgart.de/nextcloud with the HdM credentials.","title":"Access with LDAP HdM credentials"},{"location":"icinga/functional-checks/","text":"Functional Checks Setup Install the Nagios plugins with the following commands: sudo apt-get update sudo apt-get install nagios-plugins Configure http(s) for your web server: sudo nano /etc/nagios-plugins/config/http.cfg Add this to the configuration: define command { command_name check_http command_line $USER1$/check_http -H $HOSTADDRESS$ -I $HOSTADDRESS$ -t 30 } Ping HTTP(s) You can use the plugin directly to ping the website: /usr/lib/nagios/plugins/check_http -H fw061.g8.sdi.mi.hdm-stuttgart.de -t 30 When everything works you should get the following output: HTTP OK: HTTP/1.1 200 OK - 11999 bytes in 0,001 second response time |time=0,001000s;;;0,000000;30,000000 size=11999B;;;0; When shutting down apache with ... systemctl stop apache2 ... and trying the ping again, we get the following: HTTP CRITICAL - Konnte TCP socket nicht \u00f6ffnen Ping LDAP We can use this command to ping our LDAP server: /usr/lib/nagios/plugins/check_ldap -H ldap://vm1.g8.sdi.mi.hdm-stuttgart.de -b \"dc=example,dc=com\" -D \"cn=admin,dc=example,dc=com\" -P 'new_password' We get the following output: Could not connect to the server at port 389","title":"Functional Checks"},{"location":"icinga/functional-checks/#functional-checks","text":"","title":"Functional Checks"},{"location":"icinga/functional-checks/#setup","text":"Install the Nagios plugins with the following commands: sudo apt-get update sudo apt-get install nagios-plugins Configure http(s) for your web server: sudo nano /etc/nagios-plugins/config/http.cfg Add this to the configuration: define command { command_name check_http command_line $USER1$/check_http -H $HOSTADDRESS$ -I $HOSTADDRESS$ -t 30 }","title":"Setup"},{"location":"icinga/functional-checks/#ping-https","text":"You can use the plugin directly to ping the website: /usr/lib/nagios/plugins/check_http -H fw061.g8.sdi.mi.hdm-stuttgart.de -t 30 When everything works you should get the following output: HTTP OK: HTTP/1.1 200 OK - 11999 bytes in 0,001 second response time |time=0,001000s;;;0,000000;30,000000 size=11999B;;;0; When shutting down apache with ... systemctl stop apache2 ... and trying the ping again, we get the following: HTTP CRITICAL - Konnte TCP socket nicht \u00f6ffnen","title":"Ping HTTP(s)"},{"location":"icinga/functional-checks/#ping-ldap","text":"We can use this command to ping our LDAP server: /usr/lib/nagios/plugins/check_ldap -H ldap://vm1.g8.sdi.mi.hdm-stuttgart.de -b \"dc=example,dc=com\" -D \"cn=admin,dc=example,dc=com\" -P 'new_password' We get the following output: Could not connect to the server at port 389","title":"Ping LDAP"},{"location":"icinga/general/","text":"Icinga What is Icinga? Icinga is an open-source monitoring and alerting system designed to keep an eye on the availability and performance of various resources in a network. How does Icinga work? Monitoring: User define hosts (devices or servers) and services (such as HTTP , DNS , CPU usage) they want to monitor in configuration files. These files specify parameters like IP addresses, check intervals, and notification settings. Status and performance: The results of these checks are then used to determine the current status and performance metrics of the monitored resources. The status can be OK, Warning, Critical, or Unknown. Notifications: When Icinga detects a problem or a change in status, it can send notifications to alert the relevant parties. Notifications can be sent via email, SMS, or other communication channels. Logging and Auditing: Icinga logs events and activities, providing administrators with information for troubleshooting and auditing purposes. Log files are essential for identifying issues, analyzing performance trends, and ensuring the overall health of the monitoring system. References en.wikipedia.org/wiki/Icinga icinga.com","title":"General"},{"location":"icinga/general/#icinga","text":"","title":"Icinga"},{"location":"icinga/general/#what-is-icinga","text":"Icinga is an open-source monitoring and alerting system designed to keep an eye on the availability and performance of various resources in a network.","title":"What is Icinga?"},{"location":"icinga/general/#how-does-icinga-work","text":"Monitoring: User define hosts (devices or servers) and services (such as HTTP , DNS , CPU usage) they want to monitor in configuration files. These files specify parameters like IP addresses, check intervals, and notification settings. Status and performance: The results of these checks are then used to determine the current status and performance metrics of the monitored resources. The status can be OK, Warning, Critical, or Unknown. Notifications: When Icinga detects a problem or a change in status, it can send notifications to alert the relevant parties. Notifications can be sent via email, SMS, or other communication channels. Logging and Auditing: Icinga logs events and activities, providing administrators with information for troubleshooting and auditing purposes. Log files are essential for identifying issues, analyzing performance trends, and ensuring the overall health of the monitoring system.","title":"How does Icinga work?"},{"location":"icinga/general/#references","text":"en.wikipedia.org/wiki/Icinga icinga.com","title":"References"},{"location":"icinga/set-up/","text":"Set Up Prerequesits We use these guides for installing Icinga on our server: www.howtoforge.com/how-to-install-icinga-2-monitoring-software-on-debian-12 www.digitalocean.com/community/tutorials/how-to-install-icinga-and-icinga-web-on-ubuntu-16-04#step-2-%E2%80%93-installing-the-icinga-web-interface Before starting we have to update apt: apt update && apt upgrade Installing MariaDB Server We want to use Icinga with MariaDB. We can install the mariadb-server with the following command: apt install mariadb-server Afterwards we can install the secure script: mariadb-secure-installation We are being asked for a password. Since we do not have one configured yet we can press enter . The secure installation guide will ask you multiple questions to your configuration: OK, successfully used password, moving on... Setting the root password or using the unix_socket ensures that nobody can log into the MariaDB root user without the proper authorisation. You already have your root account protected, so you can safely answer 'n'. Switch to unix_socket authentication [Y/n] n ... skipping. You already have your root account protected, so you can safely answer 'n'. Change the root password? [Y/n] n ... skipping. By default, a MariaDB installation has an anonymous user, allowing anyone to log into MariaDB without having to have a user account created for them. This is intended only for testing, and to make the installation go a bit smoother. You should remove them before moving into a production environment. Remove anonymous users? [Y/n] y ... Success! Normally, root should only be allowed to connect from 'localhost'. This ensures that someone cannot guess at the root password from the network. Disallow root login remotely? [Y/n] y ... Success! By default, MariaDB comes with a database named 'test' that anyone can access. This is also intended only for testing, and should be removed before moving into a production environment. Remove test database and access to it? [Y/n] y - Dropping test database... ... Success! - Removing privileges on test database... ... Success! Reloading the privilege tables will ensure that all changes made so far will take effect immediately. Reload privilege tables now? [Y/n] y ... Success! Cleaning up... All done! If you've completed all of the above steps, your MariaDB installation should now be secure. Thanks for using MariaDB! You can enter the MariaDB shell with: sudo mysql || sudo mariadb Configuring MariaDB We can create a new table for Icinga with a User: sudo mysql Create the table CREATE DATABASE icinga2; Create a User Account for Icinga2 CREATE USER 'fw061'@'localhost' IDENTIFIED BY 'sdi'; We can grant full access for the user: GRANT ALL PRIVILEGES ON fw061.* TO 'fw061'@'localhost'; We can create another SQL user for performing administrative tasks that employ password authentication. GRANT ALL ON *.* TO 'fw061_2'@'localhost' IDENTIFIED BY 'sdi' WITH GRANT OPTION; Flush the user privileges: FLUSH PRIVILEGES; Exit the shell: exit Install Icinga2 and Monitoring plugins on the Master Server First, download the Icinga developers\u2019 package signing key and add it to the apt system: curl -sSL https://packages.icinga.com/icinga.key | sudo apt-key add - Now we need to add the repository address to an apt configuration file. nano /etc/apt/sources.list.d/icinga.list Paste the following code into the file /etc/apt/sources.list.d/icinga.list deb https://packages.icinga.com/ubuntu icinga-xenial main Save and close the file, then refresh your package cache: apt-get update Following the addition of the repository, apt-get will proceed to retrieve data, enabling the installation of Icinga packages. apt-get install icinga2 icinga2-ido-mysql monitoring-plugins -y Again you will be asked for a configuration prompts: Enable Icinga 2\u2019s ido-mysql feature? - YES Configure database for icinga2-ido-mysql with dbconfig-common? - YES Now we need to actually enable the Icinga database backend: icinga2 feature enable ido-mysql command Restart icinga2 to use the new features: systemctl restart icinga2 You can check the status of icinga2 and your configuration with: systemctl status icinga2 Install IDO MySQL driver on the Master Server For Icinga2 to work, it needs a database. For that, we need to install the IDO MySQL driver and set up the database connection. apt install -y icinga2-ido-mysql You will be asked again for configuration steps: You will be asked to enable the ido-mysql feature. Select Yes to continue. You will be prompted to set up the driver and create a database using the dbconfig-common utility. Select Yes to continue. You will be asked for the MySQL password for the icinga2 database. Enter the password you configured previously to continue. You will be asked to confirm the password again. Check the database details in /etc/icinga2/features-available/ido-mysql.conf : /** * The db_ido_mysql library implements IDO functionality * for MySQL. */ library \"db_ido_mysql\" object IdoMysqlConnection \"ido-mysql\" { user = \"icinga2\", password = \"sdi\", host = \"localhost\", database = \"icinga2\" } Restart the Icinga2 Service: systemctl restart icinga2 You can check the status again: systemctl status icinga2 Configure Icinga2 API The last step before we can configure the web setup is to adjust Icinga's API. Install Icinga Web with apt-get : icinga2 api setup Notice the output that you get. The end should say something like: Now restart your Icinga 2 daemon to finish the installation! We need a new user with minimal permissions required by Icinga Web. Open the api-users.conf file for editing. nano /etc/icinga2/conf.d/api-users.conf Append the provided code to the end of the file, and be sure to select a robust password for the API. /** api for icingaweb2 */ object ApiUser \"icingaweb2\" { password = \"PassWordApiIcingaWeb2\" permissions = [ \"status/query\", \"actions/*\", \"objects/modify/*\", \"objects/query/*\" ] } Make a note of the credentials which will be needed later on to access the website. The Icinga2 API server listens on port 5665 by default. Restart the service for the changes to be applied: systemctl restart icinga2 Now we can install the Web Interface: Prepare Web Setup Let\u2019s install Icinga Web with apt-get: apt-get install icingaweb2 We have to adjust the config file: nano /etc/php/7.0/apache2/php.ini In the file /etc/php/7.0/apache2/php.ini we can add the following lines: date.timezone = Europe/Berlin Restart Apache for the changes to take effect: systemctl restart apache2 Setting up IcingaWeb We should now be able to access the web interface of Icinga via this URL: http://fw061.g8.sdi.mi.hdm-stuttgart.de/icingaweb2/setup In order to start the configuration process we have to create a token first that we can use to get access: icingacli setup token create Take the token from the output and paste it into the input field Setup Token on the website As a default configuration we have the monitoring plugin installed. We can leave it like that and click on next. We get an overview of the status of systems and configurations. For example which PHP version is installed and which databases are available. We can choose the authentication type that we want to use. We could also choose LDAP for authentication. Since we have previously configured our database with users, we choose Database. You will be asked to fill in the database credentials on the next page. Enter the database credentials you have previously generated. Validate the configuration by clicking the corresponding button. Once the credentials are confirmed, proceed to the next step by clicking Next. You will then be prompted to assign a name to the authentication backend. Reenter your created credentials. Keep the default value and proceed by clicking Next. On the following page, you will be prompted to establish an administrator account. Input the credentials for your newly created administrator account and proceed by clicking Next. Click Next to proceed. You will be asked to review the configuration on the last page. Feel free to revisit any settings by navigating back. Once you are content with the configurations, click Next to continue. Enter the database credentials that you configured earlier and click on Validate Configuration to confirm the connection. After successful verification, proceed by clicking Next. Subsequently, you will be prompted to provide the API details. Enter the previously generated API credentials, set the Host as 127.0.0.1, and click on Validate Configuration to ensure the connection is valid. Once confirmed, proceed by clicking Next. In the following step, you'll be prompted to select protected custom variables for enhancing security monitoring. Maintain the default values and advance by clicking Next. You will be prompted to review the Monitoring configuration. If necessary, you have the option to go back and make changes before finalizing. If you are satisfied with the configurations, proceed to finalize the installation by clicking on the \"Finish\" button. After successful completion, click the \"Login to Icinga Web 2\" button to open the login page at (http://fw061.g8.sdi.mi.hdm-stuttgart.de/icingaweb2/authentication/login). You can now log in via Icinga's web interface. You can now use Icinga on your server! You can go to Overview > Services to check the status of the master server similar to the following:","title":"Set Up"},{"location":"icinga/set-up/#set-up","text":"","title":"Set Up"},{"location":"icinga/set-up/#prerequesits","text":"We use these guides for installing Icinga on our server: www.howtoforge.com/how-to-install-icinga-2-monitoring-software-on-debian-12 www.digitalocean.com/community/tutorials/how-to-install-icinga-and-icinga-web-on-ubuntu-16-04#step-2-%E2%80%93-installing-the-icinga-web-interface Before starting we have to update apt: apt update && apt upgrade","title":"Prerequesits"},{"location":"icinga/set-up/#installing-mariadb-server","text":"We want to use Icinga with MariaDB. We can install the mariadb-server with the following command: apt install mariadb-server Afterwards we can install the secure script: mariadb-secure-installation We are being asked for a password. Since we do not have one configured yet we can press enter . The secure installation guide will ask you multiple questions to your configuration: OK, successfully used password, moving on... Setting the root password or using the unix_socket ensures that nobody can log into the MariaDB root user without the proper authorisation. You already have your root account protected, so you can safely answer 'n'. Switch to unix_socket authentication [Y/n] n ... skipping. You already have your root account protected, so you can safely answer 'n'. Change the root password? [Y/n] n ... skipping. By default, a MariaDB installation has an anonymous user, allowing anyone to log into MariaDB without having to have a user account created for them. This is intended only for testing, and to make the installation go a bit smoother. You should remove them before moving into a production environment. Remove anonymous users? [Y/n] y ... Success! Normally, root should only be allowed to connect from 'localhost'. This ensures that someone cannot guess at the root password from the network. Disallow root login remotely? [Y/n] y ... Success! By default, MariaDB comes with a database named 'test' that anyone can access. This is also intended only for testing, and should be removed before moving into a production environment. Remove test database and access to it? [Y/n] y - Dropping test database... ... Success! - Removing privileges on test database... ... Success! Reloading the privilege tables will ensure that all changes made so far will take effect immediately. Reload privilege tables now? [Y/n] y ... Success! Cleaning up... All done! If you've completed all of the above steps, your MariaDB installation should now be secure. Thanks for using MariaDB! You can enter the MariaDB shell with: sudo mysql || sudo mariadb","title":"Installing MariaDB Server"},{"location":"icinga/set-up/#configuring-mariadb","text":"We can create a new table for Icinga with a User: sudo mysql Create the table CREATE DATABASE icinga2; Create a User Account for Icinga2 CREATE USER 'fw061'@'localhost' IDENTIFIED BY 'sdi'; We can grant full access for the user: GRANT ALL PRIVILEGES ON fw061.* TO 'fw061'@'localhost'; We can create another SQL user for performing administrative tasks that employ password authentication. GRANT ALL ON *.* TO 'fw061_2'@'localhost' IDENTIFIED BY 'sdi' WITH GRANT OPTION; Flush the user privileges: FLUSH PRIVILEGES; Exit the shell: exit","title":"Configuring MariaDB"},{"location":"icinga/set-up/#install-icinga2-and-monitoring-plugins-on-the-master-server","text":"First, download the Icinga developers\u2019 package signing key and add it to the apt system: curl -sSL https://packages.icinga.com/icinga.key | sudo apt-key add - Now we need to add the repository address to an apt configuration file. nano /etc/apt/sources.list.d/icinga.list Paste the following code into the file /etc/apt/sources.list.d/icinga.list deb https://packages.icinga.com/ubuntu icinga-xenial main Save and close the file, then refresh your package cache: apt-get update Following the addition of the repository, apt-get will proceed to retrieve data, enabling the installation of Icinga packages. apt-get install icinga2 icinga2-ido-mysql monitoring-plugins -y Again you will be asked for a configuration prompts: Enable Icinga 2\u2019s ido-mysql feature? - YES Configure database for icinga2-ido-mysql with dbconfig-common? - YES Now we need to actually enable the Icinga database backend: icinga2 feature enable ido-mysql command Restart icinga2 to use the new features: systemctl restart icinga2 You can check the status of icinga2 and your configuration with: systemctl status icinga2","title":"Install Icinga2 and Monitoring plugins on the Master Server"},{"location":"icinga/set-up/#install-ido-mysql-driver-on-the-master-server","text":"For Icinga2 to work, it needs a database. For that, we need to install the IDO MySQL driver and set up the database connection. apt install -y icinga2-ido-mysql You will be asked again for configuration steps: You will be asked to enable the ido-mysql feature. Select Yes to continue. You will be prompted to set up the driver and create a database using the dbconfig-common utility. Select Yes to continue. You will be asked for the MySQL password for the icinga2 database. Enter the password you configured previously to continue. You will be asked to confirm the password again. Check the database details in /etc/icinga2/features-available/ido-mysql.conf : /** * The db_ido_mysql library implements IDO functionality * for MySQL. */ library \"db_ido_mysql\" object IdoMysqlConnection \"ido-mysql\" { user = \"icinga2\", password = \"sdi\", host = \"localhost\", database = \"icinga2\" } Restart the Icinga2 Service: systemctl restart icinga2 You can check the status again: systemctl status icinga2","title":"Install IDO MySQL driver on the Master Server"},{"location":"icinga/set-up/#configure-icinga2-api","text":"The last step before we can configure the web setup is to adjust Icinga's API. Install Icinga Web with apt-get : icinga2 api setup Notice the output that you get. The end should say something like: Now restart your Icinga 2 daemon to finish the installation! We need a new user with minimal permissions required by Icinga Web. Open the api-users.conf file for editing. nano /etc/icinga2/conf.d/api-users.conf Append the provided code to the end of the file, and be sure to select a robust password for the API. /** api for icingaweb2 */ object ApiUser \"icingaweb2\" { password = \"PassWordApiIcingaWeb2\" permissions = [ \"status/query\", \"actions/*\", \"objects/modify/*\", \"objects/query/*\" ] } Make a note of the credentials which will be needed later on to access the website. The Icinga2 API server listens on port 5665 by default. Restart the service for the changes to be applied: systemctl restart icinga2 Now we can install the Web Interface:","title":"Configure Icinga2 API"},{"location":"icinga/set-up/#prepare-web-setup","text":"Let\u2019s install Icinga Web with apt-get: apt-get install icingaweb2 We have to adjust the config file: nano /etc/php/7.0/apache2/php.ini In the file /etc/php/7.0/apache2/php.ini we can add the following lines: date.timezone = Europe/Berlin Restart Apache for the changes to take effect: systemctl restart apache2","title":"Prepare Web Setup"},{"location":"icinga/set-up/#setting-up-icingaweb","text":"We should now be able to access the web interface of Icinga via this URL: http://fw061.g8.sdi.mi.hdm-stuttgart.de/icingaweb2/setup In order to start the configuration process we have to create a token first that we can use to get access: icingacli setup token create Take the token from the output and paste it into the input field Setup Token on the website As a default configuration we have the monitoring plugin installed. We can leave it like that and click on next. We get an overview of the status of systems and configurations. For example which PHP version is installed and which databases are available. We can choose the authentication type that we want to use. We could also choose LDAP for authentication. Since we have previously configured our database with users, we choose Database. You will be asked to fill in the database credentials on the next page. Enter the database credentials you have previously generated. Validate the configuration by clicking the corresponding button. Once the credentials are confirmed, proceed to the next step by clicking Next. You will then be prompted to assign a name to the authentication backend. Reenter your created credentials. Keep the default value and proceed by clicking Next. On the following page, you will be prompted to establish an administrator account. Input the credentials for your newly created administrator account and proceed by clicking Next. Click Next to proceed. You will be asked to review the configuration on the last page. Feel free to revisit any settings by navigating back. Once you are content with the configurations, click Next to continue. Enter the database credentials that you configured earlier and click on Validate Configuration to confirm the connection. After successful verification, proceed by clicking Next. Subsequently, you will be prompted to provide the API details. Enter the previously generated API credentials, set the Host as 127.0.0.1, and click on Validate Configuration to ensure the connection is valid. Once confirmed, proceed by clicking Next. In the following step, you'll be prompted to select protected custom variables for enhancing security monitoring. Maintain the default values and advance by clicking Next. You will be prompted to review the Monitoring configuration. If necessary, you have the option to go back and make changes before finalizing. If you are satisfied with the configurations, proceed to finalize the installation by clicking on the \"Finish\" button. After successful completion, click the \"Login to Icinga Web 2\" button to open the login page at (http://fw061.g8.sdi.mi.hdm-stuttgart.de/icingaweb2/authentication/login). You can now log in via Icinga's web interface. You can now use Icinga on your server! You can go to Overview > Services to check the status of the master server similar to the following:","title":"Setting up IcingaWeb"},{"location":"icinga/snmp-based-checks/","text":"SNMP based checks Setup Installing SNMP Daemon with the following command: sudo apt-get install snmpd Configure the Daemon with: sudo nano /etc/snmp/snmpd.conf by adding the following lines: rocommunity mi-snmp # Include all disks for monitoring includeAllDisks Restart the SNMP Daemon sudo service snmpd restart Install SNMP to Icinga Installing SNMP Plugin With the following command you can firstly install the SNMP Plugin: apt-get install monitoring-plugins Configure SNMP in Icinga Server Configure the following file: nano /etc/icinga2/conf.d/commands.conf with this code: object CheckCommand \"snmp\" { import \"plugin-check-command\" command = [ PluginDir + \"/check_snmp\" ] arguments += { \"-H\" = \"$address$\" \"-C\" = \"$snmp_community$\" \"-o\" = \"$snmp_oid$\" } } Define SNMP Service Configure the following file: nano /etc/icinga2/conf.d/services.conf with this code: apply Service \"snmp-disk\" { import \"generic-service\" check_command = \"snmp\" vars.address = \"hostname_or_ip\" vars.snmp_community = \"your_snmp_community_string\" vars.snmp_oid = \".1.3.6.1.2.1.25.2.3.1.3.1\" # OID for total disk space assign where host.vars.os == \"linux\" # Adjust the condition as needed } Restart Icinga systemctl restart icinga2","title":"SNMP Checks"},{"location":"icinga/snmp-based-checks/#snmp-based-checks","text":"","title":"SNMP based checks"},{"location":"icinga/snmp-based-checks/#setup","text":"Installing SNMP Daemon with the following command: sudo apt-get install snmpd Configure the Daemon with: sudo nano /etc/snmp/snmpd.conf by adding the following lines: rocommunity mi-snmp # Include all disks for monitoring includeAllDisks Restart the SNMP Daemon sudo service snmpd restart","title":"Setup"},{"location":"icinga/snmp-based-checks/#install-snmp-to-icinga","text":"","title":"Install SNMP to Icinga"},{"location":"icinga/snmp-based-checks/#installing-snmp-plugin","text":"With the following command you can firstly install the SNMP Plugin: apt-get install monitoring-plugins","title":"Installing SNMP Plugin"},{"location":"icinga/snmp-based-checks/#configure-snmp-in-icinga-server","text":"Configure the following file: nano /etc/icinga2/conf.d/commands.conf with this code: object CheckCommand \"snmp\" { import \"plugin-check-command\" command = [ PluginDir + \"/check_snmp\" ] arguments += { \"-H\" = \"$address$\" \"-C\" = \"$snmp_community$\" \"-o\" = \"$snmp_oid$\" } }","title":"Configure SNMP in Icinga Server"},{"location":"icinga/snmp-based-checks/#define-snmp-service","text":"Configure the following file: nano /etc/icinga2/conf.d/services.conf with this code: apply Service \"snmp-disk\" { import \"generic-service\" check_command = \"snmp\" vars.address = \"hostname_or_ip\" vars.snmp_community = \"your_snmp_community_string\" vars.snmp_oid = \".1.3.6.1.2.1.25.2.3.1.3.1\" # OID for total disk space assign where host.vars.os == \"linux\" # Adjust the condition as needed }","title":"Define SNMP Service"},{"location":"icinga/snmp-based-checks/#restart-icinga","text":"systemctl restart icinga2","title":"Restart Icinga"},{"location":"icinga/ssh-based-checks/","text":"SSH based checks","title":"SSH Checks"},{"location":"icinga/ssh-based-checks/#ssh-based-checks","text":"","title":"SSH based checks"},{"location":"ldap/accessing-with-java/","text":"Accessing LDAP by a Java\u2122 application We attempt to connect to our LDAP server using a simple Java application. To install all necessary packages, we configure the following artifactId with the corresponding dependencies: <parent> <groupId>at.stderr</groupId> <artifactId>maven-parent</artifactId> <version>2.3.0</version> </parent> <dependencies> <dependency> <groupId>org.ldaptive</groupId> <artifactId>ldaptive</artifactId> <version>2.3.0</version> </dependency> <dependency> <!-- required for ldaptive's internal logging --> <groupId>org.slf4j</groupId> <artifactId>slf4j-api</artifactId> <version>2.0.11</version> </dependency> <dependency> <groupId>org.slf4j</groupId> <artifactId>slf4j-log4j12</artifactId> <version>2.0.11</version> </dependency> </dependencies> For the main app we use the boilerplate code of Ldaptive to search for our user with the uid bbein . The following output is achieved. package de.hdm_stuttgart.de.db_app; import org.ldaptive.*; public class Main { public static void main( String[] args ) throws LdapException { SearchOperation search = new SearchOperation( DefaultConnectionFactory.builder() .config(ConnectionConfig.builder() .url(\"ldap://vm1.g8.sdi.mi.hdm-stuttgart.de\") .useStartTLS(false) .build()) .build(), \"dc=betrayer,dc=com\"); SearchResponse response = search.execute(\"(uid=*bbein)\"); for (LdapEntry entry : response.getEntries()) { System.out.println(\"DN: \" + entry.getDn()); for (LdapAttribute attribute : entry.getAttributes()) { System.out.println(attribute.getName() + \": \" + attribute.getStringValue()); } } } } Output DN: uid=bein,ou=devel,ou=software,ou=departments,dc=betrayer,dc=com uid: bbein cn: Bernd Bein sn: Bein objectClass: inetOrgPerson homeDirectory: /home/bbein uidNumber: 1001 gidNumber: 100 References www.ldaptive.org/","title":"Accessing LDAP by a Java\u2122 application"},{"location":"ldap/accessing-with-java/#accessing-ldap-by-a-javatm-application","text":"We attempt to connect to our LDAP server using a simple Java application. To install all necessary packages, we configure the following artifactId with the corresponding dependencies: <parent> <groupId>at.stderr</groupId> <artifactId>maven-parent</artifactId> <version>2.3.0</version> </parent> <dependencies> <dependency> <groupId>org.ldaptive</groupId> <artifactId>ldaptive</artifactId> <version>2.3.0</version> </dependency> <dependency> <!-- required for ldaptive's internal logging --> <groupId>org.slf4j</groupId> <artifactId>slf4j-api</artifactId> <version>2.0.11</version> </dependency> <dependency> <groupId>org.slf4j</groupId> <artifactId>slf4j-log4j12</artifactId> <version>2.0.11</version> </dependency> </dependencies> For the main app we use the boilerplate code of Ldaptive to search for our user with the uid bbein . The following output is achieved. package de.hdm_stuttgart.de.db_app; import org.ldaptive.*; public class Main { public static void main( String[] args ) throws LdapException { SearchOperation search = new SearchOperation( DefaultConnectionFactory.builder() .config(ConnectionConfig.builder() .url(\"ldap://vm1.g8.sdi.mi.hdm-stuttgart.de\") .useStartTLS(false) .build()) .build(), \"dc=betrayer,dc=com\"); SearchResponse response = search.execute(\"(uid=*bbein)\"); for (LdapEntry entry : response.getEntries()) { System.out.println(\"DN: \" + entry.getDn()); for (LdapAttribute attribute : entry.getAttributes()) { System.out.println(attribute.getName() + \": \" + attribute.getStringValue()); } } } } Output DN: uid=bein,ou=devel,ou=software,ou=departments,dc=betrayer,dc=com uid: bbein cn: Bernd Bein sn: Bein objectClass: inetOrgPerson homeDirectory: /home/bbein uidNumber: 1001 gidNumber: 100","title":"Accessing LDAP by a Java\u2122 application"},{"location":"ldap/accessing-with-java/#references","text":"www.ldaptive.org/","title":"References"},{"location":"ldap/backup-recovery-restore/","text":"Backup and recovery / restore To set up LDAP on your second machine, you can follow the instructions listed in our LDAP Installation Manual . To export the data from your a machine to your b machine you can use Apache Directory Studio. We registered with the following DN on the a machine dc=betrayer,dc=com . By right-clicking on the DN root, we can generate an ldif file under export. We save it locally on our machine and upload it to the b machine via scp. It is important to delete the head in order to successfully reconfigure it with slapadd -l /data.ldif . ( data.ldif is the exported file) When installing ldap beforehand we have already configured our root tree with dc=betrayer,dc=com . That is the reason we need to delete the head. This should be removed: dn: dc=betrayer,dc=com objectClass: dcObject objectClass: organization objectClass: top dc: betrayer o: betrayer.com We can restore the exported data with slapadd -l /data.ldif on our b machine. This is the file we uploaded: dn: dc=betrayer,dc=com objectClass: dcObject objectClass: organization objectClass: top dc: betrayer o: betrayer.com dn: ou=departments,dc=betrayer,dc=com objectClass: organizationalUnit objectClass: top ou: departments dn: ou=software,ou=departments,dc=betrayer,dc=com objectClass: organizationalUnit objectClass: top ou: software dn: ou=devel,ou=software,ou=departments,dc=betrayer,dc=com objectClass: organizationalUnit objectClass: top ou: devel dn: ou=testing,ou=software,ou=departments,dc=betrayer,dc=com objectClass: organizationalUnit objectClass: top ou: testing dn: ou=financial,ou=departments,dc=betrayer,dc=com objectClass: organizationalUnit objectClass: top ou: financial dn: uid=jsmith,ou=devel,ou=software,ou=departments,dc=betrayer,dc=com objectClass: inetOrgPerson objectClass: organizationalPerson objectClass: person objectClass: posixAccount objectClass: top cn: John Smithy gidNumber: 100 homeDirectory: /home/jsmith sn: Smithy uid: jsmith uidNumber: 1002 mail: john@smith.com dn: uid=abean,ou=devel,ou=software,ou=departments,dc=betrayer,dc=com objectClass: inetOrgPerson objectClass: organizationalPerson objectClass: person objectClass: posixAccount objectClass: top cn: Albert Bean gidNumber: 100 homeDirectory: /home/abean sn: Bean uid: abean uidNumber: 1000 mail: albert@bean.com dn: uid=bein,ou=devel,ou=software,ou=departments,dc=betrayer,dc=com objectClass: inetOrgPerson objectClass: organizationalPerson objectClass: person objectClass: posixAccount objectClass: top cn: Bernd Bein gidNumber: 100 homeDirectory: /home/bbein sn: Bein uid: bbein uid: bein uidNumber: 1001 Now when logging in with Apache Directory Studio on our b machine , we can see the same directories we have on our a machine .","title":"LDAP Backup and recovery / restore"},{"location":"ldap/backup-recovery-restore/#backup-and-recovery-restore","text":"To set up LDAP on your second machine, you can follow the instructions listed in our LDAP Installation Manual . To export the data from your a machine to your b machine you can use Apache Directory Studio. We registered with the following DN on the a machine dc=betrayer,dc=com . By right-clicking on the DN root, we can generate an ldif file under export. We save it locally on our machine and upload it to the b machine via scp. It is important to delete the head in order to successfully reconfigure it with slapadd -l /data.ldif . ( data.ldif is the exported file) When installing ldap beforehand we have already configured our root tree with dc=betrayer,dc=com . That is the reason we need to delete the head. This should be removed: dn: dc=betrayer,dc=com objectClass: dcObject objectClass: organization objectClass: top dc: betrayer o: betrayer.com We can restore the exported data with slapadd -l /data.ldif on our b machine. This is the file we uploaded: dn: dc=betrayer,dc=com objectClass: dcObject objectClass: organization objectClass: top dc: betrayer o: betrayer.com dn: ou=departments,dc=betrayer,dc=com objectClass: organizationalUnit objectClass: top ou: departments dn: ou=software,ou=departments,dc=betrayer,dc=com objectClass: organizationalUnit objectClass: top ou: software dn: ou=devel,ou=software,ou=departments,dc=betrayer,dc=com objectClass: organizationalUnit objectClass: top ou: devel dn: ou=testing,ou=software,ou=departments,dc=betrayer,dc=com objectClass: organizationalUnit objectClass: top ou: testing dn: ou=financial,ou=departments,dc=betrayer,dc=com objectClass: organizationalUnit objectClass: top ou: financial dn: uid=jsmith,ou=devel,ou=software,ou=departments,dc=betrayer,dc=com objectClass: inetOrgPerson objectClass: organizationalPerson objectClass: person objectClass: posixAccount objectClass: top cn: John Smithy gidNumber: 100 homeDirectory: /home/jsmith sn: Smithy uid: jsmith uidNumber: 1002 mail: john@smith.com dn: uid=abean,ou=devel,ou=software,ou=departments,dc=betrayer,dc=com objectClass: inetOrgPerson objectClass: organizationalPerson objectClass: person objectClass: posixAccount objectClass: top cn: Albert Bean gidNumber: 100 homeDirectory: /home/abean sn: Bean uid: abean uidNumber: 1000 mail: albert@bean.com dn: uid=bein,ou=devel,ou=software,ou=departments,dc=betrayer,dc=com objectClass: inetOrgPerson objectClass: organizationalPerson objectClass: person objectClass: posixAccount objectClass: top cn: Bernd Bein gidNumber: 100 homeDirectory: /home/bbein sn: Bein uid: bbein uid: bein uidNumber: 1001 Now when logging in with Apache Directory Studio on our b machine , we can see the same directories we have on our a machine .","title":"Backup and recovery / restore"},{"location":"ldap/browsing/","text":"Browse an existing LDAP Server To browse directories with LDAP we use Apache Directory Studio . How to browse an existing LDAP Server? To configure a new connection we can open LDAP / New LDAP Connection . We use the LDAP HdM Server ldap1.hdm-stuttgart.de and connect to it via TLS . We use the No Authentication Method to get a general view of the ldap server. Make sure, that we are using the \"Medieninformatik/MI\" VPN . Now, we can view the LDAP DIT and navigate through it to see the user list. If we right click on user list we can filter the children and look after our user (for Example (uid=nv023)). To get an extended view of our user (for example to see the hash) We can right click on our connection and click on Properties . Now we can use the Simple Authentification Method. We can get our DN credentials from our user and authenticate with the corresponding password. Now we can see further materials like the \"Matrikelnummer\" or the hashed password. To generate the same with ldapsearch you can use the following command prompt ldapsearch -x -H ldap://ldap1.hdm-stuttgart.de -b \"ou=userlist,dc=hdm-stuttgart,dc=de\" -s sub \"(uid=nv023)\" Here is the output with the same information as with the gui: # extended LDIF # # LDAPv3 # base <ou=userlist,dc=hdm-stuttgart,dc=de> with scope subtree # filter: (uid=nv023) # requesting: ALL # # nv023, userlist, hdm-stuttgart.de dn: uid=nv023,ou=userlist,dc=hdm-stuttgart,dc=de displayName: Vinterstad Niklas employeeType: student objectClass: hdmAccount objectClass: hdmStudent objectClass: inetOrgPerson objectClass: posixAccount objectClass: shadowAccount objectClass: eduPerson eduPersonAffiliation: member eduPersonAffiliation: student eduPersonAffiliation: library-walk-in uid: nv023 mail: nv023@hdm-stuttgart.de uidNumber: 73699 cn: Vinterstad Niklas loginShell: /bin/sh hdmCategory: 1 gidNumber: 100 givenName: Niklas homeDirectory: /home/stud/n/nv023 sn: Vinterstad # search result search: 2 result: 0 Success # numResponses: 2 # numEntries: 1 If you want to authenticate, here is the following command prompt: ldapsearch -x -H ldap://ldap1.hdm-stuttgart.de -b \"ou=userlist,dc=hdm-stuttgart,dc=de\" -D \"uid=nv023,ou=userlist,dc=hdm-stuttgart,dc=de\" -W \"(uid=nv023)\" and the follwing output with more information is showing: # extended LDIF # # LDAPv3 # base <ou=userlist,dc=hdm-stuttgart,dc=de> with scope subtree # filter: (uid=nv023) # requesting: ALL # # nv023, userlist, hdm-stuttgart.de dn: uid=nv023,ou=userlist,dc=hdm-stuttgart,dc=de businessCategory: 1 employeeType: student postOfficeBox: 2G objectClass: hdmAccount objectClass: hdmStudent objectClass: inetOrgPerson objectClass: posixAccount objectClass: shadowAccount objectClass: eduPerson eduPersonAffiliation: member eduPersonAffiliation: student eduPersonAffiliation: library-walk-in uid: nv023 mail: nv023@hdm-stuttgart.de uidNumber: 73699 cn: Vinterstad Niklas loginShell: /bin/sh hdmCategory: 1 gidNumber: 100 employeeNumber: 45516 givenName: Niklas homeDirectory: /home/stud/n/nv023 sn: Vinterstad matrikelNr: 45516 userPassword:: e1NTSEF9TVBSZzZQQTJGMUxUKzVrOFM5Y2RnRlVjbmtaUm1iVlh5UERoTkhYdEx 3UHZ0dDEw shadowLastChange: 19272 sambaNTPassword: EEB75997E36EFFC420B8BFC8EB8E6CF6 # search result search: 2 result: 0 Success # numResponses: 2 # numEntries: 1","title":"Browsing LDAP"},{"location":"ldap/browsing/#browse-an-existing-ldap-server","text":"To browse directories with LDAP we use Apache Directory Studio .","title":"Browse an existing LDAP Server"},{"location":"ldap/browsing/#how-to-browse-an-existing-ldap-server","text":"To configure a new connection we can open LDAP / New LDAP Connection . We use the LDAP HdM Server ldap1.hdm-stuttgart.de and connect to it via TLS . We use the No Authentication Method to get a general view of the ldap server. Make sure, that we are using the \"Medieninformatik/MI\" VPN . Now, we can view the LDAP DIT and navigate through it to see the user list. If we right click on user list we can filter the children and look after our user (for Example (uid=nv023)). To get an extended view of our user (for example to see the hash) We can right click on our connection and click on Properties . Now we can use the Simple Authentification Method. We can get our DN credentials from our user and authenticate with the corresponding password. Now we can see further materials like the \"Matrikelnummer\" or the hashed password. To generate the same with ldapsearch you can use the following command prompt ldapsearch -x -H ldap://ldap1.hdm-stuttgart.de -b \"ou=userlist,dc=hdm-stuttgart,dc=de\" -s sub \"(uid=nv023)\" Here is the output with the same information as with the gui: # extended LDIF # # LDAPv3 # base <ou=userlist,dc=hdm-stuttgart,dc=de> with scope subtree # filter: (uid=nv023) # requesting: ALL # # nv023, userlist, hdm-stuttgart.de dn: uid=nv023,ou=userlist,dc=hdm-stuttgart,dc=de displayName: Vinterstad Niklas employeeType: student objectClass: hdmAccount objectClass: hdmStudent objectClass: inetOrgPerson objectClass: posixAccount objectClass: shadowAccount objectClass: eduPerson eduPersonAffiliation: member eduPersonAffiliation: student eduPersonAffiliation: library-walk-in uid: nv023 mail: nv023@hdm-stuttgart.de uidNumber: 73699 cn: Vinterstad Niklas loginShell: /bin/sh hdmCategory: 1 gidNumber: 100 givenName: Niklas homeDirectory: /home/stud/n/nv023 sn: Vinterstad # search result search: 2 result: 0 Success # numResponses: 2 # numEntries: 1 If you want to authenticate, here is the following command prompt: ldapsearch -x -H ldap://ldap1.hdm-stuttgart.de -b \"ou=userlist,dc=hdm-stuttgart,dc=de\" -D \"uid=nv023,ou=userlist,dc=hdm-stuttgart,dc=de\" -W \"(uid=nv023)\" and the follwing output with more information is showing: # extended LDIF # # LDAPv3 # base <ou=userlist,dc=hdm-stuttgart,dc=de> with scope subtree # filter: (uid=nv023) # requesting: ALL # # nv023, userlist, hdm-stuttgart.de dn: uid=nv023,ou=userlist,dc=hdm-stuttgart,dc=de businessCategory: 1 employeeType: student postOfficeBox: 2G objectClass: hdmAccount objectClass: hdmStudent objectClass: inetOrgPerson objectClass: posixAccount objectClass: shadowAccount objectClass: eduPerson eduPersonAffiliation: member eduPersonAffiliation: student eduPersonAffiliation: library-walk-in uid: nv023 mail: nv023@hdm-stuttgart.de uidNumber: 73699 cn: Vinterstad Niklas loginShell: /bin/sh hdmCategory: 1 gidNumber: 100 employeeNumber: 45516 givenName: Niklas homeDirectory: /home/stud/n/nv023 sn: Vinterstad matrikelNr: 45516 userPassword:: e1NTSEF9TVBSZzZQQTJGMUxUKzVrOFM5Y2RnRlVjbmtaUm1iVlh5UERoTkhYdEx 3UHZ0dDEw shadowLastChange: 19272 sambaNTPassword: EEB75997E36EFFC420B8BFC8EB8E6CF6 # search result search: 2 result: 0 Success # numResponses: 2 # numEntries: 1","title":"How to browse an existing LDAP Server?"},{"location":"ldap/config/","text":"LDAP configuration Some parameters have to be added manually to the LDAP configuration file. OpenLDAP supports parameter configuration within its own database backend. Configuration with Apache Directory Studio First we have to search for the two different DIT s. We do this by using the following ldapsearch command: ldapsearch -Y EXTERNAL -H ldapi://` -b cn=config Now we see following answer in the console: # {0}config, config dn: olcDatabase={0}config,cn=config objectClass: olcDatabaseConfig olcDatabase: {0}config olcAccess: {0}to * by dn.exact=gidNumber=0+uidNumber=0,cn=peercred,cn=external ,cn=auth manage by * break olcRootDN: cn=admin,cn=config At the end of the of the answer we see our required cn=config database. To access the config database via ApacheDirectoryStudio, we need to set an olcRootPW attribute, the hashed password for the complete credentials. We do this by hashing our SSHA password. We can do this for example like this: Generate Password Hash with salt. echo -n passwordsalt | shasum -a 1 | awk '{print $1}' Base64 encode it with the salt again appended to the string. echo -n 'c88e9c67041a74e0357befdff93f87dde0904214salt' | base64 Now we just have to add {SSHA} before the string. You can find the documentation for this method here: https://community.canvaslms.com/t5/SIS-User-Articles/SSHA-Password-Generation/ta-p/243730 Creating a LDIF file with the corresponding parameters: (name it like this for Example add_olcRootPW.ldif ) dn: olcDatabase={0}config,cn=config add: olcRootPW olcRootPW: {ssha}dn: olcDatabase={0}config,cn=config add: olcRootPW olcRootPW: {ssha}4yjYu6pKazMWjyCBk7unVBAa3RGlg9oW Now we can add the generated olcRootPW attribute with the following command: ldapmodify -Q -Y EXTERNAL -H ldapi:/// -f ~/add_olcRootPW.ldif To test it we can check the database config again with: ldapsearch -Y EXTERNAL -H ldapi:/// -b cn=config Now we can see the added hashed password. To connect with ApacheDirectoryStudio we need to uncheck the Box Get base DNs from Root DSEGet base DNs from Root DSE . Above we now can add the required Base DN manually. (cn=config). As authentication we use the bind dn cn=admin,cn=config and the password which we hashed.","title":"LDAP Config"},{"location":"ldap/config/#ldap-configuration","text":"Some parameters have to be added manually to the LDAP configuration file. OpenLDAP supports parameter configuration within its own database backend.","title":"LDAP configuration"},{"location":"ldap/config/#configuration-with-apache-directory-studio","text":"First we have to search for the two different DIT s. We do this by using the following ldapsearch command: ldapsearch -Y EXTERNAL -H ldapi://` -b cn=config Now we see following answer in the console: # {0}config, config dn: olcDatabase={0}config,cn=config objectClass: olcDatabaseConfig olcDatabase: {0}config olcAccess: {0}to * by dn.exact=gidNumber=0+uidNumber=0,cn=peercred,cn=external ,cn=auth manage by * break olcRootDN: cn=admin,cn=config At the end of the of the answer we see our required cn=config database. To access the config database via ApacheDirectoryStudio, we need to set an olcRootPW attribute, the hashed password for the complete credentials. We do this by hashing our SSHA password. We can do this for example like this: Generate Password Hash with salt. echo -n passwordsalt | shasum -a 1 | awk '{print $1}' Base64 encode it with the salt again appended to the string. echo -n 'c88e9c67041a74e0357befdff93f87dde0904214salt' | base64 Now we just have to add {SSHA} before the string. You can find the documentation for this method here: https://community.canvaslms.com/t5/SIS-User-Articles/SSHA-Password-Generation/ta-p/243730 Creating a LDIF file with the corresponding parameters: (name it like this for Example add_olcRootPW.ldif ) dn: olcDatabase={0}config,cn=config add: olcRootPW olcRootPW: {ssha}dn: olcDatabase={0}config,cn=config add: olcRootPW olcRootPW: {ssha}4yjYu6pKazMWjyCBk7unVBAa3RGlg9oW Now we can add the generated olcRootPW attribute with the following command: ldapmodify -Q -Y EXTERNAL -H ldapi:/// -f ~/add_olcRootPW.ldif To test it we can check the database config again with: ldapsearch -Y EXTERNAL -H ldapi:/// -b cn=config Now we can see the added hashed password. To connect with ApacheDirectoryStudio we need to uncheck the Box Get base DNs from Root DSEGet base DNs from Root DSE . Above we now can add the required Base DN manually. (cn=config). As authentication we use the bind dn cn=admin,cn=config and the password which we hashed.","title":"Configuration with Apache Directory Studio"},{"location":"ldap/extending-an-existing-entry/","text":"Extending an existing entry As before, we use Apache Directory Studio for these steps. Extend entry by objectclass posixAccount There are two ways to extend an existing entry. We'll extend our user jsmith with an posixAccount objectClass. One way would be to right click within the jsmith object and select Add new value . Then you can select the value you want to extend your entry with. In our case it would be posixAccount . After selecting the value we can click next and choose a proper value. We choose 1000. The other way would be to select LDAP in the toolbar and choose New LDIF File . You can paste this code to the LDIF file. dn: uid=jsmith,ou=devel,ou=software,ou=departments,dc=betrayer,dc=com changetype: modify add: objectClass objectClass: posixAccount - add: uidNumber uidNumber: 1001 - add: gidNumber gidNumber: 1001 - add: homeDirectory homeDirectory: /home/jsmith - It is important to set the dn: to the specific entry you want to extend. Furthermore the changetype: should be modify . dn: uid=jsmith,ou=devel,ou=software,ou=departments,dc=betrayer,dc=com changetype: modify add: objectClass objectClass: posixAccount ... References www.digitalocean.com/community/tutorials/how-to-use-ldif-files-to-make-changes-to-an-openldap-system","title":"Extending an existing entry"},{"location":"ldap/extending-an-existing-entry/#extending-an-existing-entry","text":"As before, we use Apache Directory Studio for these steps.","title":"Extending an existing entry"},{"location":"ldap/extending-an-existing-entry/#extend-entry-by-objectclass-posixaccount","text":"There are two ways to extend an existing entry. We'll extend our user jsmith with an posixAccount objectClass. One way would be to right click within the jsmith object and select Add new value . Then you can select the value you want to extend your entry with. In our case it would be posixAccount . After selecting the value we can click next and choose a proper value. We choose 1000. The other way would be to select LDAP in the toolbar and choose New LDIF File . You can paste this code to the LDIF file. dn: uid=jsmith,ou=devel,ou=software,ou=departments,dc=betrayer,dc=com changetype: modify add: objectClass objectClass: posixAccount - add: uidNumber uidNumber: 1001 - add: gidNumber gidNumber: 1001 - add: homeDirectory homeDirectory: /home/jsmith - It is important to set the dn: to the specific entry you want to extend. Furthermore the changetype: should be modify . dn: uid=jsmith,ou=devel,ou=software,ou=departments,dc=betrayer,dc=com changetype: modify add: objectClass objectClass: posixAccount ...","title":"Extend entry by objectclass posixAccount"},{"location":"ldap/extending-an-existing-entry/#references","text":"www.digitalocean.com/community/tutorials/how-to-use-ldif-files-to-make-changes-to-an-openldap-system","title":"References"},{"location":"ldap/filter-based-search/","text":"Filter based search We use ldapsearch to perform search operations on LDAP . All users with a uid attribute value starting with the letter \u201cb\u201d ldapsearch -x -D \"cn=admin,dc=betrayer,dc=com\" -W -b \"dc=example,dc=com\" \"(uid=b*)\" returns this answer: Enter LDAP Password: # extended LDIF # # LDAPv3 # base <dc=example,dc=com> with scope subtree # filter: (uid=b*) # requesting: ALL # # search result search: 2 result: 32 No such object # numResponses: 1 root@sdi08a:~# ldapsearch -x -D \"cn=admin,dc=betrayer,dc=com\" -W -b \"dc=betrayer,dc=com\" \"(uid=b*)\" Enter LDAP Password: # extended LDIF # # LDAPv3 # base <dc=betrayer,dc=com> with scope subtree # filter: (uid=b*) # requesting: ALL # # bein, devel, software, departments, betrayer.com dn: uid=bein,ou=devel,ou=software,ou=departments,dc=betrayer,dc=com uid: bbein uid: bein cn: Bernd Bein sn: Bein objectClass: inetOrgPerson objectClass: organizationalPerson objectClass: person objectClass: top # search result search: 2 result: 0 Success # numResponses: 2 # numEntries: 1 All entries with either a defined uid attribute or a ou attribute starting with letter \u201cd\u201d ldapsearch -x -D \"cn=admin,dc=betrayer,dc=com\" -W -b \"dc=betrayer,dc=com\" \"(|(uid=*)(ou=d*))\" Answer: # extended LDIF # # LDAPv3 # base <dc=example,dc=com> with scope subtree # filter: (uid=b*) # requesting: ALL # # search result search: 2 result: 32 No such object # numResponses: 1 root@sdi08a:~# ldapsearch -x -D \"cn=admin,dc=betrayer,dc=com\" -W -b \"dc=betrayer,dc=com\" \"(uid=b*)\" Enter LDAP Password: # extended LDIF # # LDAPv3 # base <dc=betrayer,dc=com> with scope subtree # filter: (uid=b*) # requesting: ALL # # bein, devel, software, departments, betrayer.com dn: uid=bein,ou=devel,ou=software,ou=departments,dc=betrayer,dc=com uid: bbein uid: bein cn: Bernd Bein sn: Bein objectClass: inetOrgPerson objectClass: organizationalPerson objectClass: person objectClass: top # search result search: 2 result: 0 Success # numResponses: 2 # numEntries: 1 root@sdi08a:~# ldapsearch -x -D \"cn=admin,dc=betrayer,dc=com\" -W -b \"dc=betrayer,dc=com\" \"(|(uid=*)(ou=d*))\" Enter LDAP Password: # extended LDIF # # LDAPv3 # base <dc=betrayer,dc=com> with scope subtree # filter: (|(uid=*)(ou=d*)) # requesting: ALL # # departments, betrayer.com dn: ou=departments,dc=betrayer,dc=com ou: departments objectClass: organizationalUnit objectClass: top # devel, software, departments, betrayer.com dn: ou=devel,ou=software,ou=departments,dc=betrayer,dc=com ou: devel objectClass: organizationalUnit objectClass: top # jsmith, devel, software, departments, betrayer.com dn: uid=jsmith,ou=devel,ou=software,ou=departments,dc=betrayer,dc=com objectClass: inetOrgPerson objectClass: organizationalPerson objectClass: person objectClass: top objectClass: posixAccount mail: john@smith.com sn: Smithy cn: John Smithy uid: jsmith uidNumber: 1001 gidNumber: 1001 homeDirectory: /home/jsmith # abean, devel, software, departments, betrayer.com dn: uid=abean,ou=devel,ou=software,ou=departments,dc=betrayer,dc=com uid: abean cn: Albert Bean sn: Bean objectClass: inetOrgPerson objectClass: organizationalPerson objectClass: person objectClass: top objectClass: posixAccount mail: albert@bean.com userPassword:: e1NNRDV9aHVZTzQwUSthNDFuY2JlbS90NWlxNUFMYU1Iaml3aTU= uidNumber: 1 gidNumber: 1 homeDirectory: /home/abean # bein, devel, software, departments, betrayer.com dn: uid=bein,ou=devel,ou=software,ou=departments,dc=betrayer,dc=com uid: bbein uid: bein cn: Bernd Bein sn: Bein objectClass: inetOrgPerson objectClass: organizationalPerson objectClass: person objectClass: top # search result search: 2 result: 0 Success # numResponses: 6 # numEntries: 5 All users entries within the whole DIT having a gidNumber value of 100 ldapsearch -x -D \"cn=admin,dc=betrayer,dc=com\" -W -b \"dc=betrayer,dc=com\" \"(gidNumber=100)\" Our gid numbers start at 1000 so this should not return anything. Enter LDAP Password: # extended LDIF # # LDAPv3 # base <dc=betrayer,dc=com> with scope subtree # filter: (gidNumber=100) # requesting: ALL # # search result search: 2 result: 0 Success # numResponses: 1 All user entries belonging to the billing department having a uidNumber value greater than 1023 ldapsearch -x -D \"cn=admin,dc=betrayer,dc=com\" -W -b \"ou=billing,dc=betrayer,dc=com\" \"(uidNumber>=1023)\" We do not have a department billing so this search query cannot be resolved. Answer: Enter LDAP Password: # extended LDIF # # LDAPv3 # base <ou=billing,dc=betrayer,dc=com> with scope subtree # filter: (uidNumber>=1023) # requesting: ALL # # search result search: 2 result: 32 No such object matchedDN: dc=betrayer,dc=com # numResponses: 1 All user entries within the whole DIT having a commonName containing the substring \u201cei\u201d ldapsearch -x -D \"cn=admin,dc=betrayer,dc=com\" -W -b \"dc=betrayer,dc=com\" \"(cn=*ei*)\" Answer: Enter LDAP Password: # extended LDIF # # LDAPv3 # base <dc=betrayer,dc=com> with scope subtree # filter: (cn=*ei*) # requesting: ALL # # bein, devel, software, departments, betrayer.com dn: uid=bein,ou=devel,ou=software,ou=departments,dc=betrayer,dc=com uid: bbein uid: bein cn: Bernd Bein sn: Bein objectClass: inetOrgPerson objectClass: organizationalPerson objectClass: person objectClass: top objectClass: posixAccount gidNumber: 1024 homeDirectory: /home/bbein uidNumber: 1024 # search result search: 2 result: 0 Success # numResponses: 2 # numEntries: 1 All user entries within the whole DIT belonging to gidNumber == 100 or having a uid value starting with letter \u201ct\u201d ldapsearch -x -D \"cn=admin,dc=betrayer,dc=com\" -W -b \"dc=betrayer,dc=com\" \"(|(gidNumber=100)(uid=t*))\" Answer: Enter LDAP Password: # extended LDIF # # LDAPv3 # base <dc=betrayer,dc=com> with scope subtree # filter: (|(gidNumber=100)(uid=t*)) # requesting: ALL # # search result search: 2 result: 0 Success # numResponses: 1 References www.docs.oracle.com/cd/E19693-01/819-0997/auto45/index.html","title":"Filter based search"},{"location":"ldap/filter-based-search/#filter-based-search","text":"We use ldapsearch to perform search operations on LDAP .","title":"Filter based search"},{"location":"ldap/filter-based-search/#all-users-with-a-uid-attribute-value-starting-with-the-letter-b","text":"ldapsearch -x -D \"cn=admin,dc=betrayer,dc=com\" -W -b \"dc=example,dc=com\" \"(uid=b*)\" returns this answer: Enter LDAP Password: # extended LDIF # # LDAPv3 # base <dc=example,dc=com> with scope subtree # filter: (uid=b*) # requesting: ALL # # search result search: 2 result: 32 No such object # numResponses: 1 root@sdi08a:~# ldapsearch -x -D \"cn=admin,dc=betrayer,dc=com\" -W -b \"dc=betrayer,dc=com\" \"(uid=b*)\" Enter LDAP Password: # extended LDIF # # LDAPv3 # base <dc=betrayer,dc=com> with scope subtree # filter: (uid=b*) # requesting: ALL # # bein, devel, software, departments, betrayer.com dn: uid=bein,ou=devel,ou=software,ou=departments,dc=betrayer,dc=com uid: bbein uid: bein cn: Bernd Bein sn: Bein objectClass: inetOrgPerson objectClass: organizationalPerson objectClass: person objectClass: top # search result search: 2 result: 0 Success # numResponses: 2 # numEntries: 1","title":"All users with a uid attribute value starting with the letter \u201cb\u201d"},{"location":"ldap/filter-based-search/#all-entries-with-either-a-defined-uid-attribute-or-a-ou-attribute-starting-with-letter-d","text":"ldapsearch -x -D \"cn=admin,dc=betrayer,dc=com\" -W -b \"dc=betrayer,dc=com\" \"(|(uid=*)(ou=d*))\" Answer: # extended LDIF # # LDAPv3 # base <dc=example,dc=com> with scope subtree # filter: (uid=b*) # requesting: ALL # # search result search: 2 result: 32 No such object # numResponses: 1 root@sdi08a:~# ldapsearch -x -D \"cn=admin,dc=betrayer,dc=com\" -W -b \"dc=betrayer,dc=com\" \"(uid=b*)\" Enter LDAP Password: # extended LDIF # # LDAPv3 # base <dc=betrayer,dc=com> with scope subtree # filter: (uid=b*) # requesting: ALL # # bein, devel, software, departments, betrayer.com dn: uid=bein,ou=devel,ou=software,ou=departments,dc=betrayer,dc=com uid: bbein uid: bein cn: Bernd Bein sn: Bein objectClass: inetOrgPerson objectClass: organizationalPerson objectClass: person objectClass: top # search result search: 2 result: 0 Success # numResponses: 2 # numEntries: 1 root@sdi08a:~# ldapsearch -x -D \"cn=admin,dc=betrayer,dc=com\" -W -b \"dc=betrayer,dc=com\" \"(|(uid=*)(ou=d*))\" Enter LDAP Password: # extended LDIF # # LDAPv3 # base <dc=betrayer,dc=com> with scope subtree # filter: (|(uid=*)(ou=d*)) # requesting: ALL # # departments, betrayer.com dn: ou=departments,dc=betrayer,dc=com ou: departments objectClass: organizationalUnit objectClass: top # devel, software, departments, betrayer.com dn: ou=devel,ou=software,ou=departments,dc=betrayer,dc=com ou: devel objectClass: organizationalUnit objectClass: top # jsmith, devel, software, departments, betrayer.com dn: uid=jsmith,ou=devel,ou=software,ou=departments,dc=betrayer,dc=com objectClass: inetOrgPerson objectClass: organizationalPerson objectClass: person objectClass: top objectClass: posixAccount mail: john@smith.com sn: Smithy cn: John Smithy uid: jsmith uidNumber: 1001 gidNumber: 1001 homeDirectory: /home/jsmith # abean, devel, software, departments, betrayer.com dn: uid=abean,ou=devel,ou=software,ou=departments,dc=betrayer,dc=com uid: abean cn: Albert Bean sn: Bean objectClass: inetOrgPerson objectClass: organizationalPerson objectClass: person objectClass: top objectClass: posixAccount mail: albert@bean.com userPassword:: e1NNRDV9aHVZTzQwUSthNDFuY2JlbS90NWlxNUFMYU1Iaml3aTU= uidNumber: 1 gidNumber: 1 homeDirectory: /home/abean # bein, devel, software, departments, betrayer.com dn: uid=bein,ou=devel,ou=software,ou=departments,dc=betrayer,dc=com uid: bbein uid: bein cn: Bernd Bein sn: Bein objectClass: inetOrgPerson objectClass: organizationalPerson objectClass: person objectClass: top # search result search: 2 result: 0 Success # numResponses: 6 # numEntries: 5","title":"All entries with either a defined uid attribute or a ou attribute starting with letter \u201cd\u201d"},{"location":"ldap/filter-based-search/#all-users-entries-within-the-whole-dit-having-a-gidnumber-value-of-100","text":"ldapsearch -x -D \"cn=admin,dc=betrayer,dc=com\" -W -b \"dc=betrayer,dc=com\" \"(gidNumber=100)\" Our gid numbers start at 1000 so this should not return anything. Enter LDAP Password: # extended LDIF # # LDAPv3 # base <dc=betrayer,dc=com> with scope subtree # filter: (gidNumber=100) # requesting: ALL # # search result search: 2 result: 0 Success # numResponses: 1","title":"All users entries within the whole DIT having a gidNumber value of 100"},{"location":"ldap/filter-based-search/#all-user-entries-belonging-to-the-billing-department-having-a-uidnumber-value-greater-than-1023","text":"ldapsearch -x -D \"cn=admin,dc=betrayer,dc=com\" -W -b \"ou=billing,dc=betrayer,dc=com\" \"(uidNumber>=1023)\" We do not have a department billing so this search query cannot be resolved. Answer: Enter LDAP Password: # extended LDIF # # LDAPv3 # base <ou=billing,dc=betrayer,dc=com> with scope subtree # filter: (uidNumber>=1023) # requesting: ALL # # search result search: 2 result: 32 No such object matchedDN: dc=betrayer,dc=com # numResponses: 1","title":"All user entries belonging to the billing department having a uidNumber value greater than 1023"},{"location":"ldap/filter-based-search/#all-user-entries-within-the-whole-dit-having-a-commonname-containing-the-substring-ei","text":"ldapsearch -x -D \"cn=admin,dc=betrayer,dc=com\" -W -b \"dc=betrayer,dc=com\" \"(cn=*ei*)\" Answer: Enter LDAP Password: # extended LDIF # # LDAPv3 # base <dc=betrayer,dc=com> with scope subtree # filter: (cn=*ei*) # requesting: ALL # # bein, devel, software, departments, betrayer.com dn: uid=bein,ou=devel,ou=software,ou=departments,dc=betrayer,dc=com uid: bbein uid: bein cn: Bernd Bein sn: Bein objectClass: inetOrgPerson objectClass: organizationalPerson objectClass: person objectClass: top objectClass: posixAccount gidNumber: 1024 homeDirectory: /home/bbein uidNumber: 1024 # search result search: 2 result: 0 Success # numResponses: 2 # numEntries: 1","title":"All user entries within the whole DIT having a commonName containing the substring \u201cei\u201d"},{"location":"ldap/filter-based-search/#all-user-entries-within-the-whole-dit-belonging-to-gidnumber-100-or-having-a-uid-value-starting-with-letter-t","text":"ldapsearch -x -D \"cn=admin,dc=betrayer,dc=com\" -W -b \"dc=betrayer,dc=com\" \"(|(gidNumber=100)(uid=t*))\" Answer: Enter LDAP Password: # extended LDIF # # LDAPv3 # base <dc=betrayer,dc=com> with scope subtree # filter: (|(gidNumber=100)(uid=t*)) # requesting: ALL # # search result search: 2 result: 0 Success # numResponses: 1","title":"All user entries within the whole DIT belonging to gidNumber == 100 or having a uid value starting with letter \u201ct\u201d"},{"location":"ldap/filter-based-search/#references","text":"www.docs.oracle.com/cd/E19693-01/819-0997/auto45/index.html","title":"References"},{"location":"ldap/general/","text":"LDAP What is LDAP? LDAP is a common way to access directories. These directories hold info about resources from different systems and services in a distributed setup. It simplifies the management of user accounts, groups, and other directory-related data by providing a centralized platform for storing and accessing this information. F.e. when a user attempts to access a resource, they forward a request to the LDAP authentication server. This server then verifies the provided username-password combination against the directory data. Upon finding a match, it proceeds to confirm the user's authorization to access the requested resource. References www.ibm.com/docs/de/db2/10.5?topic=servers-lightweight-directory-access-protocol-ldap www.onelogin.com/learn/what-is-ldap#:~:text=When%20a%20user%20tries%20to,to%20access%20the%20requested%20resource.","title":"General"},{"location":"ldap/general/#ldap","text":"","title":"LDAP"},{"location":"ldap/general/#what-is-ldap","text":"LDAP is a common way to access directories. These directories hold info about resources from different systems and services in a distributed setup. It simplifies the management of user accounts, groups, and other directory-related data by providing a centralized platform for storing and accessing this information. F.e. when a user attempts to access a resource, they forward a request to the LDAP authentication server. This server then verifies the provided username-password combination against the directory data. Upon finding a match, it proceeds to confirm the user's authorization to access the requested resource.","title":"What is LDAP?"},{"location":"ldap/general/#references","text":"www.ibm.com/docs/de/db2/10.5?topic=servers-lightweight-directory-access-protocol-ldap www.onelogin.com/learn/what-is-ldap#:~:text=When%20a%20user%20tries%20to,to%20access%20the%20requested%20resource.","title":"References"},{"location":"ldap/mail-client/","text":"Accessing LDAP data by using a mail client We use Thunderbird as a mail client. LDAP with Thunderbird First you have to create a new LDAP address book in Thunderbird. To do this, proceed as follows: select the \"Address book\" button in the top menu bar in the address book manager, click on \"New --> LDAP address book\" In the next dialog, you must enter the parameters for the address book connection. In our case: Name: LDAP-Test Connection Server address: vm1.g8.sdi.mi.hdm-stuttgart.de Base DN: dc=betrayer,dc=com Port number: 389 Bind DN: uid=abean,ou=devel,ou=software,ou=departments,dc=betrayer,dc=com After saving, the address book should be available in the list. You can now perform a search, for example, by surname or e-mail address. You must also enter your password so that the search can be carried out on the server. This serves to protect the address book so that data cannot be accessed by unauthorized persons.","title":"Accessing LDAP data by using a mail client"},{"location":"ldap/mail-client/#accessing-ldap-data-by-using-a-mail-client","text":"We use Thunderbird as a mail client.","title":"Accessing LDAP data by using a mail client"},{"location":"ldap/mail-client/#ldap-with-thunderbird","text":"First you have to create a new LDAP address book in Thunderbird. To do this, proceed as follows: select the \"Address book\" button in the top menu bar in the address book manager, click on \"New --> LDAP address book\" In the next dialog, you must enter the parameters for the address book connection. In our case: Name: LDAP-Test Connection Server address: vm1.g8.sdi.mi.hdm-stuttgart.de Base DN: dc=betrayer,dc=com Port number: 389 Bind DN: uid=abean,ou=devel,ou=software,ou=departments,dc=betrayer,dc=com After saving, the address book should be available in the list. You can now perform a search, for example, by surname or e-mail address. You must also enter your password so that the search can be carried out on the server. This serves to protect the address book so that data cannot be accessed by unauthorized persons.","title":"LDAP with Thunderbird"},{"location":"ldap/populating/","text":"Populating your DIT We can use Apache Directory Studio to populate our DIT . We can create a new entry by right clicking on dc=betrayer,dc=com . Then choose New Entry . In the first step you can choose Create entry from scratch . For the available object classes please choose organizationalUnit . The object class top should have been generated automatically. The third step is to configure a distinguished name. As a parent choose your upper layer (for example for ou=departments, the upper layer is dc=betrayer,dc=com). Then you can complete these steps by clicking finish . We use the same DIT as suggested in the freedocs . After successfully setting up all organizational units we can implement inetOrgPerson . Exporting the ldap tree We can create a dumb of the ldap tree by using the following command: /etc/ldap# ldapsearch -x -H ldap://vm1.g8.sdi.mi.hdm-stuttgart.de -D \"cn=admin,dc=betrayer,dc=com\" -W -b \"dc=betrayer,dc=com\" -s sub > ldap_export.ldif The dumb should look like: LDAPv3 # base <dc=betrayer,dc=com> with scope subtree # filter: (objectclass=*) # requesting: ALL # # betrayer.com dn: dc=betrayer,dc=com objectClass: top objectClass: dcObject objectClass: organization o: betrayer.com dc: betrayer # departments, betrayer.com dn: ou=departments,dc=betrayer,dc=com ou: departments objectClass: organizationalUnit objectClass: top # software, departments, betrayer.com dn: ou=software,ou=departments,dc=betrayer,dc=com ou: software objectClass: organizationalUnit objectClass: top # devel, software, departments, betrayer.com dn: ou=devel,ou=software,ou=departments,dc=betrayer,dc=com ou: devel objectClass: organizationalUnit objectClass: top # testing, software, departments, betrayer.com dn: ou=testing,ou=software,ou=departments,dc=betrayer,dc=com ou: testing objectClass: organizationalUnit objectClass: top # financial, departments, betrayer.com dn: ou=financial,ou=departments,dc=betrayer,dc=com ou: financial objectClass: organizationalUnit objectClass: top # jsmith, devel, software, departments, betrayer.com dn: uid=jsmith,ou=devel,ou=software,ou=departments,dc=betrayer,dc=com uid: jsmith sn: Smith objectClass: inetOrgPerson objectClass: organizationalPerson objectClass: person objectClass: top cn: John Smith mail: john@smith.com # abean, devel, software, departments, betrayer.com dn: uid=abean,ou=devel,ou=software,ou=departments,dc=betrayer,dc=com uid: abean cn: Albert Bean sn: Bean objectClass: inetOrgPerson objectClass: organizationalPerson objectClass: person objectClass: top mail: albert@bean.com # search result search: 2 result: 0 Success # numResponses: 9 # numEntries: 8 References www.serverfault.com/questions/164519/how-to-copy-a-ldap-entry-and-all-the-subtree-on-a-linux-openldap-server","title":"Populating your DIT"},{"location":"ldap/populating/#populating-your-dit","text":"We can use Apache Directory Studio to populate our DIT . We can create a new entry by right clicking on dc=betrayer,dc=com . Then choose New Entry . In the first step you can choose Create entry from scratch . For the available object classes please choose organizationalUnit . The object class top should have been generated automatically. The third step is to configure a distinguished name. As a parent choose your upper layer (for example for ou=departments, the upper layer is dc=betrayer,dc=com). Then you can complete these steps by clicking finish . We use the same DIT as suggested in the freedocs . After successfully setting up all organizational units we can implement inetOrgPerson .","title":"Populating your DIT"},{"location":"ldap/populating/#exporting-the-ldap-tree","text":"We can create a dumb of the ldap tree by using the following command: /etc/ldap# ldapsearch -x -H ldap://vm1.g8.sdi.mi.hdm-stuttgart.de -D \"cn=admin,dc=betrayer,dc=com\" -W -b \"dc=betrayer,dc=com\" -s sub > ldap_export.ldif The dumb should look like: LDAPv3 # base <dc=betrayer,dc=com> with scope subtree # filter: (objectclass=*) # requesting: ALL # # betrayer.com dn: dc=betrayer,dc=com objectClass: top objectClass: dcObject objectClass: organization o: betrayer.com dc: betrayer # departments, betrayer.com dn: ou=departments,dc=betrayer,dc=com ou: departments objectClass: organizationalUnit objectClass: top # software, departments, betrayer.com dn: ou=software,ou=departments,dc=betrayer,dc=com ou: software objectClass: organizationalUnit objectClass: top # devel, software, departments, betrayer.com dn: ou=devel,ou=software,ou=departments,dc=betrayer,dc=com ou: devel objectClass: organizationalUnit objectClass: top # testing, software, departments, betrayer.com dn: ou=testing,ou=software,ou=departments,dc=betrayer,dc=com ou: testing objectClass: organizationalUnit objectClass: top # financial, departments, betrayer.com dn: ou=financial,ou=departments,dc=betrayer,dc=com ou: financial objectClass: organizationalUnit objectClass: top # jsmith, devel, software, departments, betrayer.com dn: uid=jsmith,ou=devel,ou=software,ou=departments,dc=betrayer,dc=com uid: jsmith sn: Smith objectClass: inetOrgPerson objectClass: organizationalPerson objectClass: person objectClass: top cn: John Smith mail: john@smith.com # abean, devel, software, departments, betrayer.com dn: uid=abean,ou=devel,ou=software,ou=departments,dc=betrayer,dc=com uid: abean cn: Albert Bean sn: Bean objectClass: inetOrgPerson objectClass: organizationalPerson objectClass: person objectClass: top mail: albert@bean.com # search result search: 2 result: 0 Success # numResponses: 9 # numEntries: 8","title":"Exporting the ldap tree"},{"location":"ldap/populating/#references","text":"www.serverfault.com/questions/164519/how-to-copy-a-ldap-entry-and-all-the-subtree-on-a-linux-openldap-server","title":"References"},{"location":"ldap/set-up/","text":"Set up an OpenLdap server How to setup and configure an OpenLdap server First step in installing and setting up an OpenLdap server is to install slapd with the command: apt install slapd ldap-utils In our installation we need to reconfigure slapd with dpkg-reconfigure . dpkg-reconfigure slapd First option: We need a start configuration for the database. Therefore we click on No . Second option: The DNS domain name is used to generate the base DN of your LDAP directory. We use betrayer.com , so our base DN will be dc=betrayer, dc=com We set the name of our organization to betrayer.com . Third option: Now we can choose a password for the administrator LDAP-directory. Fourth option: We want to store the database when it's deleted so we choose yes . Fifth option: We also move the old database with yes . As a result we get: Backing up /etc/ldap/slapd.d in /var/backups/slapd-2.5.13+dfsg-5... done. Moving old database directory to /var/backups: - directory unknown... done. Creating initial configuration... done. Creating LDAP directory... done. root@sdi08a:~# dpkg-reconfigure slapd Omitting slapd configuration as requested. root@sdi08a:~# dpkg-reconfigure slapd Omitting slapd configuration as requested. root@sdi08a:~# dpkg-reconfigure slapd Backing up /etc/ldap/slapd.d in /var/backups/slapd-2.5.13+dfsg-5... done. Moving old database directory to /var/backups: - directory unknown... done. Creating initial configuration... done. Creating LDAP directory... done. The LDAP server is configured. We tested the connection using Apache Directory Studio. As a host name we used vm1.g8.sdi.mi.hdm-stuttgart.de. We do not use an encryption method because we do not have a valid certificate. For authentication we use simple authentication. The string dc=betrayer,dc=com is the \"domain\" for the LDAP tree. Since we have registered the admin with the password in the slapd config we can use cn=admin to authenticate. References www.ubuntu.com/server/docs/service-ldap","title":"Installing and configuring OpenLDAP"},{"location":"ldap/set-up/#set-up-an-openldap-server","text":"","title":"Set up an OpenLdap server"},{"location":"ldap/set-up/#how-to-setup-and-configure-an-openldap-server","text":"First step in installing and setting up an OpenLdap server is to install slapd with the command: apt install slapd ldap-utils In our installation we need to reconfigure slapd with dpkg-reconfigure . dpkg-reconfigure slapd First option: We need a start configuration for the database. Therefore we click on No . Second option: The DNS domain name is used to generate the base DN of your LDAP directory. We use betrayer.com , so our base DN will be dc=betrayer, dc=com We set the name of our organization to betrayer.com . Third option: Now we can choose a password for the administrator LDAP-directory. Fourth option: We want to store the database when it's deleted so we choose yes . Fifth option: We also move the old database with yes . As a result we get: Backing up /etc/ldap/slapd.d in /var/backups/slapd-2.5.13+dfsg-5... done. Moving old database directory to /var/backups: - directory unknown... done. Creating initial configuration... done. Creating LDAP directory... done. root@sdi08a:~# dpkg-reconfigure slapd Omitting slapd configuration as requested. root@sdi08a:~# dpkg-reconfigure slapd Omitting slapd configuration as requested. root@sdi08a:~# dpkg-reconfigure slapd Backing up /etc/ldap/slapd.d in /var/backups/slapd-2.5.13+dfsg-5... done. Moving old database directory to /var/backups: - directory unknown... done. Creating initial configuration... done. Creating LDAP directory... done. The LDAP server is configured. We tested the connection using Apache Directory Studio. As a host name we used vm1.g8.sdi.mi.hdm-stuttgart.de. We do not use an encryption method because we do not have a valid certificate. For authentication we use simple authentication. The string dc=betrayer,dc=com is the \"domain\" for the LDAP tree. Since we have registered the admin with the password in the slapd config we can use cn=admin to authenticate.","title":"How to setup and configure an OpenLdap server"},{"location":"ldap/set-up/#references","text":"www.ubuntu.com/server/docs/service-ldap","title":"References"},{"location":"ldap/testing-bind-operation/","text":"Testing a bind operation as non-admin user We use Apache Directory Studio for these steps. As in the previous chapters, you should already be logged in with a LDAP connection. Supply a userPassword First step is to set a password. We can achieve this by right clicking on the side uid, for example, uid=abean . You can select New Attribute on the top bar and choose as a attribute type userPassword from the selectable. Select a new password and a suitable hash method for encrypting the password. We used for example SMD5 . Important: Some password hash types may not be supported. We used SHA beforehand and the configuration did not work. Configure a second connection for a user To configure a second connection click on LDAP / New Connection . We name it for example LDAP Server abean . Use the correct password and the correct binding parameters. For our user uid=abean we had to use: uid=abean,ou=devel,ou=software,ou=departments,dc=betrayer,dc=com","title":"Testing a bind operation as non-admin user"},{"location":"ldap/testing-bind-operation/#testing-a-bind-operation-as-non-admin-user","text":"We use Apache Directory Studio for these steps. As in the previous chapters, you should already be logged in with a LDAP connection.","title":"Testing a bind operation as non-admin user"},{"location":"ldap/testing-bind-operation/#supply-a-userpassword","text":"First step is to set a password. We can achieve this by right clicking on the side uid, for example, uid=abean . You can select New Attribute on the top bar and choose as a attribute type userPassword from the selectable. Select a new password and a suitable hash method for encrypting the password. We used for example SMD5 . Important: Some password hash types may not be supported. We used SHA beforehand and the configuration did not work.","title":"Supply a userPassword"},{"location":"ldap/testing-bind-operation/#configure-a-second-connection-for-a-user","text":"To configure a second connection click on LDAP / New Connection . We name it for example LDAP Server abean . Use the correct password and the correct binding parameters. For our user uid=abean we had to use: uid=abean,ou=devel,ou=software,ou=departments,dc=betrayer,dc=com","title":"Configure a second connection for a user"},{"location":"ldap/user-login/","text":"LDAP based user login Prerequisites We want to use our second virtual machine to authenticate against our previously configured LDAP server (as discussed in the previous chapter). To achieve this, we'll install an LDAP client. However, it's crucial to exercise caution when modifying the PAM configuration. Pluggable Authentication Modules ( PAM ) is an integrated UNIX login framework used by system components to authenticate users when logging into a UNIX system. Making a backup of the PAM config To create a backup, we used the following commands: tar zcf /root/pam.tgz /etc/pam.conf /etc/pam.d tar - tape archiver: this command is being used to archive data on linux system .tgz - is an archive data format We can check if the archive was built correctly by listing the contents of the compressed archive. It should show something like this: tar ztf /root/pam.tgz pam.conf pam.d/ pam.d/common-auth pam.d/cron pam.d/newusers pam.d/passwd pam.d/login pam.d/su-l pam.d/sshd pam.d/chpasswd pam.d/common-password pam.d/other pam.d/chfn pam.d/chsh pam.d/common-session-noninteractive pam.d/su pam.d/common-account pam.d/common-session pam.d/runuser pam.d/runuser-l In case we failed to configure and therefore not being able to log in anymore we can always restore the working configuration like this: mv /etc/pam.d /etc/pam.d.orig mv /etc/pam.conf /etc/pam.conf.orig tar zxf /root/pam.tgz Important: Now it's time to open a second shell. In case of emergency this means that we accidentally log out of the server. In that case we unfortunately would not be able to log in again. Configuration of the LDAP Client First we check whether the domain name is also resolved by our LDAP server. We can either ping the name directly to see if we get an answer or create an entry with the IP address under /etc/hosts. for example like this: nano /etc/hosts 141.62.75.108 vm1.g8.sdi.mi.hdm-stuttgart.de For installing the LDAP client we use the exact instructions like in this one here www.computingforgeeks.com/how-to-configure-ubuntu-as-ldap-client/ References www.ibm.com/docs/de/netcoolomnibus/8.1?topic=authentication-pam-unix-linux wiki.ubuntuusers.de/tar/ computingforgeeks.com/how-to-configure-ubuntu-as-ldap-client/","title":"LDAP based user login"},{"location":"ldap/user-login/#ldap-based-user-login","text":"","title":"LDAP based user login"},{"location":"ldap/user-login/#prerequisites","text":"We want to use our second virtual machine to authenticate against our previously configured LDAP server (as discussed in the previous chapter). To achieve this, we'll install an LDAP client. However, it's crucial to exercise caution when modifying the PAM configuration. Pluggable Authentication Modules ( PAM ) is an integrated UNIX login framework used by system components to authenticate users when logging into a UNIX system.","title":"Prerequisites"},{"location":"ldap/user-login/#making-a-backup-of-the-pam-config","text":"To create a backup, we used the following commands: tar zcf /root/pam.tgz /etc/pam.conf /etc/pam.d tar - tape archiver: this command is being used to archive data on linux system .tgz - is an archive data format We can check if the archive was built correctly by listing the contents of the compressed archive. It should show something like this: tar ztf /root/pam.tgz pam.conf pam.d/ pam.d/common-auth pam.d/cron pam.d/newusers pam.d/passwd pam.d/login pam.d/su-l pam.d/sshd pam.d/chpasswd pam.d/common-password pam.d/other pam.d/chfn pam.d/chsh pam.d/common-session-noninteractive pam.d/su pam.d/common-account pam.d/common-session pam.d/runuser pam.d/runuser-l In case we failed to configure and therefore not being able to log in anymore we can always restore the working configuration like this: mv /etc/pam.d /etc/pam.d.orig mv /etc/pam.conf /etc/pam.conf.orig tar zxf /root/pam.tgz Important: Now it's time to open a second shell. In case of emergency this means that we accidentally log out of the server. In that case we unfortunately would not be able to log in again.","title":"Making a backup of the PAM config"},{"location":"ldap/user-login/#configuration-of-the-ldap-client","text":"First we check whether the domain name is also resolved by our LDAP server. We can either ping the name directly to see if we get an answer or create an entry with the IP address under /etc/hosts. for example like this: nano /etc/hosts 141.62.75.108 vm1.g8.sdi.mi.hdm-stuttgart.de For installing the LDAP client we use the exact instructions like in this one here www.computingforgeeks.com/how-to-configure-ubuntu-as-ldap-client/","title":"Configuration of the LDAP Client"},{"location":"ldap/user-login/#references","text":"www.ibm.com/docs/de/netcoolomnibus/8.1?topic=authentication-pam-unix-linux wiki.ubuntuusers.de/tar/ computingforgeeks.com/how-to-configure-ubuntu-as-ldap-client/","title":"References"}]}