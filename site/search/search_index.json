{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Home"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"acronyms/","text":"Acronyms DNS = Domain Name Server IP = Internet Protocol URL = Uniform Resource Locator dig = Domain information grouper CNAME = Canonical name A = Address AAAA = IPv6 Address MX = Mail Exchange NS = Name Server PTR = Pointer SOA = Start of Authority BIND = Berkeley Internet Name Domain arpa = address and routing parameters DNSSEC = Domain Name System Security Extensions ISP = Internet Service Provider SMTP = Simple Mail Transfer Protocol LDAP = Lightweight Directory Access Protocol slapd = Stand-alone LDAP Daemon DIT = Directory Information Tree HMAC = Hash Message Authentication Code TTL = Time To Live LDIF = LDAP Data Interchange Format PAM = Pluggable Authentication Modules","title":"Acronyms"},{"location":"acronyms/#acronyms","text":"DNS = Domain Name Server IP = Internet Protocol URL = Uniform Resource Locator dig = Domain information grouper CNAME = Canonical name A = Address AAAA = IPv6 Address MX = Mail Exchange NS = Name Server PTR = Pointer SOA = Start of Authority BIND = Berkeley Internet Name Domain arpa = address and routing parameters DNSSEC = Domain Name System Security Extensions ISP = Internet Service Provider SMTP = Simple Mail Transfer Protocol LDAP = Lightweight Directory Access Protocol slapd = Stand-alone LDAP Daemon DIT = Directory Information Tree HMAC = Hash Message Authentication Code TTL = Time To Live LDIF = LDAP Data Interchange Format PAM = Pluggable Authentication Modules","title":"Acronyms"},{"location":"apache/first-steps/","text":"First Steps To install our server we need the latest version of Apache. We can install the version with the following command: aptitude install apache2 Apache will automatically show a default page if the package has been installed correctly. Since we have already entered our VM in the previous DNS task, we can call it globally and see the default page. We have moved the index.html file which was located in the path /var/www/html to the root folder. When reloading the web page again, a new default page appears. It shows the Apache and Linux version (fig.1). We can now host our own index.html page with the following content: <!DOCTYPE html> <html> <head> <title>Hello World.</title> </head> <body> <p>Hello World.</p> </body> </html> When moving it to the folder /var/www/html and reloading the browser, we can finally see our own website. To examine the output that you get with the dpkg command we can do the following: dpkg -L apache2-doc > files.txt This will save the output to a files.txt -file. This way we can examine the whole output. Without doing so, it would be not possible to see everything within your console. We get the following output: /. /etc /etc/apache2 /etc/apache2/conf-available /etc/apache2/conf-available/apache2-doc.conf /usr /usr/share /usr/share/doc /usr/share/doc/apache2 /usr/share/doc/apache2/examples ... When taking a close look on the output you can find a conf-available file. Within this file you will find an Alias that looks like this: Alias /manual /usr/share/doc/apache2-doc/manual This directive tells Apache where to serve the documentation files from in the URL path. If the configuration is not already enabled, use the a2enconf command to enable it, and then restart Apache: a2enconf apache2-doc systemctl restart apache2 Now you should be able to access the manuals on your-url.de/manual In order to upload and access our sdi-docs with a browser client, we can use scp with the following command scp -r site/ root@sdi08a.mi.hdm-stuttgart.de:/home/Sdidoc . This uploads the docs to our machine. Now we can adjust the apache configuration with: The DocumentRoot should be named: /home/Sdidoc/site Add the following lines to set permissions for apache to enter /home/...: ssh <Directory /home/sdidoc> Options Indexes FollowSymLinks AllowOverride None Require all granted </Directory> Furthermore we have to set the permissions on our server with the following commands: chown -R www-data:www-data /home/Sdidoc/site chmod -R 755 /home/Sdidoc/site Restart the apache server with: systemctl restart apache2 Configure an Alias to be able to access the docs via .../xy001 . In our case we added this line: Alias /fw061 /home/Sdidoc/site Our apache config file looks like this in the end: <VirtualHost *:80> # The ServerName directive sets the request scheme, hostname and port that # the server uses to identify itself. This is used when creating # redirection URLs. In the context of virtual hosts, the ServerName # specifies what hostname must appear in the request's Host: header to # match this virtual host. For the default virtual host (this file) this # value is not decisive as it is used as a last resort host regardless. # However, you must set it for any further virtual host explicitly. #ServerName www.example.com ServerAdmin webmaster@localhost DocumentRoot /var/www/html Alias /fw061 /home/Sdidoc/site <Directory /home/Sdidoc/site> Options Indexes FollowSymLinks AllowOverride None Require all granted </Directory> # Available loglevels: trace8, ..., trace1, debug, info, notice, warn, # error, crit, alert, emerg. # It is also possible to configure the loglevel for particular # modules, e.g. #LogLevel info ssl:warn ErrorLog ${APACHE_LOG_DIR}/error.log CustomLog ${APACHE_LOG_DIR}/access.log combined # For most configuration files from conf-available/, which are # enabled or disabled at a global level, it is possible to # include a line for only one particular virtual host. For example the # following line enables the CGI configuration for this host only # after it has been globally disabled with \"a2disconf\". #Include conf-available/serve-cgi-bin.conf </VirtualHost>","title":"First Steps"},{"location":"apache/first-steps/#first-steps","text":"To install our server we need the latest version of Apache. We can install the version with the following command: aptitude install apache2 Apache will automatically show a default page if the package has been installed correctly. Since we have already entered our VM in the previous DNS task, we can call it globally and see the default page. We have moved the index.html file which was located in the path /var/www/html to the root folder. When reloading the web page again, a new default page appears. It shows the Apache and Linux version (fig.1). We can now host our own index.html page with the following content: <!DOCTYPE html> <html> <head> <title>Hello World.</title> </head> <body> <p>Hello World.</p> </body> </html> When moving it to the folder /var/www/html and reloading the browser, we can finally see our own website. To examine the output that you get with the dpkg command we can do the following: dpkg -L apache2-doc > files.txt This will save the output to a files.txt -file. This way we can examine the whole output. Without doing so, it would be not possible to see everything within your console. We get the following output: /. /etc /etc/apache2 /etc/apache2/conf-available /etc/apache2/conf-available/apache2-doc.conf /usr /usr/share /usr/share/doc /usr/share/doc/apache2 /usr/share/doc/apache2/examples ... When taking a close look on the output you can find a conf-available file. Within this file you will find an Alias that looks like this: Alias /manual /usr/share/doc/apache2-doc/manual This directive tells Apache where to serve the documentation files from in the URL path. If the configuration is not already enabled, use the a2enconf command to enable it, and then restart Apache: a2enconf apache2-doc systemctl restart apache2 Now you should be able to access the manuals on your-url.de/manual In order to upload and access our sdi-docs with a browser client, we can use scp with the following command scp -r site/ root@sdi08a.mi.hdm-stuttgart.de:/home/Sdidoc . This uploads the docs to our machine. Now we can adjust the apache configuration with: The DocumentRoot should be named: /home/Sdidoc/site Add the following lines to set permissions for apache to enter /home/...: ssh <Directory /home/sdidoc> Options Indexes FollowSymLinks AllowOverride None Require all granted </Directory> Furthermore we have to set the permissions on our server with the following commands: chown -R www-data:www-data /home/Sdidoc/site chmod -R 755 /home/Sdidoc/site Restart the apache server with: systemctl restart apache2 Configure an Alias to be able to access the docs via .../xy001 . In our case we added this line: Alias /fw061 /home/Sdidoc/site Our apache config file looks like this in the end: <VirtualHost *:80> # The ServerName directive sets the request scheme, hostname and port that # the server uses to identify itself. This is used when creating # redirection URLs. In the context of virtual hosts, the ServerName # specifies what hostname must appear in the request's Host: header to # match this virtual host. For the default virtual host (this file) this # value is not decisive as it is used as a last resort host regardless. # However, you must set it for any further virtual host explicitly. #ServerName www.example.com ServerAdmin webmaster@localhost DocumentRoot /var/www/html Alias /fw061 /home/Sdidoc/site <Directory /home/Sdidoc/site> Options Indexes FollowSymLinks AllowOverride None Require all granted </Directory> # Available loglevels: trace8, ..., trace1, debug, info, notice, warn, # error, crit, alert, emerg. # It is also possible to configure the loglevel for particular # modules, e.g. #LogLevel info ssl:warn ErrorLog ${APACHE_LOG_DIR}/error.log CustomLog ${APACHE_LOG_DIR}/access.log combined # For most configuration files from conf-available/, which are # enabled or disabled at a global level, it is possible to # include a line for only one particular virtual host. For example the # following line enables the CGI configuration for this host only # after it has been globally disabled with \"a2disconf\". #Include conf-available/serve-cgi-bin.conf </VirtualHost>","title":"First Steps"},{"location":"apache/general/","text":"Apache Web Server What is an Apache Web Server?","title":"General"},{"location":"apache/general/#apache-web-server","text":"","title":"Apache Web Server"},{"location":"apache/general/#what-is-an-apache-web-server","text":"","title":"What is an Apache Web Server?"},{"location":"dns/bind/","text":"Installing and configuring Bind What is bind? BIND can function as both an authoritative DNS server for a zone and a DNS resolver simultaneously. It is open source and commonly used for hosting authoritative DNS servers. Setup Update apt and install the bind service: apt update apt install bind9 bind9utils bind9-doc To check whether the installation was successful run the following command: named -v Check whether the system is active and running: systemctl status bind9 Adjust the bind configurations Edit the file to disable recursion. nano /etc/bind/named.conf.options Add the following lines to the named.conf.options file: // hide version number from clients for security reasons. version \"not currently available\"; // disable recursion on authoritative DNS server. recursion no; // enable the query log querylog yes; // disallow zone transfer allow-transfer { none; }; Restart bind to confirm the set options: systemctl restart bind9 To configure zones edit the following file: nano /etc/bind/named.conf.local Add the following parameters: zone \"g8.sdia.sdi.mi.hdm-stuttgart.de\" { type master; file \"/etc/bind/Zones/db.g8.sdia.sdi.mi.hdm-stuttgart.de\"; allow-query { any; }; }; Edit the following Zone file which is located in the created Zones folder $TTL 86400 ; Time-to-live for the zone (1 day) $ORIGIN g8.sdi.mi.hdm-stuttgart.de. @ IN SOA vm1.g8.sdi.mi.hdm-stuttgart.de. admin.g8.sdi.mi.hdm-stuttgart.de. ( 2023110701 ; Serial number (YYYYMMDD##) 86400 ; Refresh (1 day) 7200 ; Retry (2 hours) 604800 ; Expire (1 week) 86400 ) ; Minimum TTL (1 day) ; Name Servers IN NS vm1 ; Hosts vm1 IN A 141.62.75.108 vm2 IN A 141.62.75.122 www IN CNAME vm1 cloud IN CNAME vm2 To test the configuration, we can dig one of the the local machines with the ip of the nameserver dig @141.62.75.108 vm2.g8.sdi.mi.hdm-stuttgart.de A +short The following output is showing: 141.62.75.122 This is the IP adress of our second virtual machine. This displays the record is working. References isc.org/bind/ linuxbabe.com/debian/authoritative-dns-server-debian-10-buster-bind9","title":"Installing and configuring Bind"},{"location":"dns/bind/#installing-and-configuring-bind","text":"","title":"Installing and configuring Bind"},{"location":"dns/bind/#what-is-bind","text":"BIND can function as both an authoritative DNS server for a zone and a DNS resolver simultaneously. It is open source and commonly used for hosting authoritative DNS servers.","title":"What is bind?"},{"location":"dns/bind/#setup","text":"Update apt and install the bind service: apt update apt install bind9 bind9utils bind9-doc To check whether the installation was successful run the following command: named -v Check whether the system is active and running: systemctl status bind9","title":"Setup"},{"location":"dns/bind/#adjust-the-bind-configurations","text":"Edit the file to disable recursion. nano /etc/bind/named.conf.options Add the following lines to the named.conf.options file: // hide version number from clients for security reasons. version \"not currently available\"; // disable recursion on authoritative DNS server. recursion no; // enable the query log querylog yes; // disallow zone transfer allow-transfer { none; }; Restart bind to confirm the set options: systemctl restart bind9 To configure zones edit the following file: nano /etc/bind/named.conf.local Add the following parameters: zone \"g8.sdia.sdi.mi.hdm-stuttgart.de\" { type master; file \"/etc/bind/Zones/db.g8.sdia.sdi.mi.hdm-stuttgart.de\"; allow-query { any; }; }; Edit the following Zone file which is located in the created Zones folder $TTL 86400 ; Time-to-live for the zone (1 day) $ORIGIN g8.sdi.mi.hdm-stuttgart.de. @ IN SOA vm1.g8.sdi.mi.hdm-stuttgart.de. admin.g8.sdi.mi.hdm-stuttgart.de. ( 2023110701 ; Serial number (YYYYMMDD##) 86400 ; Refresh (1 day) 7200 ; Retry (2 hours) 604800 ; Expire (1 week) 86400 ) ; Minimum TTL (1 day) ; Name Servers IN NS vm1 ; Hosts vm1 IN A 141.62.75.108 vm2 IN A 141.62.75.122 www IN CNAME vm1 cloud IN CNAME vm2 To test the configuration, we can dig one of the the local machines with the ip of the nameserver dig @141.62.75.108 vm2.g8.sdi.mi.hdm-stuttgart.de A +short The following output is showing: 141.62.75.122 This is the IP adress of our second virtual machine. This displays the record is working.","title":"Adjust the bind configurations"},{"location":"dns/bind/#references","text":"isc.org/bind/ linuxbabe.com/debian/authoritative-dns-server-debian-10-buster-bind9","title":"References"},{"location":"dns/dig/","text":"Querying DNS data What is dig? dig is a programm/command that is mainly used to analyse and check DNS servers and query information from it. It has the following syntax: dig [@Server] [Domain] [Type] [-x IP-Address] The server is not necessary, when you only want general DNS information for an address (see examples above). Example CNAME Record root@sdi08b:~# dig www.natan-cafeandbar.com CNAME +short natan-cafeandbar.com. A Record root@sdi08b:~# dig www.natan-cafeandbar.com A +short natan-cafeandbar.com. 81.169.145.70 MX Record root@sdi08b:~# dig www.natan-cafeandbar.com MX +short natan-cafeandbar.com. 100 alt3.aspmx.l.google.com. 200 alt2.aspmx.l.google.com. 20 alt1.aspmx.l.google.com. 10 aspmx.l.google.com. NS Record root@sdi08b:~# dig www.natan-cafeandbar.com NS +short natan-cafeandbar.com. shades20.rzone.de. docks02.rzone.de. Reverse Lookup root@sdi08b:~# dig -x 81.169.145.70 +short w06.rzone.de. References wiki.ubuntuusers.de/dig/","title":"Querying DNS data"},{"location":"dns/dig/#querying-dns-data","text":"","title":"Querying DNS data"},{"location":"dns/dig/#what-is-dig","text":"dig is a programm/command that is mainly used to analyse and check DNS servers and query information from it. It has the following syntax: dig [@Server] [Domain] [Type] [-x IP-Address] The server is not necessary, when you only want general DNS information for an address (see examples above).","title":"What is dig?"},{"location":"dns/dig/#example","text":"CNAME Record root@sdi08b:~# dig www.natan-cafeandbar.com CNAME +short natan-cafeandbar.com. A Record root@sdi08b:~# dig www.natan-cafeandbar.com A +short natan-cafeandbar.com. 81.169.145.70 MX Record root@sdi08b:~# dig www.natan-cafeandbar.com MX +short natan-cafeandbar.com. 100 alt3.aspmx.l.google.com. 200 alt2.aspmx.l.google.com. 20 alt1.aspmx.l.google.com. 10 aspmx.l.google.com. NS Record root@sdi08b:~# dig www.natan-cafeandbar.com NS +short natan-cafeandbar.com. shades20.rzone.de. docks02.rzone.de. Reverse Lookup root@sdi08b:~# dig -x 81.169.145.70 +short w06.rzone.de.","title":"Example"},{"location":"dns/dig/#references","text":"wiki.ubuntuusers.de/dig/","title":"References"},{"location":"dns/forwarders/","text":"Forwarders What are DNS forwarders? If you do not want to send DNS queries to the root server, you can configure Bind in forwarder mode. It then forwards queries to other DNS servers (e.g. from the ISP ). A new forwarders block is created in the options block for this purpose. For Example If we want to dig a DNS query from outside of our server the following error message is shown: dig @141.62.75.108 w3.org A +short ;; communications error to 141.62.75.108#53: timed out When the DNS server is not configured with a forwarder, it might be trying to perform a recursive query itself, which can lead to timeouts if it's unable to resolve the query within a reasonable time frame. This is why we need to configure a forwarder. How to configure a forwarder? In order to configure our DNS forwarder we can add the following parameters to the named.config.options (/etc/bind/named.config.options) file. options { ... forwarders { 8.8.8.8; }; forward only; ... }; ... forwarders { 8.8.8.8; }; ... A list of IP addresses that the system is forwarding to. 8.8.8.8 is the Google server. ... forwarders { 8.8.8.8; }; ... Forward only means that all external queries by default are being forwarded. service bind9 restart; Make sure to restart or reload your DNS server after making changes to the configuration to apply the new settings. dig @141.62.75.108 w3.org A +short 104.18.23.19 When digging the same configuration again we can see the forwarded resolution: References digitalocean.com/community/tutorials/how-to-configure-bind-as-a-caching-or-forwarding-dns-server-on-ubuntu-14-04#configure-as-a-forwarding-dns-server powerdmarc.com/what-is-dns-forwarding/ wiki.ubuntuusers.de/DNS-Server_Bind/","title":"Forwarders"},{"location":"dns/forwarders/#forwarders","text":"","title":"Forwarders"},{"location":"dns/forwarders/#what-are-dns-forwarders","text":"If you do not want to send DNS queries to the root server, you can configure Bind in forwarder mode. It then forwards queries to other DNS servers (e.g. from the ISP ). A new forwarders block is created in the options block for this purpose.","title":"What are DNS forwarders?"},{"location":"dns/forwarders/#for-example","text":"If we want to dig a DNS query from outside of our server the following error message is shown: dig @141.62.75.108 w3.org A +short ;; communications error to 141.62.75.108#53: timed out When the DNS server is not configured with a forwarder, it might be trying to perform a recursive query itself, which can lead to timeouts if it's unable to resolve the query within a reasonable time frame. This is why we need to configure a forwarder.","title":"For Example"},{"location":"dns/forwarders/#how-to-configure-a-forwarder","text":"In order to configure our DNS forwarder we can add the following parameters to the named.config.options (/etc/bind/named.config.options) file. options { ... forwarders { 8.8.8.8; }; forward only; ... }; ... forwarders { 8.8.8.8; }; ... A list of IP addresses that the system is forwarding to. 8.8.8.8 is the Google server. ... forwarders { 8.8.8.8; }; ... Forward only means that all external queries by default are being forwarded. service bind9 restart; Make sure to restart or reload your DNS server after making changes to the configuration to apply the new settings. dig @141.62.75.108 w3.org A +short 104.18.23.19 When digging the same configuration again we can see the forwarded resolution:","title":"How to configure a forwarder?"},{"location":"dns/forwarders/#references","text":"digitalocean.com/community/tutorials/how-to-configure-bind-as-a-caching-or-forwarding-dns-server-on-ubuntu-14-04#configure-as-a-forwarding-dns-server powerdmarc.com/what-is-dns-forwarding/ wiki.ubuntuusers.de/DNS-Server_Bind/","title":"References"},{"location":"dns/general/","text":"DNS What is DNS? DNS , or the Domain Name System, is a hierarchical and distributed naming system that is fundamental to the functioning of the Internet. It serves as a translator between human-readable domain names and numerical IP addresses. It is indispencible for accessing services on the internet. Only with the DNS can an internet user access a website by entering a URL or send an email with a domain ending (e.g. @hdm-stuttgart.de). How does DNS work? DNS works through a hirahierarchical, distributed order. A user enters an URL (e.g., www.beispieldomain.de) into a web browser. (When cache is not empty) The user's device checks its local DNS resolver (typically provided by the Internet Service Provider or configured manually). This resolver may have a cache of recently resolved domain names. When there is no cache available the root server is the first step in translating the given host names into IP addresses. It will point to the top-level domain of the given domain name. Top-level domain server (like denic) is responsible for translating the domain which the user bought (e.g. beispieldomain.de) to the given IP address. The top-level domain server provides informations about the authoritative DNS server. The authoritative DNS server for the second-level domain (e.g., \"beispieldomain.de\") holds information about the requested host name (e.g., \"www\"). It is this server that can provide the IP address associated with the specific host name. Difference between DNS server and DNS resolver A DNS resolver is a service that provides an IP address for a domain name on request. It is the counter part to NS , which contain the actual DNS information Good to know DENIC operates a worldwide network of name servers to provide the name service for the German top-level domain .de and the German ENUM domain .9.4.e164.arpa. This currently comprises 19 locations in 17 cities on five continents. Types of DNS A Record: Maps a domain to an IPv4 address. AAAA Record: Maps a domain to an IPv6 address. CNAME Record: Alias of one domain to another. MX Record: Specifies mail servers responsible for receiving emails for the domain. NS Record: Indicates authoritative DNS servers for the domain. PTR Record: Used for reverse DNS lookups. SOA Record: Contains information about the domain and the zone. References www.denic.de/wissen/domain-name-system-dns www.cloudflare.com/en-gb/learning/dns/what-is-dns/","title":"General"},{"location":"dns/general/#dns","text":"","title":"DNS"},{"location":"dns/general/#what-is-dns","text":"DNS , or the Domain Name System, is a hierarchical and distributed naming system that is fundamental to the functioning of the Internet. It serves as a translator between human-readable domain names and numerical IP addresses. It is indispencible for accessing services on the internet. Only with the DNS can an internet user access a website by entering a URL or send an email with a domain ending (e.g. @hdm-stuttgart.de).","title":"What is DNS?"},{"location":"dns/general/#how-does-dns-work","text":"DNS works through a hirahierarchical, distributed order. A user enters an URL (e.g., www.beispieldomain.de) into a web browser. (When cache is not empty) The user's device checks its local DNS resolver (typically provided by the Internet Service Provider or configured manually). This resolver may have a cache of recently resolved domain names. When there is no cache available the root server is the first step in translating the given host names into IP addresses. It will point to the top-level domain of the given domain name. Top-level domain server (like denic) is responsible for translating the domain which the user bought (e.g. beispieldomain.de) to the given IP address. The top-level domain server provides informations about the authoritative DNS server. The authoritative DNS server for the second-level domain (e.g., \"beispieldomain.de\") holds information about the requested host name (e.g., \"www\"). It is this server that can provide the IP address associated with the specific host name. Difference between DNS server and DNS resolver A DNS resolver is a service that provides an IP address for a domain name on request. It is the counter part to NS , which contain the actual DNS information Good to know DENIC operates a worldwide network of name servers to provide the name service for the German top-level domain .de and the German ENUM domain .9.4.e164.arpa. This currently comprises 19 locations in 17 cities on five continents.","title":"How does DNS work?"},{"location":"dns/general/#types-of-dns","text":"A Record: Maps a domain to an IPv4 address. AAAA Record: Maps a domain to an IPv6 address. CNAME Record: Alias of one domain to another. MX Record: Specifies mail servers responsible for receiving emails for the domain. NS Record: Indicates authoritative DNS servers for the domain. PTR Record: Used for reverse DNS lookups. SOA Record: Contains information about the domain and the zone.","title":"Types of DNS"},{"location":"dns/general/#references","text":"www.denic.de/wissen/domain-name-system-dns www.cloudflare.com/en-gb/learning/dns/what-is-dns/","title":"References"},{"location":"dns/mail-exchange/","text":"Mail Exchange What is Mail Exchange (MX Record)? A Mail Exchange ( MX ) record is a type of DNS record that specifies the mail servers responsible for receiving email on behalf of a domain. The MX record specifies how email messages should be forwarded in accordance with the Simple Mail Transfer Protocol ( SMTP , the standard protocol for all email). Like CNAME records, an MX record must always point to another domain. How to setup a MX Record In order to configure our MX record that it points towards mx1.hdm-stuttgart.de, we can add the following parameters to the db.g8.sdi.mi.hdm-stuttgart.de (/etc/bind/Zones/db.g8.sdi.mi.hdm-stuttgart.de) file. nano /etc/bind/Zones/db.g8.sdi.mi.hdm-stuttgart.de and add the following parameters: ... ; MX Record g8.sdi.mi.hdm-stuttgart.de. IN MX 10 mx1.hdm-stuttgart.de. The \"priority\" numbers in front of the domains for these MX records indicate the preference; the lower \"priority\" value is preferred. The server always tries mailhost1 first, as 10 is lower than 20. If sending a message fails, the server chooses mailhost2 by default. Test whether the set record points towards the mx1.hdm-stuttgart.de mail server with: dig @141.62.75.108 g8.sdi.mi.hdm-stuttgart.de MX +short Answer 10 mx1.hdm-stuttgart.de. References www.cloudflare.com/de-de/learning/dns/dns-records/dns-mx-record/","title":"Mail Exchange"},{"location":"dns/mail-exchange/#mail-exchange","text":"","title":"Mail Exchange"},{"location":"dns/mail-exchange/#what-is-mail-exchange-mx-record","text":"A Mail Exchange ( MX ) record is a type of DNS record that specifies the mail servers responsible for receiving email on behalf of a domain. The MX record specifies how email messages should be forwarded in accordance with the Simple Mail Transfer Protocol ( SMTP , the standard protocol for all email). Like CNAME records, an MX record must always point to another domain.","title":"What is Mail Exchange (MX Record)?"},{"location":"dns/mail-exchange/#how-to-setup-a-mx-record","text":"In order to configure our MX record that it points towards mx1.hdm-stuttgart.de, we can add the following parameters to the db.g8.sdi.mi.hdm-stuttgart.de (/etc/bind/Zones/db.g8.sdi.mi.hdm-stuttgart.de) file. nano /etc/bind/Zones/db.g8.sdi.mi.hdm-stuttgart.de and add the following parameters: ... ; MX Record g8.sdi.mi.hdm-stuttgart.de. IN MX 10 mx1.hdm-stuttgart.de. The \"priority\" numbers in front of the domains for these MX records indicate the preference; the lower \"priority\" value is preferred. The server always tries mailhost1 first, as 10 is lower than 20. If sending a message fails, the server chooses mailhost2 by default. Test whether the set record points towards the mx1.hdm-stuttgart.de mail server with: dig @141.62.75.108 g8.sdi.mi.hdm-stuttgart.de MX +short Answer 10 mx1.hdm-stuttgart.de.","title":"How to setup a MX Record"},{"location":"dns/mail-exchange/#references","text":"www.cloudflare.com/de-de/learning/dns/dns-records/dns-mx-record/","title":"References"},{"location":"dns/reverse/","text":"Reverse lookups What is a reverse lookup? A reverse DNS lookup is a DNS query for the domain name that is assigned to a specific IP address. This is the opposite of the more commonly used forward DNS lookup, where an IP address is queried by the DNS system. How to perform a reverse lookup? In order to perform a reverse lookup we have to configure the named.config.local (/etc/bind/named.config.local) file and add another zone to it with the following parameters: zone \"75.62.141.in-addr.arpa\" { type master; file \"/etc/bind/Zones/rl.g8.sdi.mi.hdm-stuttgart.de\"; allow-query { any; }; }; zone \"75.62.141.in-addr.arpa\" { ... The zone specified here is \"75.62.141.in-addr. arpa \". IP addresses with inverted segments and the suffix \".in-addr. arpa \" are stored in PTR records. It indicates that this reverse lookup zone is responsible for translating IP addresses in the range 141.62.75.x. ... type master; ... The master option tells the server that it is the server responsible for the domain, i.e. the primary server, and the file only refers to the zone files. ... file \"/etc/bind/Zones/rl.g8.sdi.mi.hdm-stuttgart.de\"; ... This line indicates the path to the file where the zone data for \"75.62.141.in-addr. arpa \" is stored. ... allow-query { any; }; }; This line specifies who is allowed to query the DNS server for information in this zone. In this case, \"any\" means that any client is allowed to query this DNS server for information in the specified reverse lookup zone. References www.cloudflare.com/de-de/learning/dns/glossary/reverse-dns/ developer.mozilla.org/en-US/docs/Glossary/ARPA?retiredLocale=de wiki.ubuntuusers.de/DNS-Server_Bind/","title":"Reverse lookup"},{"location":"dns/reverse/#reverse-lookups","text":"","title":"Reverse lookups"},{"location":"dns/reverse/#what-is-a-reverse-lookup","text":"A reverse DNS lookup is a DNS query for the domain name that is assigned to a specific IP address. This is the opposite of the more commonly used forward DNS lookup, where an IP address is queried by the DNS system.","title":"What is a reverse lookup?"},{"location":"dns/reverse/#how-to-perform-a-reverse-lookup","text":"In order to perform a reverse lookup we have to configure the named.config.local (/etc/bind/named.config.local) file and add another zone to it with the following parameters: zone \"75.62.141.in-addr.arpa\" { type master; file \"/etc/bind/Zones/rl.g8.sdi.mi.hdm-stuttgart.de\"; allow-query { any; }; }; zone \"75.62.141.in-addr.arpa\" { ... The zone specified here is \"75.62.141.in-addr. arpa \". IP addresses with inverted segments and the suffix \".in-addr. arpa \" are stored in PTR records. It indicates that this reverse lookup zone is responsible for translating IP addresses in the range 141.62.75.x. ... type master; ... The master option tells the server that it is the server responsible for the domain, i.e. the primary server, and the file only refers to the zone files. ... file \"/etc/bind/Zones/rl.g8.sdi.mi.hdm-stuttgart.de\"; ... This line indicates the path to the file where the zone data for \"75.62.141.in-addr. arpa \" is stored. ... allow-query { any; }; }; This line specifies who is allowed to query the DNS server for information in this zone. In this case, \"any\" means that any client is allowed to query this DNS server for information in the specified reverse lookup zone.","title":"How to perform a reverse lookup?"},{"location":"dns/reverse/#references","text":"www.cloudflare.com/de-de/learning/dns/glossary/reverse-dns/ developer.mozilla.org/en-US/docs/Glossary/ARPA?retiredLocale=de wiki.ubuntuusers.de/DNS-Server_Bind/","title":"References"},{"location":"dns/transfer-dns-configurations/","text":"Transfer DNS configurations Querying DNS zone In order to transfer our current DNS configuration to the MI nameserver of the HdM nssdi.mi.hdm-stuttgart.de, we have to export the HMAC secret key corresponding to our subdomain. export HMAC=hmac-sha256:mykey.g8:\"your-key\" dig @nssdi.mi.hdm-stuttgart.de -y $HMAC -t AXFR g8.sdi.mi.hdm-stuttgart.de ... Your answer should look something like: ; <<>> DiG 9.18.19-1~deb12u1-Debian <<>> @nssdi.mi.hdm-stuttgart.de -y hmac-sha256 -t AXFR g8.sdi.mi.hdm-stuttgart.de ; (1 server found) ;; global options: +cmd g8.sdi.mi.hdm-stuttgart.de. 86400 IN SOA nssdi.mi.hdm-stuttgart.de. goik.hdm-stuttgart.de. 2022110842 14400 7200 1209600 43200 g8.sdi.mi.hdm-stuttgart.de. 86400 IN NS nssdi.mi.hdm-stuttgart.de. g8.sdi.mi.hdm-stuttgart.de. 86400 IN A 141.62.75.229 g8.sdi.mi.hdm-stuttgart.de. 900 IN TXT \"Hi nerds, how are you going? :-)\" goik45678.g8.sdi.mi.hdm-stuttgart.de. 86400 IN A 141.62.75.108 lg088.g8.sdi.mi.hdm-stuttgart.de. 86400 IN CNAME sdi1.g8.sdi.mi.hdm-stuttgart.de. manual.g8.sdi.mi.hdm-stuttgart.de. 86400 IN CNAME sdi1.g8.sdi.mi.hdm-stuttgart.de. sdi1.g8.sdi.mi.hdm-stuttgart.de. 86400 IN A 141.62.75.108 sdi2.g8.sdi.mi.hdm-stuttgart.de. 86400 IN A 141.62.75.122 www.g8.sdi.mi.hdm-stuttgart.de. 86400 IN A 141.62.75.108 g8.sdi.mi.hdm-stuttgart.de. 86400 IN SOA nssdi.mi.hdm-stuttgart.de. goik.hdm-stuttgart.de. 2022110842 14400 7200 1209600 43200 mykey.g8. 0 ANY TSIG hmac-sha256. 1702656342 300 32 1Tcfu3PiJPScTyaGQ1QMf6xnWCTnaP6fHp+kvDdywEI= 43084 NOERROR 0 ;; Query time: 0 msec ;; SERVER: 141.62.75.229#53(nssdi.mi.hdm-stuttgart.de) (TCP) ;; WHEN: Fri Dec 15 17:05:42 CET 2023 ;; XFR size: 11 records (messages 1, bytes 486) Creating an A record To associate the domain name v1.g8.sdi.mi.hdm-stuttgart.de with our IP address of our server we have to set an A record on the dedicated name server, like: export HMAC=hmac-sha256:mykey.g8:Kk7bhUqdJNARTr4xpeNVxETuFcxRXKF7vqpZQ8yIE8k= nsupdate -y $HMAC \u2060server nssdi.mi.hdm-stuttgart.de \u2060update add vm1.g8.sdi.mi.hdm-stuttgart.de 3600 A 141.62.75.108 \u2060send \u2060quit To test whether it worked you can use the following command: dig +noall +answer @nssdi.mi.hdm-stuttgart.de vm1.g8.sdi.mi.hdm-stuttgart.de The result should look something like: vm1.g8.sdi.mi.hdm-stuttgart.de. 3600 IN A 141.62.75.108 now we can dig our name server globally if the TTL is set correctly dig vm1.g8.sdi.mi.hdm-stuttgart.de","title":"Transfer DNS configurations"},{"location":"dns/transfer-dns-configurations/#transfer-dns-configurations","text":"","title":"Transfer DNS configurations"},{"location":"dns/transfer-dns-configurations/#querying-dns-zone","text":"In order to transfer our current DNS configuration to the MI nameserver of the HdM nssdi.mi.hdm-stuttgart.de, we have to export the HMAC secret key corresponding to our subdomain. export HMAC=hmac-sha256:mykey.g8:\"your-key\" dig @nssdi.mi.hdm-stuttgart.de -y $HMAC -t AXFR g8.sdi.mi.hdm-stuttgart.de ... Your answer should look something like: ; <<>> DiG 9.18.19-1~deb12u1-Debian <<>> @nssdi.mi.hdm-stuttgart.de -y hmac-sha256 -t AXFR g8.sdi.mi.hdm-stuttgart.de ; (1 server found) ;; global options: +cmd g8.sdi.mi.hdm-stuttgart.de. 86400 IN SOA nssdi.mi.hdm-stuttgart.de. goik.hdm-stuttgart.de. 2022110842 14400 7200 1209600 43200 g8.sdi.mi.hdm-stuttgart.de. 86400 IN NS nssdi.mi.hdm-stuttgart.de. g8.sdi.mi.hdm-stuttgart.de. 86400 IN A 141.62.75.229 g8.sdi.mi.hdm-stuttgart.de. 900 IN TXT \"Hi nerds, how are you going? :-)\" goik45678.g8.sdi.mi.hdm-stuttgart.de. 86400 IN A 141.62.75.108 lg088.g8.sdi.mi.hdm-stuttgart.de. 86400 IN CNAME sdi1.g8.sdi.mi.hdm-stuttgart.de. manual.g8.sdi.mi.hdm-stuttgart.de. 86400 IN CNAME sdi1.g8.sdi.mi.hdm-stuttgart.de. sdi1.g8.sdi.mi.hdm-stuttgart.de. 86400 IN A 141.62.75.108 sdi2.g8.sdi.mi.hdm-stuttgart.de. 86400 IN A 141.62.75.122 www.g8.sdi.mi.hdm-stuttgart.de. 86400 IN A 141.62.75.108 g8.sdi.mi.hdm-stuttgart.de. 86400 IN SOA nssdi.mi.hdm-stuttgart.de. goik.hdm-stuttgart.de. 2022110842 14400 7200 1209600 43200 mykey.g8. 0 ANY TSIG hmac-sha256. 1702656342 300 32 1Tcfu3PiJPScTyaGQ1QMf6xnWCTnaP6fHp+kvDdywEI= 43084 NOERROR 0 ;; Query time: 0 msec ;; SERVER: 141.62.75.229#53(nssdi.mi.hdm-stuttgart.de) (TCP) ;; WHEN: Fri Dec 15 17:05:42 CET 2023 ;; XFR size: 11 records (messages 1, bytes 486)","title":"Querying DNS zone"},{"location":"dns/transfer-dns-configurations/#creating-an-a-record","text":"To associate the domain name v1.g8.sdi.mi.hdm-stuttgart.de with our IP address of our server we have to set an A record on the dedicated name server, like: export HMAC=hmac-sha256:mykey.g8:Kk7bhUqdJNARTr4xpeNVxETuFcxRXKF7vqpZQ8yIE8k= nsupdate -y $HMAC \u2060server nssdi.mi.hdm-stuttgart.de \u2060update add vm1.g8.sdi.mi.hdm-stuttgart.de 3600 A 141.62.75.108 \u2060send \u2060quit To test whether it worked you can use the following command: dig +noall +answer @nssdi.mi.hdm-stuttgart.de vm1.g8.sdi.mi.hdm-stuttgart.de The result should look something like: vm1.g8.sdi.mi.hdm-stuttgart.de. 3600 IN A 141.62.75.108 now we can dig our name server globally if the TTL is set correctly dig vm1.g8.sdi.mi.hdm-stuttgart.de","title":"Creating an A record"},{"location":"ldap/accessing-with-java/","text":"Accessing LDAP by a Java\u2122 application","title":"Accessing LDAP by a Java\u2122 application"},{"location":"ldap/accessing-with-java/#accessing-ldap-by-a-javatm-application","text":"","title":"Accessing LDAP by a Java\u2122 application"},{"location":"ldap/backup-recovery-restore/","text":"Backup and recovery / restore For setting up LDAP on your second machine you can use the instructions listed in our LDAP Installation Manual . To export the data from your a machine to your b machine you can use Apache Directory Studio. We have registered with the following DN on the a machine dc=betrayer,dc=com . By right-clicking on the DN root, we can generate an ldif file under export. We save it locally on our machine and upload it to the b machine via scp. The uploaded file maybe looks something like this. It is important to delete the head in order to successfully reconfigure it with slapadd -l /data.ldif . ( data.ldif is the exported file) When installing ldap beforehand we have already configured our root tree with dc=betrayer,dc=com . That is the reason we need to delete the head. This should be removed dn: dc=betrayer,dc=com objectClass: dcObject objectClass: organization objectClass: top dc: betrayer o: betrayer.com We can restore the exported data with slapadd -l /data.ldif This is the file we uploaded dn: dc=betrayer,dc=com objectClass: dcObject objectClass: organization objectClass: top dc: betrayer o: betrayer.com dn: ou=departments,dc=betrayer,dc=com objectClass: organizationalUnit objectClass: top ou: departments dn: ou=software,ou=departments,dc=betrayer,dc=com objectClass: organizationalUnit objectClass: top ou: software dn: ou=devel,ou=software,ou=departments,dc=betrayer,dc=com objectClass: organizationalUnit objectClass: top ou: devel dn: ou=testing,ou=software,ou=departments,dc=betrayer,dc=com objectClass: organizationalUnit objectClass: top ou: testing dn: ou=financial,ou=departments,dc=betrayer,dc=com objectClass: organizationalUnit objectClass: top ou: financial dn: uid=jsmith,ou=devel,ou=software,ou=departments,dc=betrayer,dc=com objectClass: inetOrgPerson objectClass: organizationalPerson objectClass: person objectClass: posixAccount objectClass: top cn: John Smithy gidNumber: 100 homeDirectory: /home/jsmith sn: Smithy uid: jsmith uidNumber: 1002 mail: john@smith.com dn: uid=abean,ou=devel,ou=software,ou=departments,dc=betrayer,dc=com objectClass: inetOrgPerson objectClass: organizationalPerson objectClass: person objectClass: posixAccount objectClass: top cn: Albert Bean gidNumber: 100 homeDirectory: /home/abean sn: Bean uid: abean uidNumber: 1000 mail: albert@bean.com dn: uid=bein,ou=devel,ou=software,ou=departments,dc=betrayer,dc=com objectClass: inetOrgPerson objectClass: organizationalPerson objectClass: person objectClass: posixAccount objectClass: top cn: Bernd Bein gidNumber: 100 homeDirectory: /home/bbein sn: Bein uid: bbein uid: bein uidNumber: 1001 Now when logging in with Apache Directory Studio on our b machine , we can see the same directories we have on our a machine .","title":"LDAP Backup and recovery / restore"},{"location":"ldap/backup-recovery-restore/#backup-and-recovery-restore","text":"For setting up LDAP on your second machine you can use the instructions listed in our LDAP Installation Manual . To export the data from your a machine to your b machine you can use Apache Directory Studio. We have registered with the following DN on the a machine dc=betrayer,dc=com . By right-clicking on the DN root, we can generate an ldif file under export. We save it locally on our machine and upload it to the b machine via scp. The uploaded file maybe looks something like this. It is important to delete the head in order to successfully reconfigure it with slapadd -l /data.ldif . ( data.ldif is the exported file) When installing ldap beforehand we have already configured our root tree with dc=betrayer,dc=com . That is the reason we need to delete the head. This should be removed dn: dc=betrayer,dc=com objectClass: dcObject objectClass: organization objectClass: top dc: betrayer o: betrayer.com We can restore the exported data with slapadd -l /data.ldif This is the file we uploaded dn: dc=betrayer,dc=com objectClass: dcObject objectClass: organization objectClass: top dc: betrayer o: betrayer.com dn: ou=departments,dc=betrayer,dc=com objectClass: organizationalUnit objectClass: top ou: departments dn: ou=software,ou=departments,dc=betrayer,dc=com objectClass: organizationalUnit objectClass: top ou: software dn: ou=devel,ou=software,ou=departments,dc=betrayer,dc=com objectClass: organizationalUnit objectClass: top ou: devel dn: ou=testing,ou=software,ou=departments,dc=betrayer,dc=com objectClass: organizationalUnit objectClass: top ou: testing dn: ou=financial,ou=departments,dc=betrayer,dc=com objectClass: organizationalUnit objectClass: top ou: financial dn: uid=jsmith,ou=devel,ou=software,ou=departments,dc=betrayer,dc=com objectClass: inetOrgPerson objectClass: organizationalPerson objectClass: person objectClass: posixAccount objectClass: top cn: John Smithy gidNumber: 100 homeDirectory: /home/jsmith sn: Smithy uid: jsmith uidNumber: 1002 mail: john@smith.com dn: uid=abean,ou=devel,ou=software,ou=departments,dc=betrayer,dc=com objectClass: inetOrgPerson objectClass: organizationalPerson objectClass: person objectClass: posixAccount objectClass: top cn: Albert Bean gidNumber: 100 homeDirectory: /home/abean sn: Bean uid: abean uidNumber: 1000 mail: albert@bean.com dn: uid=bein,ou=devel,ou=software,ou=departments,dc=betrayer,dc=com objectClass: inetOrgPerson objectClass: organizationalPerson objectClass: person objectClass: posixAccount objectClass: top cn: Bernd Bein gidNumber: 100 homeDirectory: /home/bbein sn: Bein uid: bbein uid: bein uidNumber: 1001 Now when logging in with Apache Directory Studio on our b machine , we can see the same directories we have on our a machine .","title":"Backup and recovery / restore"},{"location":"ldap/browsing/","text":"Browse an existing LDAP Server To browse directories with LDAP we use Apache Directory Studio . How to browse an existing LDAP Server? To configure a new connection we can open LDAP / New LDAP Connection . We use the LDAP hdm server ldap1.hdm-stuttgart.de and connect to it via TLS. We use the No Authentication Method to get a general view of the ldap server. Make sure, that we are using the MI VPN. Now we are seeing the LDAP DIT and can navigate through it to see the userlist. If we right click on userlist we can filter the children and look after our user (for Example (uid=nv023)). Now we are seeing the following information for the user. (see picture) To get an extended view of our user (for example to see the hash) We can right click on our connection and click on `Properties . Now we can use the Simple Authentification Method. We can get our DN credentials from or user on the top (see picture) and authenticate with the corresponding password. Now we can see further materials like the Matrikelnummer or the hashed password. To generate the same with ldapsearch you can use the following promt ldapsearch -x -H ldap://ldap1.hdm-stuttgart.de -b \"ou=userlist,dc=hdm-stuttgart,dc=de\" -s sub \"(uid=nv023)\" Here is the output with the same information as with the gui: # extended LDIF # # LDAPv3 # base <ou=userlist,dc=hdm-stuttgart,dc=de> with scope subtree # filter: (uid=nv023) # requesting: ALL # # nv023, userlist, hdm-stuttgart.de dn: uid=nv023,ou=userlist,dc=hdm-stuttgart,dc=de displayName: Vinterstad Niklas employeeType: student objectClass: hdmAccount objectClass: hdmStudent objectClass: inetOrgPerson objectClass: posixAccount objectClass: shadowAccount objectClass: eduPerson eduPersonAffiliation: member eduPersonAffiliation: student eduPersonAffiliation: library-walk-in uid: nv023 mail: nv023@hdm-stuttgart.de uidNumber: 73699 cn: Vinterstad Niklas loginShell: /bin/sh hdmCategory: 1 gidNumber: 100 givenName: Niklas homeDirectory: /home/stud/n/nv023 sn: Vinterstad # search result search: 2 result: 0 Success # numResponses: 2 # numEntries: 1 If you want to authenticate, here is the following promt: ldapsearch -x -H ldap://ldap1.hdm-stuttgart.de -b \"ou=userlist,dc=hdm-stuttgart,dc=de\" -D \"uid=nv023,ou=userlist,dc=hdm-stuttgart,dc=de\" -W \"(uid=nv023)\" and the follwing output with more information is showing: # extended LDIF # # LDAPv3 # base <ou=userlist,dc=hdm-stuttgart,dc=de> with scope subtree # filter: (uid=nv023) # requesting: ALL # # nv023, userlist, hdm-stuttgart.de dn: uid=nv023,ou=userlist,dc=hdm-stuttgart,dc=de businessCategory: 1 employeeType: student postOfficeBox: 2G objectClass: hdmAccount objectClass: hdmStudent objectClass: inetOrgPerson objectClass: posixAccount objectClass: shadowAccount objectClass: eduPerson eduPersonAffiliation: member eduPersonAffiliation: student eduPersonAffiliation: library-walk-in uid: nv023 mail: nv023@hdm-stuttgart.de uidNumber: 73699 cn: Vinterstad Niklas loginShell: /bin/sh hdmCategory: 1 gidNumber: 100 employeeNumber: 45516 givenName: Niklas homeDirectory: /home/stud/n/nv023 sn: Vinterstad matrikelNr: 45516 userPassword:: e1NTSEF9TVBSZzZQQTJGMUxUKzVrOFM5Y2RnRlVjbmtaUm1iVlh5UERoTkhYdEx 3UHZ0dDEw shadowLastChange: 19272 sambaNTPassword: EEB75997E36EFFC420B8BFC8EB8E6CF6 # search result search: 2 result: 0 Success # numResponses: 2 # numEntries: 1","title":"Browsing LDAP"},{"location":"ldap/browsing/#browse-an-existing-ldap-server","text":"To browse directories with LDAP we use Apache Directory Studio .","title":"Browse an existing LDAP Server"},{"location":"ldap/browsing/#how-to-browse-an-existing-ldap-server","text":"To configure a new connection we can open LDAP / New LDAP Connection . We use the LDAP hdm server ldap1.hdm-stuttgart.de and connect to it via TLS. We use the No Authentication Method to get a general view of the ldap server. Make sure, that we are using the MI VPN. Now we are seeing the LDAP DIT and can navigate through it to see the userlist. If we right click on userlist we can filter the children and look after our user (for Example (uid=nv023)). Now we are seeing the following information for the user. (see picture) To get an extended view of our user (for example to see the hash) We can right click on our connection and click on `Properties . Now we can use the Simple Authentification Method. We can get our DN credentials from or user on the top (see picture) and authenticate with the corresponding password. Now we can see further materials like the Matrikelnummer or the hashed password. To generate the same with ldapsearch you can use the following promt ldapsearch -x -H ldap://ldap1.hdm-stuttgart.de -b \"ou=userlist,dc=hdm-stuttgart,dc=de\" -s sub \"(uid=nv023)\" Here is the output with the same information as with the gui: # extended LDIF # # LDAPv3 # base <ou=userlist,dc=hdm-stuttgart,dc=de> with scope subtree # filter: (uid=nv023) # requesting: ALL # # nv023, userlist, hdm-stuttgart.de dn: uid=nv023,ou=userlist,dc=hdm-stuttgart,dc=de displayName: Vinterstad Niklas employeeType: student objectClass: hdmAccount objectClass: hdmStudent objectClass: inetOrgPerson objectClass: posixAccount objectClass: shadowAccount objectClass: eduPerson eduPersonAffiliation: member eduPersonAffiliation: student eduPersonAffiliation: library-walk-in uid: nv023 mail: nv023@hdm-stuttgart.de uidNumber: 73699 cn: Vinterstad Niklas loginShell: /bin/sh hdmCategory: 1 gidNumber: 100 givenName: Niklas homeDirectory: /home/stud/n/nv023 sn: Vinterstad # search result search: 2 result: 0 Success # numResponses: 2 # numEntries: 1 If you want to authenticate, here is the following promt: ldapsearch -x -H ldap://ldap1.hdm-stuttgart.de -b \"ou=userlist,dc=hdm-stuttgart,dc=de\" -D \"uid=nv023,ou=userlist,dc=hdm-stuttgart,dc=de\" -W \"(uid=nv023)\" and the follwing output with more information is showing: # extended LDIF # # LDAPv3 # base <ou=userlist,dc=hdm-stuttgart,dc=de> with scope subtree # filter: (uid=nv023) # requesting: ALL # # nv023, userlist, hdm-stuttgart.de dn: uid=nv023,ou=userlist,dc=hdm-stuttgart,dc=de businessCategory: 1 employeeType: student postOfficeBox: 2G objectClass: hdmAccount objectClass: hdmStudent objectClass: inetOrgPerson objectClass: posixAccount objectClass: shadowAccount objectClass: eduPerson eduPersonAffiliation: member eduPersonAffiliation: student eduPersonAffiliation: library-walk-in uid: nv023 mail: nv023@hdm-stuttgart.de uidNumber: 73699 cn: Vinterstad Niklas loginShell: /bin/sh hdmCategory: 1 gidNumber: 100 employeeNumber: 45516 givenName: Niklas homeDirectory: /home/stud/n/nv023 sn: Vinterstad matrikelNr: 45516 userPassword:: e1NTSEF9TVBSZzZQQTJGMUxUKzVrOFM5Y2RnRlVjbmtaUm1iVlh5UERoTkhYdEx 3UHZ0dDEw shadowLastChange: 19272 sambaNTPassword: EEB75997E36EFFC420B8BFC8EB8E6CF6 # search result search: 2 result: 0 Success # numResponses: 2 # numEntries: 1","title":"How to browse an existing LDAP Server?"},{"location":"ldap/config/","text":"LDAP configuration Some parameters have to be added manually to the LDAP configuration file. OpenLdap supports parameter configuration within its own database backend. Configuration with Apache Directory Studio First we have to search for the two different DIT s. We do this by using the following ldapsearch command: ldapsearch -Y EXTERNAL -H ldapi://` -b cn=config Now we see following answer in the console: # {0}config, config dn: olcDatabase={0}config,cn=config objectClass: olcDatabaseConfig olcDatabase: {0}config olcAccess: {0}to * by dn.exact=gidNumber=0+uidNumber=0,cn=peercred,cn=external ,cn=auth manage by * break olcRootDN: cn=admin,cn=config At the end of the of the answer we see our required cn=config database! To access the config database via ApacheDirectoryStudio, we need to set an olcRootPW attribute, the hashed password for the complete credentials. We do this by hashing our SSHA password. We can do this for example like this: Generate Password Hash with salt. echo -n passwordsalt | shasum -a 1 | awk '{print $1}' Base64 encode it with the salt again appended to the string. echo -n 'c88e9c67041a74e0357befdff93f87dde0904214salt' | base64 Now we just have to add {SSHA} before the string. You can find the documentation for this method here: https://community.canvaslms.com/t5/SIS-User-Articles/SSHA-Password-Generation/ta-p/243730 Creating a LDIF file with the corresponding parameters: (name it like this for Example add_olcRootPW.ldif ) dn: olcDatabase={0}config,cn=config add: olcRootPW olcRootPW: {ssha}dn: olcDatabase={0}config,cn=config add: olcRootPW olcRootPW: {ssha}4yjYu6pKazMWjyCBk7unVBAa3RGlg9oW Now we can add the generated olcRootPW attribute with the following command: ldapmodify -Q -Y EXTERNAL -H ldapi:/// -f ~/add_olcRootPW.ldif To test it we can check the database config again with: ldapsearch -Y EXTERNAL -H ldapi:/// -b cn=config Now we can see the added hashed password. To connect with ApacheDirectoryStudio we need to uncheck the Box Get base DNs from Root DSEGet base DNs from Root DSE . Above we now can add the required Base DN manually. (cn=config). As authentication we use the bind dn cn=admin,cn=config and the password which we hashed.","title":"LDAP Config"},{"location":"ldap/config/#ldap-configuration","text":"Some parameters have to be added manually to the LDAP configuration file. OpenLdap supports parameter configuration within its own database backend.","title":"LDAP configuration"},{"location":"ldap/config/#configuration-with-apache-directory-studio","text":"First we have to search for the two different DIT s. We do this by using the following ldapsearch command: ldapsearch -Y EXTERNAL -H ldapi://` -b cn=config Now we see following answer in the console: # {0}config, config dn: olcDatabase={0}config,cn=config objectClass: olcDatabaseConfig olcDatabase: {0}config olcAccess: {0}to * by dn.exact=gidNumber=0+uidNumber=0,cn=peercred,cn=external ,cn=auth manage by * break olcRootDN: cn=admin,cn=config At the end of the of the answer we see our required cn=config database! To access the config database via ApacheDirectoryStudio, we need to set an olcRootPW attribute, the hashed password for the complete credentials. We do this by hashing our SSHA password. We can do this for example like this: Generate Password Hash with salt. echo -n passwordsalt | shasum -a 1 | awk '{print $1}' Base64 encode it with the salt again appended to the string. echo -n 'c88e9c67041a74e0357befdff93f87dde0904214salt' | base64 Now we just have to add {SSHA} before the string. You can find the documentation for this method here: https://community.canvaslms.com/t5/SIS-User-Articles/SSHA-Password-Generation/ta-p/243730 Creating a LDIF file with the corresponding parameters: (name it like this for Example add_olcRootPW.ldif ) dn: olcDatabase={0}config,cn=config add: olcRootPW olcRootPW: {ssha}dn: olcDatabase={0}config,cn=config add: olcRootPW olcRootPW: {ssha}4yjYu6pKazMWjyCBk7unVBAa3RGlg9oW Now we can add the generated olcRootPW attribute with the following command: ldapmodify -Q -Y EXTERNAL -H ldapi:/// -f ~/add_olcRootPW.ldif To test it we can check the database config again with: ldapsearch -Y EXTERNAL -H ldapi:/// -b cn=config Now we can see the added hashed password. To connect with ApacheDirectoryStudio we need to uncheck the Box Get base DNs from Root DSEGet base DNs from Root DSE . Above we now can add the required Base DN manually. (cn=config). As authentication we use the bind dn cn=admin,cn=config and the password which we hashed.","title":"Configuration with Apache Directory Studio"},{"location":"ldap/extending-an-existing-entry/","text":"Extending an existing entry There are two ways to extend an existing entry. We'll extend our user jsmith with an posixAccount objectClass. One way would be to right click within the jsmith object and select Add new value . Then you can select the value you want to extend your entry with. In our case it would be posixAccount . After selecting the value we can click next and choose a proper value. We choose 1000. The other way would be to select LDAP in the toolbar and choose New LDIF File . You can paste this code to the LDIF file. dn: uid=jsmith,ou=devel,ou=software,ou=departments,dc=betrayer,dc=com changetype: modify add: objectClass objectClass: posixAccount - add: uidNumber uidNumber: 1001 - add: gidNumber gidNumber: 1001 - add: homeDirectory homeDirectory: /home/jsmith - It is important to set the dn: to the specific entry you want to extend. Furthermore the changetype: should be modify . dn: uid=jsmith,ou=devel,ou=software,ou=departments,dc=betrayer,dc=com changetype: modify add: objectClass objectClass: posixAccount ...","title":"Extending an existing entry"},{"location":"ldap/extending-an-existing-entry/#extending-an-existing-entry","text":"There are two ways to extend an existing entry. We'll extend our user jsmith with an posixAccount objectClass. One way would be to right click within the jsmith object and select Add new value . Then you can select the value you want to extend your entry with. In our case it would be posixAccount . After selecting the value we can click next and choose a proper value. We choose 1000. The other way would be to select LDAP in the toolbar and choose New LDIF File . You can paste this code to the LDIF file. dn: uid=jsmith,ou=devel,ou=software,ou=departments,dc=betrayer,dc=com changetype: modify add: objectClass objectClass: posixAccount - add: uidNumber uidNumber: 1001 - add: gidNumber gidNumber: 1001 - add: homeDirectory homeDirectory: /home/jsmith - It is important to set the dn: to the specific entry you want to extend. Furthermore the changetype: should be modify . dn: uid=jsmith,ou=devel,ou=software,ou=departments,dc=betrayer,dc=com changetype: modify add: objectClass objectClass: posixAccount ...","title":"Extending an existing entry"},{"location":"ldap/filter-based-search/","text":"Filter based search We use ldapsearch to perform search operations on LDAP. All users with a uid attribute value starting with the letter \u201cb\u201d ldapsearch -x -D \"cn=admin,dc=betrayer,dc=com\" -W -b \"dc=example,dc=com\" \"(uid=b*)\" returns this answer: Enter LDAP Password: # extended LDIF # # LDAPv3 # base <dc=example,dc=com> with scope subtree # filter: (uid=b*) # requesting: ALL # # search result search: 2 result: 32 No such object # numResponses: 1 root@sdi08a:~# ldapsearch -x -D \"cn=admin,dc=betrayer,dc=com\" -W -b \"dc=betrayer,dc=com\" \"(uid=b*)\" Enter LDAP Password: # extended LDIF # # LDAPv3 # base <dc=betrayer,dc=com> with scope subtree # filter: (uid=b*) # requesting: ALL # # bein, devel, software, departments, betrayer.com dn: uid=bein,ou=devel,ou=software,ou=departments,dc=betrayer,dc=com uid: bbein uid: bein cn: Bernd Bein sn: Bein objectClass: inetOrgPerson objectClass: organizationalPerson objectClass: person objectClass: top # search result search: 2 result: 0 Success # numResponses: 2 # numEntries: 1 All entries with either a defined uid attribute or a ou attribute starting with letter \u201cd\u201d ldapsearch -x -D \"cn=admin,dc=betrayer,dc=com\" -W -b \"dc=betrayer,dc=com\" \"(|(uid=*)(ou=d*))\" # extended LDIF # # LDAPv3 # base <dc=example,dc=com> with scope subtree # filter: (uid=b*) # requesting: ALL # # search result search: 2 result: 32 No such object # numResponses: 1 root@sdi08a:~# ldapsearch -x -D \"cn=admin,dc=betrayer,dc=com\" -W -b \"dc=betrayer,dc=com\" \"(uid=b*)\" Enter LDAP Password: # extended LDIF # # LDAPv3 # base <dc=betrayer,dc=com> with scope subtree # filter: (uid=b*) # requesting: ALL # # bein, devel, software, departments, betrayer.com dn: uid=bein,ou=devel,ou=software,ou=departments,dc=betrayer,dc=com uid: bbein uid: bein cn: Bernd Bein sn: Bein objectClass: inetOrgPerson objectClass: organizationalPerson objectClass: person objectClass: top # search result search: 2 result: 0 Success # numResponses: 2 # numEntries: 1 root@sdi08a:~# ldapsearch -x -D \"cn=admin,dc=betrayer,dc=com\" -W -b \"dc=betrayer,dc=com\" \"(|(uid=*)(ou=d*))\" Enter LDAP Password: # extended LDIF # # LDAPv3 # base <dc=betrayer,dc=com> with scope subtree # filter: (|(uid=*)(ou=d*)) # requesting: ALL # # departments, betrayer.com dn: ou=departments,dc=betrayer,dc=com ou: departments objectClass: organizationalUnit objectClass: top # devel, software, departments, betrayer.com dn: ou=devel,ou=software,ou=departments,dc=betrayer,dc=com ou: devel objectClass: organizationalUnit objectClass: top # jsmith, devel, software, departments, betrayer.com dn: uid=jsmith,ou=devel,ou=software,ou=departments,dc=betrayer,dc=com objectClass: inetOrgPerson objectClass: organizationalPerson objectClass: person objectClass: top objectClass: posixAccount mail: john@smith.com sn: Smithy cn: John Smithy uid: jsmith uidNumber: 1001 gidNumber: 1001 homeDirectory: /home/jsmith # abean, devel, software, departments, betrayer.com dn: uid=abean,ou=devel,ou=software,ou=departments,dc=betrayer,dc=com uid: abean cn: Albert Bean sn: Bean objectClass: inetOrgPerson objectClass: organizationalPerson objectClass: person objectClass: top objectClass: posixAccount mail: albert@bean.com userPassword:: e1NNRDV9aHVZTzQwUSthNDFuY2JlbS90NWlxNUFMYU1Iaml3aTU= uidNumber: 1 gidNumber: 1 homeDirectory: /home/abean # bein, devel, software, departments, betrayer.com dn: uid=bein,ou=devel,ou=software,ou=departments,dc=betrayer,dc=com uid: bbein uid: bein cn: Bernd Bein sn: Bein objectClass: inetOrgPerson objectClass: organizationalPerson objectClass: person objectClass: top # search result search: 2 result: 0 Success # numResponses: 6 # numEntries: 5 All users entries within the whole DIT having a gidNumber value of 100 ldapsearch -x -D \"cn=admin,dc=betrayer,dc=com\" -W -b \"dc=betrayer,dc=com\" \"(gidNumber=100)\" Our gid numbers start at 1000 so this should not return anything. Enter LDAP Password: # extended LDIF # # LDAPv3 # base <dc=betrayer,dc=com> with scope subtree # filter: (gidNumber=100) # requesting: ALL # # search result search: 2 result: 0 Success # numResponses: 1 All user entries belonging to the billing department having a uidNumber value greater than 1023 ldapsearch -x -D \"cn=admin,dc=betrayer,dc=com\" -W -b \"ou=billing,dc=betrayer,dc=com\" \"(uidNumber>=1023)\" We do not have a department billing so this search query cannot be resolved. Answer: Enter LDAP Password: # extended LDIF # # LDAPv3 # base <ou=billing,dc=betrayer,dc=com> with scope subtree # filter: (uidNumber>=1023) # requesting: ALL # # search result search: 2 result: 32 No such object matchedDN: dc=betrayer,dc=com # numResponses: 1 All user entries within the whole DIT having a commonName containing the substring \u201cei\u201d ldapsearch -x -D \"cn=admin,dc=betrayer,dc=com\" -W -b \"dc=betrayer,dc=com\" \"(cn=*ei*)\" Answer: Enter LDAP Password: # extended LDIF # # LDAPv3 # base <dc=betrayer,dc=com> with scope subtree # filter: (cn=*ei*) # requesting: ALL # # bein, devel, software, departments, betrayer.com dn: uid=bein,ou=devel,ou=software,ou=departments,dc=betrayer,dc=com uid: bbein uid: bein cn: Bernd Bein sn: Bein objectClass: inetOrgPerson objectClass: organizationalPerson objectClass: person objectClass: top objectClass: posixAccount gidNumber: 1024 homeDirectory: /home/bbein uidNumber: 1024 # search result search: 2 result: 0 Success # numResponses: 2 # numEntries: 1 All user entries within the whole DIT belonging to gidNumber == 100 or having a uid value starting with letter \u201ct\u201d ldapsearch -x -D \"cn=admin,dc=betrayer,dc=com\" -W -b \"dc=betrayer,dc=com\" \"(|(gidNumber=100)(uid=t*))\" Answer: Enter LDAP Password: # extended LDIF # # LDAPv3 # base <dc=betrayer,dc=com> with scope subtree # filter: (|(gidNumber=100)(uid=t*)) # requesting: ALL # # search result search: 2 result: 0 Success # numResponses: 1","title":"Filter based search"},{"location":"ldap/filter-based-search/#filter-based-search","text":"We use ldapsearch to perform search operations on LDAP.","title":"Filter based search"},{"location":"ldap/filter-based-search/#all-users-with-a-uid-attribute-value-starting-with-the-letter-b","text":"ldapsearch -x -D \"cn=admin,dc=betrayer,dc=com\" -W -b \"dc=example,dc=com\" \"(uid=b*)\" returns this answer: Enter LDAP Password: # extended LDIF # # LDAPv3 # base <dc=example,dc=com> with scope subtree # filter: (uid=b*) # requesting: ALL # # search result search: 2 result: 32 No such object # numResponses: 1 root@sdi08a:~# ldapsearch -x -D \"cn=admin,dc=betrayer,dc=com\" -W -b \"dc=betrayer,dc=com\" \"(uid=b*)\" Enter LDAP Password: # extended LDIF # # LDAPv3 # base <dc=betrayer,dc=com> with scope subtree # filter: (uid=b*) # requesting: ALL # # bein, devel, software, departments, betrayer.com dn: uid=bein,ou=devel,ou=software,ou=departments,dc=betrayer,dc=com uid: bbein uid: bein cn: Bernd Bein sn: Bein objectClass: inetOrgPerson objectClass: organizationalPerson objectClass: person objectClass: top # search result search: 2 result: 0 Success # numResponses: 2 # numEntries: 1","title":"All users with a uid attribute value starting with the letter \u201cb\u201d"},{"location":"ldap/filter-based-search/#all-entries-with-either-a-defined-uid-attribute-or-a-ou-attribute-starting-with-letter-d","text":"ldapsearch -x -D \"cn=admin,dc=betrayer,dc=com\" -W -b \"dc=betrayer,dc=com\" \"(|(uid=*)(ou=d*))\" # extended LDIF # # LDAPv3 # base <dc=example,dc=com> with scope subtree # filter: (uid=b*) # requesting: ALL # # search result search: 2 result: 32 No such object # numResponses: 1 root@sdi08a:~# ldapsearch -x -D \"cn=admin,dc=betrayer,dc=com\" -W -b \"dc=betrayer,dc=com\" \"(uid=b*)\" Enter LDAP Password: # extended LDIF # # LDAPv3 # base <dc=betrayer,dc=com> with scope subtree # filter: (uid=b*) # requesting: ALL # # bein, devel, software, departments, betrayer.com dn: uid=bein,ou=devel,ou=software,ou=departments,dc=betrayer,dc=com uid: bbein uid: bein cn: Bernd Bein sn: Bein objectClass: inetOrgPerson objectClass: organizationalPerson objectClass: person objectClass: top # search result search: 2 result: 0 Success # numResponses: 2 # numEntries: 1 root@sdi08a:~# ldapsearch -x -D \"cn=admin,dc=betrayer,dc=com\" -W -b \"dc=betrayer,dc=com\" \"(|(uid=*)(ou=d*))\" Enter LDAP Password: # extended LDIF # # LDAPv3 # base <dc=betrayer,dc=com> with scope subtree # filter: (|(uid=*)(ou=d*)) # requesting: ALL # # departments, betrayer.com dn: ou=departments,dc=betrayer,dc=com ou: departments objectClass: organizationalUnit objectClass: top # devel, software, departments, betrayer.com dn: ou=devel,ou=software,ou=departments,dc=betrayer,dc=com ou: devel objectClass: organizationalUnit objectClass: top # jsmith, devel, software, departments, betrayer.com dn: uid=jsmith,ou=devel,ou=software,ou=departments,dc=betrayer,dc=com objectClass: inetOrgPerson objectClass: organizationalPerson objectClass: person objectClass: top objectClass: posixAccount mail: john@smith.com sn: Smithy cn: John Smithy uid: jsmith uidNumber: 1001 gidNumber: 1001 homeDirectory: /home/jsmith # abean, devel, software, departments, betrayer.com dn: uid=abean,ou=devel,ou=software,ou=departments,dc=betrayer,dc=com uid: abean cn: Albert Bean sn: Bean objectClass: inetOrgPerson objectClass: organizationalPerson objectClass: person objectClass: top objectClass: posixAccount mail: albert@bean.com userPassword:: e1NNRDV9aHVZTzQwUSthNDFuY2JlbS90NWlxNUFMYU1Iaml3aTU= uidNumber: 1 gidNumber: 1 homeDirectory: /home/abean # bein, devel, software, departments, betrayer.com dn: uid=bein,ou=devel,ou=software,ou=departments,dc=betrayer,dc=com uid: bbein uid: bein cn: Bernd Bein sn: Bein objectClass: inetOrgPerson objectClass: organizationalPerson objectClass: person objectClass: top # search result search: 2 result: 0 Success # numResponses: 6 # numEntries: 5","title":"All entries with either a defined uid attribute or a ou attribute starting with letter \u201cd\u201d"},{"location":"ldap/filter-based-search/#all-users-entries-within-the-whole-dit-having-a-gidnumber-value-of-100","text":"ldapsearch -x -D \"cn=admin,dc=betrayer,dc=com\" -W -b \"dc=betrayer,dc=com\" \"(gidNumber=100)\" Our gid numbers start at 1000 so this should not return anything. Enter LDAP Password: # extended LDIF # # LDAPv3 # base <dc=betrayer,dc=com> with scope subtree # filter: (gidNumber=100) # requesting: ALL # # search result search: 2 result: 0 Success # numResponses: 1","title":"All users entries within the whole DIT having a gidNumber value of 100"},{"location":"ldap/filter-based-search/#all-user-entries-belonging-to-the-billing-department-having-a-uidnumber-value-greater-than-1023","text":"ldapsearch -x -D \"cn=admin,dc=betrayer,dc=com\" -W -b \"ou=billing,dc=betrayer,dc=com\" \"(uidNumber>=1023)\" We do not have a department billing so this search query cannot be resolved. Answer: Enter LDAP Password: # extended LDIF # # LDAPv3 # base <ou=billing,dc=betrayer,dc=com> with scope subtree # filter: (uidNumber>=1023) # requesting: ALL # # search result search: 2 result: 32 No such object matchedDN: dc=betrayer,dc=com # numResponses: 1","title":"All user entries belonging to the billing department having a uidNumber value greater than 1023"},{"location":"ldap/filter-based-search/#all-user-entries-within-the-whole-dit-having-a-commonname-containing-the-substring-ei","text":"ldapsearch -x -D \"cn=admin,dc=betrayer,dc=com\" -W -b \"dc=betrayer,dc=com\" \"(cn=*ei*)\" Answer: Enter LDAP Password: # extended LDIF # # LDAPv3 # base <dc=betrayer,dc=com> with scope subtree # filter: (cn=*ei*) # requesting: ALL # # bein, devel, software, departments, betrayer.com dn: uid=bein,ou=devel,ou=software,ou=departments,dc=betrayer,dc=com uid: bbein uid: bein cn: Bernd Bein sn: Bein objectClass: inetOrgPerson objectClass: organizationalPerson objectClass: person objectClass: top objectClass: posixAccount gidNumber: 1024 homeDirectory: /home/bbein uidNumber: 1024 # search result search: 2 result: 0 Success # numResponses: 2 # numEntries: 1","title":"All user entries within the whole DIT having a commonName containing the substring \u201cei\u201d"},{"location":"ldap/filter-based-search/#all-user-entries-within-the-whole-dit-belonging-to-gidnumber-100-or-having-a-uid-value-starting-with-letter-t","text":"ldapsearch -x -D \"cn=admin,dc=betrayer,dc=com\" -W -b \"dc=betrayer,dc=com\" \"(|(gidNumber=100)(uid=t*))\" Answer: Enter LDAP Password: # extended LDIF # # LDAPv3 # base <dc=betrayer,dc=com> with scope subtree # filter: (|(gidNumber=100)(uid=t*)) # requesting: ALL # # search result search: 2 result: 0 Success # numResponses: 1","title":"All user entries within the whole DIT belonging to gidNumber == 100 or having a uid value starting with letter \u201ct\u201d"},{"location":"ldap/general/","text":"LDAP What is LDAP? LDAP is a standard method for accessing directory services. A directory service is a repository with resource information on multiple systems and services within a distributed environment. How does LDAP work? References www.ibm.com/docs/de/db2/10.5?topic=servers-lightweight-directory-access-protocol-ldap","title":"General"},{"location":"ldap/general/#ldap","text":"","title":"LDAP"},{"location":"ldap/general/#what-is-ldap","text":"LDAP is a standard method for accessing directory services. A directory service is a repository with resource information on multiple systems and services within a distributed environment.","title":"What is LDAP?"},{"location":"ldap/general/#how-does-ldap-work","text":"","title":"How does LDAP work?"},{"location":"ldap/general/#references","text":"www.ibm.com/docs/de/db2/10.5?topic=servers-lightweight-directory-access-protocol-ldap","title":"References"},{"location":"ldap/mail-client/","text":"Accessing LDAP data by using a mail client First you have to create a new LDAP address book in Thunderbird. To do this, proceed as follows select the \"Address book\" button in the top menu bar in the address book manager, click on \"New --> LDAP address book\" In the next dialog, you must enter the parameters for the address book connection. In our case: Name: LDAP-Test Connection Server address: vm1.g8.sdi.mi.hdm-stuttgart.de Base DN: dc=betrayer,dc=com Port number: 389 Bind DN: uid=abean,ou=devel,ou=software,ou=departments,dc=betrayer,dc=com After saving, the address book should be available in the list. You can now perform a search, e.g. by surname or e-mail address. You must also enter your password so that the search can be carried out on the server. This serves to protect the address book so that data cannot be accessed by unauthorized persons.","title":"Accessing LDAP data by using a mail client"},{"location":"ldap/mail-client/#accessing-ldap-data-by-using-a-mail-client","text":"First you have to create a new LDAP address book in Thunderbird. To do this, proceed as follows select the \"Address book\" button in the top menu bar in the address book manager, click on \"New --> LDAP address book\" In the next dialog, you must enter the parameters for the address book connection. In our case: Name: LDAP-Test Connection Server address: vm1.g8.sdi.mi.hdm-stuttgart.de Base DN: dc=betrayer,dc=com Port number: 389 Bind DN: uid=abean,ou=devel,ou=software,ou=departments,dc=betrayer,dc=com After saving, the address book should be available in the list. You can now perform a search, e.g. by surname or e-mail address. You must also enter your password so that the search can be carried out on the server. This serves to protect the address book so that data cannot be accessed by unauthorized persons.","title":"Accessing LDAP data by using a mail client"},{"location":"ldap/populating/","text":"Populating your DIT We can use Apache Directory Studio to populate our DIT . We can create a new entry by right clicking on dc=betrayer,dc=com . Then choose New Entry . In the first step you can choose Create entry from scratch . For the available object classes please choose organizationalUnit . The object class top should have been generated automatically. The third step is to configure a distinguished name. As a parent choose your upper layer (for example for ou=departments, the upper layer is dc=betrayer,dc=com). Then you can complete these steps by clicking finish . After successfully setting up all organizational units we can implement inetOrgPerson . Exporting the ldap tree We can create a dumb of the ldap tree by using the following command: /etc/ldap# ldapsearch -x -H ldap://vm1.g8.sdi.mi.hdm-stuttgart.de -D \"cn=admin,dc=betrayer,dc=com\" -W -b \"dc=betrayer,dc=com\" -s sub > ldap_export.ldif The dumb should look like: LDAPv3 # base <dc=betrayer,dc=com> with scope subtree # filter: (objectclass=*) # requesting: ALL # # betrayer.com dn: dc=betrayer,dc=com objectClass: top objectClass: dcObject objectClass: organization o: betrayer.com dc: betrayer # departments, betrayer.com dn: ou=departments,dc=betrayer,dc=com ou: departments objectClass: organizationalUnit objectClass: top # software, departments, betrayer.com dn: ou=software,ou=departments,dc=betrayer,dc=com ou: software objectClass: organizationalUnit objectClass: top # devel, software, departments, betrayer.com dn: ou=devel,ou=software,ou=departments,dc=betrayer,dc=com ou: devel objectClass: organizationalUnit objectClass: top # testing, software, departments, betrayer.com dn: ou=testing,ou=software,ou=departments,dc=betrayer,dc=com ou: testing objectClass: organizationalUnit objectClass: top # financial, departments, betrayer.com dn: ou=financial,ou=departments,dc=betrayer,dc=com ou: financial objectClass: organizationalUnit objectClass: top # jsmith, devel, software, departments, betrayer.com dn: uid=jsmith,ou=devel,ou=software,ou=departments,dc=betrayer,dc=com uid: jsmith sn: Smith objectClass: inetOrgPerson objectClass: organizationalPerson objectClass: person objectClass: top cn: John Smith mail: john@smith.com # abean, devel, software, departments, betrayer.com dn: uid=abean,ou=devel,ou=software,ou=departments,dc=betrayer,dc=com uid: abean cn: Albert Bean sn: Bean objectClass: inetOrgPerson objectClass: organizationalPerson objectClass: person objectClass: top mail: albert@bean.com # search result search: 2 result: 0 Success # numResponses: 9 # numEntries: 8","title":"Populating your DIT"},{"location":"ldap/populating/#populating-your-dit","text":"We can use Apache Directory Studio to populate our DIT . We can create a new entry by right clicking on dc=betrayer,dc=com . Then choose New Entry . In the first step you can choose Create entry from scratch . For the available object classes please choose organizationalUnit . The object class top should have been generated automatically. The third step is to configure a distinguished name. As a parent choose your upper layer (for example for ou=departments, the upper layer is dc=betrayer,dc=com). Then you can complete these steps by clicking finish . After successfully setting up all organizational units we can implement inetOrgPerson .","title":"Populating your DIT"},{"location":"ldap/populating/#exporting-the-ldap-tree","text":"We can create a dumb of the ldap tree by using the following command: /etc/ldap# ldapsearch -x -H ldap://vm1.g8.sdi.mi.hdm-stuttgart.de -D \"cn=admin,dc=betrayer,dc=com\" -W -b \"dc=betrayer,dc=com\" -s sub > ldap_export.ldif The dumb should look like: LDAPv3 # base <dc=betrayer,dc=com> with scope subtree # filter: (objectclass=*) # requesting: ALL # # betrayer.com dn: dc=betrayer,dc=com objectClass: top objectClass: dcObject objectClass: organization o: betrayer.com dc: betrayer # departments, betrayer.com dn: ou=departments,dc=betrayer,dc=com ou: departments objectClass: organizationalUnit objectClass: top # software, departments, betrayer.com dn: ou=software,ou=departments,dc=betrayer,dc=com ou: software objectClass: organizationalUnit objectClass: top # devel, software, departments, betrayer.com dn: ou=devel,ou=software,ou=departments,dc=betrayer,dc=com ou: devel objectClass: organizationalUnit objectClass: top # testing, software, departments, betrayer.com dn: ou=testing,ou=software,ou=departments,dc=betrayer,dc=com ou: testing objectClass: organizationalUnit objectClass: top # financial, departments, betrayer.com dn: ou=financial,ou=departments,dc=betrayer,dc=com ou: financial objectClass: organizationalUnit objectClass: top # jsmith, devel, software, departments, betrayer.com dn: uid=jsmith,ou=devel,ou=software,ou=departments,dc=betrayer,dc=com uid: jsmith sn: Smith objectClass: inetOrgPerson objectClass: organizationalPerson objectClass: person objectClass: top cn: John Smith mail: john@smith.com # abean, devel, software, departments, betrayer.com dn: uid=abean,ou=devel,ou=software,ou=departments,dc=betrayer,dc=com uid: abean cn: Albert Bean sn: Bean objectClass: inetOrgPerson objectClass: organizationalPerson objectClass: person objectClass: top mail: albert@bean.com # search result search: 2 result: 0 Success # numResponses: 9 # numEntries: 8","title":"Exporting the ldap tree"},{"location":"ldap/set-up/","text":"Set up an OpenLdap server How to setup and configure an OpenLdap server First step in installing and setting up an OpenLdap server is to install slapd with the command: apt install slapd ldap-utils We need to reconfigure DIT dpkg-reconfigure slapd First option: We need a start configuration for the database. Therefore we click on No . Second option: The DNS domain name is used to generate the base DN of your LDAP directory. We use betrayer.com , so our base DN will be dc=betrayer, dc=com We set the name of our organization to betrayer.com . Third option: Now we can choose a password for the administrator LDAP-directory. Forth option: We want to store the database when it's deleted so we choose yes . Fifth option: We also move the old database with yes . As a result we get: Backing up /etc/ldap/slapd.d in /var/backups/slapd-2.5.13+dfsg-5... done. Moving old database directory to /var/backups: - directory unknown... done. Creating initial configuration... done. Creating LDAP directory... done. root@sdi08a:~# dpkg-reconfigure slapd Omitting slapd configuration as requested. root@sdi08a:~# dpkg-reconfigure slapd Omitting slapd configuration as requested. root@sdi08a:~# dpkg-reconfigure slapd Backing up /etc/ldap/slapd.d in /var/backups/slapd-2.5.13+dfsg-5... done. Moving old database directory to /var/backups: - directory unknown... done. Creating initial configuration... done. Creating LDAP directory... done. The LDAP server is configured. We tested the connection using Apache Directory Studio. As a host name we used vm1.g8.sdi.mi.hdm-stuttgart.de. We do not use an encryption method because we do not have a valid certificate. For authentication we use simple authentication. The string dc=betrayer,dc=com is the \"domain\" for the LDAP tree. Since we have registered the admin with the password in the slapd config we can use cn=admin to authenticate.","title":"Installing and configuring OpenLDAP"},{"location":"ldap/set-up/#set-up-an-openldap-server","text":"","title":"Set up an OpenLdap server"},{"location":"ldap/set-up/#how-to-setup-and-configure-an-openldap-server","text":"First step in installing and setting up an OpenLdap server is to install slapd with the command: apt install slapd ldap-utils We need to reconfigure DIT dpkg-reconfigure slapd First option: We need a start configuration for the database. Therefore we click on No . Second option: The DNS domain name is used to generate the base DN of your LDAP directory. We use betrayer.com , so our base DN will be dc=betrayer, dc=com We set the name of our organization to betrayer.com . Third option: Now we can choose a password for the administrator LDAP-directory. Forth option: We want to store the database when it's deleted so we choose yes . Fifth option: We also move the old database with yes . As a result we get: Backing up /etc/ldap/slapd.d in /var/backups/slapd-2.5.13+dfsg-5... done. Moving old database directory to /var/backups: - directory unknown... done. Creating initial configuration... done. Creating LDAP directory... done. root@sdi08a:~# dpkg-reconfigure slapd Omitting slapd configuration as requested. root@sdi08a:~# dpkg-reconfigure slapd Omitting slapd configuration as requested. root@sdi08a:~# dpkg-reconfigure slapd Backing up /etc/ldap/slapd.d in /var/backups/slapd-2.5.13+dfsg-5... done. Moving old database directory to /var/backups: - directory unknown... done. Creating initial configuration... done. Creating LDAP directory... done. The LDAP server is configured. We tested the connection using Apache Directory Studio. As a host name we used vm1.g8.sdi.mi.hdm-stuttgart.de. We do not use an encryption method because we do not have a valid certificate. For authentication we use simple authentication. The string dc=betrayer,dc=com is the \"domain\" for the LDAP tree. Since we have registered the admin with the password in the slapd config we can use cn=admin to authenticate.","title":"How to setup and configure an OpenLdap server"},{"location":"ldap/testing-bind-operation/","text":"Testing a bind operation as non-admin user First step is to set a password. We can achieve this by right clicking on the side uid e.g. uid=abean . You can select New Attribute on the top bar and choose as a attribute type userPassword from the selectable. Select a new password and a suitable hash method for encrypting the password. We used for example SMD5 . Important: Some password hash types may not be supported. We used SHA beforehand and the configuration did not work. To configure a second connection click on LDAP / New Connection . We name it for example LDAP Server abean . Use the correct password and the correct binding parameters. For our user uid=abean we had to use: uid=abean,ou=devel,ou=software,ou=departments,dc=betrayer,dc=com","title":"Testing a bind operation as non-admin user"},{"location":"ldap/testing-bind-operation/#testing-a-bind-operation-as-non-admin-user","text":"First step is to set a password. We can achieve this by right clicking on the side uid e.g. uid=abean . You can select New Attribute on the top bar and choose as a attribute type userPassword from the selectable. Select a new password and a suitable hash method for encrypting the password. We used for example SMD5 . Important: Some password hash types may not be supported. We used SHA beforehand and the configuration did not work. To configure a second connection click on LDAP / New Connection . We name it for example LDAP Server abean . Use the correct password and the correct binding parameters. For our user uid=abean we had to use: uid=abean,ou=devel,ou=software,ou=departments,dc=betrayer,dc=com","title":"Testing a bind operation as non-admin user"},{"location":"ldap/user-login/","text":"LDAP based user login Prerequisites We want to use our second virtual machine to authenticate against our previously configured LDAP server (as discussed in the previous chapter). To achieve this, we'll install an LDAP client. However, it's crucial to exercise caution when modifying the PAM configuration. Pluggable Authentication Modules ( PAM ) is an integrated UNIX login framework used by system components to authenticate users when logging into a UNIX system. Making a backup of the PAM config To create a backup, we used the following commands: tar zcf /root/pam.tgz /etc/pam.conf /etc/pam.d tar - tape archiver: this command is being used to archive data on linux system .tgz - is an archive data format We can check if the archive was built correctly by listing the contents of the compressed archive. It should show something like this: tar ztf /root/pam.tgz pam.conf pam.d/ pam.d/common-auth pam.d/cron pam.d/newusers pam.d/passwd pam.d/login pam.d/su-l pam.d/sshd pam.d/chpasswd pam.d/common-password pam.d/other pam.d/chfn pam.d/chsh pam.d/common-session-noninteractive pam.d/su pam.d/common-account pam.d/common-session pam.d/runuser pam.d/runuser-l In case we failed to configure and therefore not being able to log in anymore we can always restore the working configuration like this: mv /etc/pam.d /etc/pam.d.orig mv /etc/pam.conf /etc/pam.conf.orig tar zxf /root/pam.tgz Important: Now it's time to open a second shell. In case of emergency this means that we accidentally log out of the server. In that case we unfortunately would not able to log in again. Configuration of the LDAP Client First we check whether the domain name is also resolved by our LDAP server. We can either ping the name directly to see if we get an answer or create an entry with the IP address under /etc/hosts. for example like this: nano /etc/hosts 141.62.75.108 vm1.g8.sdi.mi.hdm-stuttgart.de References www.ibm.com/docs/de/netcoolomnibus/8.1?topic=authentication-pam-unix-linux wiki.ubuntuusers.de/tar/ computingforgeeks.com/how-to-configure-ubuntu-as-ldap-client/","title":"LDAP based user login"},{"location":"ldap/user-login/#ldap-based-user-login","text":"","title":"LDAP based user login"},{"location":"ldap/user-login/#prerequisites","text":"We want to use our second virtual machine to authenticate against our previously configured LDAP server (as discussed in the previous chapter). To achieve this, we'll install an LDAP client. However, it's crucial to exercise caution when modifying the PAM configuration. Pluggable Authentication Modules ( PAM ) is an integrated UNIX login framework used by system components to authenticate users when logging into a UNIX system.","title":"Prerequisites"},{"location":"ldap/user-login/#making-a-backup-of-the-pam-config","text":"To create a backup, we used the following commands: tar zcf /root/pam.tgz /etc/pam.conf /etc/pam.d tar - tape archiver: this command is being used to archive data on linux system .tgz - is an archive data format We can check if the archive was built correctly by listing the contents of the compressed archive. It should show something like this: tar ztf /root/pam.tgz pam.conf pam.d/ pam.d/common-auth pam.d/cron pam.d/newusers pam.d/passwd pam.d/login pam.d/su-l pam.d/sshd pam.d/chpasswd pam.d/common-password pam.d/other pam.d/chfn pam.d/chsh pam.d/common-session-noninteractive pam.d/su pam.d/common-account pam.d/common-session pam.d/runuser pam.d/runuser-l In case we failed to configure and therefore not being able to log in anymore we can always restore the working configuration like this: mv /etc/pam.d /etc/pam.d.orig mv /etc/pam.conf /etc/pam.conf.orig tar zxf /root/pam.tgz Important: Now it's time to open a second shell. In case of emergency this means that we accidentally log out of the server. In that case we unfortunately would not able to log in again.","title":"Making a backup of the PAM config"},{"location":"ldap/user-login/#configuration-of-the-ldap-client","text":"First we check whether the domain name is also resolved by our LDAP server. We can either ping the name directly to see if we get an answer or create an entry with the IP address under /etc/hosts. for example like this: nano /etc/hosts 141.62.75.108 vm1.g8.sdi.mi.hdm-stuttgart.de","title":"Configuration of the LDAP Client"},{"location":"ldap/user-login/#references","text":"www.ibm.com/docs/de/netcoolomnibus/8.1?topic=authentication-pam-unix-linux wiki.ubuntuusers.de/tar/ computingforgeeks.com/how-to-configure-ubuntu-as-ldap-client/","title":"References"}]}